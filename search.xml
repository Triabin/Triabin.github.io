<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第4章面向对象编程（上）</title>
      <link href="/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：Java面对对象学习的三条主线"><a href="#前言：Java面对对象学习的三条主线" class="headerlink" title="前言：Java面对对象学习的三条主线"></a>前言：Java面对对象学习的三条主线</h1><ol><li>Java类及类的成员：属性、方法、构造器；代码块、内部类；</li><li>面向对象的三大特征：封装性、继承性、多态性（、抽样性）；</li><li>其他关键字：this、super、final、abstract、interface、package、import等。</li></ol><blockquote><p>三条主线并行推进</p></blockquote><h1 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h1><h2 id="面向过程与面向对象区别"><a href="#面向过程与面向对象区别" class="headerlink" title="面向过程与面向对象区别"></a>面向过程与面向对象区别</h2><ol><li><p>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</p></li><li><p>面向对象：将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p></li></ol><h2 id="面对对象的三大特征"><a href="#面对对象的三大特征" class="headerlink" title="面对对象的三大特征"></a>面对对象的三大特征</h2><ol><li><p>封装（Encapsulation）</p></li><li><p>继承（Inheritance）</p></li><li><p>多态（Polymorphism）</p></li></ol><h2 id="面对对象的思想概述"><a href="#面对对象的思想概述" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h2><ol><li><p>程序员从面向过程的执行者转化成了面向对象的指挥者。</p></li><li><p>面对对象分析问题的思路和步骤：</p><ul><li>根据问题需要，选择问题所针对的现实世界中的实体。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象，对象是计算机世界中解决问题的最终工具。</li></ul></li></ol><h1 id="Java基本元素：类和对象"><a href="#Java基本元素：类和对象" class="headerlink" title="Java基本元素：类和对象"></a>Java基本元素：类和对象</h1><h2 id="面对对象的思想概述-1"><a href="#面对对象的思想概述-1" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h2><ol><li><p>类（Class）和对象（Object）是面向对象的核心概念。</p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例（instance）</li></ul></li><li><p>万物皆对象</p><ul><li>面对对象程序设计的重点是类的设计</li><li>类的设计，其实就是类的成员的设计</li></ul></li></ol><h2 id="Java类及类的成员"><a href="#Java类及类的成员" class="headerlink" title="Java类及类的成员"></a>Java类及类的成员</h2><ol><li><p>现实世界的生物体，大到鲸鱼，小到蚂蚁，都是由最基本的细胞构成的。同理，Java代码世界是由诸多不同功能的类构成的。</p></li><li><p>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质……那么，Java中用类来描述事物也是如此。常见类的成员有：</p><ul><li>属性：对应类中的成员变量</li><li>行为：对应类中的成员方法</li></ul></li></ol><blockquote><p>Field = 属性 = 成员变量 = 域、字段，Method = （成员）方法 = 函数</p><p>创建类的对象 = 类的实例化 = 实例化类</p></blockquote><h2 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h2><h3 id="面对对象思想落地的实现"><a href="#面对对象思想落地的实现" class="headerlink" title="面对对象思想落地的实现"></a>面对对象思想落地的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.dawn333.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>    一、类和对象的使用（面对对象思想落地的实现）：</span></span><br><span class="line"><span class="comment"> * 1、创建类，设计类的成员</span></span><br><span class="line"><span class="comment"> * 2、创建类的对象</span></span><br><span class="line"><span class="comment"> * 3、通过“对象.属性”或“对象.方法”调用对象的结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     二、如果创建了多个对象，则每个对象都独立的拥有一套属性。（非static）</span></span><br><span class="line"><span class="comment"> *     意味着，如果改一个对象的属性a，不影响另一个对象属性a的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-30    16:32:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person类的对象、</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用对象的结构：属性、方法</span></span><br><span class="line">        <span class="comment">//调用属性：对象.属性</span></span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法：对象.方法</span></span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep();</span><br><span class="line">        p1.talk(<span class="string">&quot;Chinese&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p3 = p1;</span><br><span class="line">        <span class="comment">//将p1变量保存的地址赋给p3，导致p1和p3指向了堆空间中的同一个对象实体。</span></span><br><span class="line">        System.out.println(p3.name);<span class="comment">//Tom</span></span><br><span class="line">        p3.age = <span class="number">10</span>;</span><br><span class="line">        System.out.println(p1.age);<span class="comment">//10        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以说话，使用的语言是：&quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230211.png"></p><h2 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230330.png"></p><ol><li><p>堆（heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p></li><li><p>通常所说的栈（stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（bolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</p></li><li><p>方法区（method area），用于存储已被虚拟机加载类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></li><li><p>对象内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230516.png" alt="03对象的内存解析"></p></li></ol><h3 id="内存解析的说明"><a href="#内存解析的说明" class="headerlink" title="内存解析的说明"></a>内存解析的说明</h3><ol><li><p>引用类型的变量，只可能存储两类值：null或地址值（含变量的类型）</p></li><li><p>对象数组的内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806155821.png"></p></li></ol><h3 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h3><ol><li>关注书籍：《JVM规范》</li><li>虚拟机栈即为平时提到的栈结构，<font color="red">我们将局部变量存储在栈结构中</font>。</li><li>堆，我们将new出来的结构（比如数组、对象）加载在堆空间中。补充：对象的属性（非static）加载在堆空间中。</li></ol><h2 id="理解“万事万物皆对象”"><a href="#理解“万事万物皆对象”" class="headerlink" title="理解“万事万物皆对象”"></a>理解“万事万物皆对象”</h2><ol><li>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。<ul><li>Scanner，String等</li><li>文件：File</li><li>网络资源：URL</li></ul></li><li>涉及到Java语言与前端HTML、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</li></ol><h2 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h2><ol><li><p>理解：我们创建的对象没有显示的赋给一个变量名，    即为匿名对象。</p></li><li><p>特征：匿名对象只能代用一次。</p></li><li><p>使用：如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 匿名对象的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    16:04:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;正常调用：&quot;</span>);</span><br><span class="line">        p.sendEmail();</span><br><span class="line">        p.playGame();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//匿名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Phone().sendEmail();</span><br><span class="line">        <span class="keyword">new</span> Phone().playGame();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象只能代用一次：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Phone().price = <span class="number">1999</span>;</span><br><span class="line">        <span class="keyword">new</span> Phone().showPrice();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象的使用：&quot;</span>);</span><br><span class="line">        PhoneMall mall = <span class="keyword">new</span> PhoneMall();</span><br><span class="line"><span class="comment">//        mall.show(p);</span></span><br><span class="line">        mall.show(<span class="keyword">new</span> Phone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneMall</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">        phone.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price;<span class="comment">//价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机的价格为：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89%5Cimage-20200806162820788.png" alt="image-20200806162820788"></p></li></ol><h1 id="类的成员之一：属性"><a href="#类的成员之一：属性" class="headerlink" title="类的成员之一：属性"></a>类的成员之一：属性</h1><h2 id="类中属性的使用"><a href="#类中属性的使用" class="headerlink" title="类中属性的使用"></a>类中属性的使用</h2><h3 id="属性（成员变量）与局部变量区别"><a href="#属性（成员变量）与局部变量区别" class="headerlink" title="属性（成员变量）与局部变量区别"></a>属性（成员变量）与局部变量区别</h3><ol><li><p>相同点</p><ul><li>定义变量的格式：数据类型 变量名 = 变量值</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul></li><li><p>不同点</p><ul><li><p>在类中声明的位置不同：</p><ul><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、构造器形参、构造器内部的变量</li></ul></li><li><p>关于权限修饰符</p><ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符，常用的权限修饰符有：private、public、缺省、protected —》讲封装性时再说，目前缺省即可。</li><li>局部变量：不可以使用权限修饰符。</li></ul></li><li><p>默认初始化值的情况</p><ul><li>属性：类的属性，根据其类型，都有默认初始化值。<ul><li>整形（byte、short、int、long）：0</li><li>浮点型（float、double）：0.0</li><li>字符型（char）：0（或’\u0000’）</li><li>布尔型（boolean）：false</li><li>引用数据类型（类、数组、接口）：null</li></ul></li><li>局部变量：没有默认初始化值，意味着在调用局部变量之前一定要显示赋值。<ul><li>特别地：形参在调用时，我们赋值即可，例如下列代码实例的User方法中的String language。</li></ul></li></ul></li><li><p>在内存中加载的位置</p><ul><li>属性：加载到堆空间中（非static）</li><li>局部变量：加载到栈空间</li></ul></li></ul></li><li><p>变量的分类二：按照在类中声明的位置</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806153535.png"></p></li></ol><h3 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类中属性的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    14:49:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(u1.name);</span><br><span class="line">        System.out.println(u1.age);</span><br><span class="line">        System.out.println(u1.isMale);</span><br><span class="line">        u1.talk(<span class="string">&quot;日语&quot;</span>);<span class="comment">//特别的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性（或成员变量）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;<span class="comment">//形参，也是局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我们使用&quot;</span> + language +<span class="string">&quot;进行交流。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String food = <span class="string">&quot;烙饼&quot;</span>;<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;北方人喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805154347.png"></p><h1 id="类的成员之二：方法"><a href="#类的成员之二：方法" class="headerlink" title="类的成员之二：方法"></a>类的成员之二：方法</h1><ul><li>方法：描述类具有的功能。比如：Math类：sqrt()\random()\……<ul><li>Scanner类：nextXxx()……</li><li>Arrarys类：sort()\binarySearch()\toString()\equals()\……</li></ul></li></ul><h2 id="类中方法的声明和使用"><a href="#类中方法的声明和使用" class="headerlink" title="类中方法的声明和使用"></a>类中方法的声明和使用</h2><ol><li><p>举例（后面的代码实例中）：</p><ul><li>public void eat(){}（void：没有返回值）</li><li>public void sleep(int hour){}</li><li>public String getNmae() {}（String：返回一个String类型的数据）</li><li>public String getNation(String nation){}</li></ul></li><li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){</p><p>​    方法体</p><p>​    }</p><ul><li>注意：static、final、abstract来修饰的方法以后再讲。</li></ul></li><li><p>说明：</p><ul><li><p>关于权限修饰符：目前默认方法的权限修饰符先都使用public。</p></li><li><p>Java规定的4种权限修饰符：private、public、缺省、protected —&gt; 封装性再细说.</p></li><li><p>返回值类型：有返回值or无返回值</p><ul><li><p>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中必须使用return关键字来返回指定类型的变量或常量。例如下列代码实例方法中的getName()方法。</p></li><li><p>如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不使用return。但是，如果使用的话，只能“return;”，表示结束此方法。</p></li><li><p>我们定义方法该不该有返回值？</p><p>①题目要求</p><p>②凭经验：具体问题具体分析</p></li></ul></li><li><p>方法名：属于标识符，遵循表示符的规则和命名规范，“见名知意”。</p></li><li><p>形参列表：方法可以声明0个，1个或多个形参。</p><ul><li><p>格式：数据类型1 形参1,数据类型2 形参2,…</p></li><li><p>我们定义方法时要不要形参？</p><p>① 题目要求</p><p>② 凭经验，具体问题具体分析</p></li></ul></li><li><p>方法体：方法功能的体现。</p></li></ul></li><li><p>return关键字的使用：</p><ul><li>使用范围：使用在方法体中。</li><li>作用：①结束方法；②针对于有返回值的方法，使用“return 数据;”方法返回所要的数据。</li><li>注意：return关键字后面不可以声明执行语句。</li></ul></li><li><p>方法的使用中可以调用当前类的属性或方法</p><ul><li>特别地：方法A中调用方法A：递归方法。</li><li>方法中不能再定义方法。</li></ul></li></ol><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    15:28:19</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomarTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customar</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性:</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;休息了&quot;</span> + hour + <span class="string">&quot;小时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNmae</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//没有else则报错，必须要有一个返回值。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">&quot;我的国籍是：&quot;</span> + nation;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的分类（按照是否有形参及返回值）"><a href="#方法的分类（按照是否有形参及返回值）" class="headerlink" title="方法的分类（按照是否有形参及返回值）"></a>方法的分类（按照是否有形参及返回值）</h2><table><thead><tr><th align="center"></th><th align="center">无返回值</th><th align="center">有返回值</th></tr></thead><tbody><tr><td align="center">无形参</td><td align="center">void方法名(){}</td><td align="center">返回值类型 方法名 (){}</td></tr><tr><td align="center">有形参</td><td align="center">void方法名(形参列表){}</td><td align="center">返回值类型 方法名 (形参列表){}</td></tr></tbody></table><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><h3 id="练习一：创建一个Person类，其定义如下："><a href="#练习一：创建一个Person类，其定义如下：" class="headerlink" title="练习一：创建一个Person类，其定义如下："></a>练习一：创建一个Person类，其定义如下：</h3><table><thead><tr><th align="left">Person</th></tr></thead><tbody><tr><td align="left">name:String<br>age:int<br>sex:int</td></tr><tr><td align="left">+study():void<br>+showAge():void<br>+addAge(int i):int</td></tr></tbody></table><p>要求：</p><ul><li>创建Person类的对象，设置该对象的name、age和sex属性，调用study()方法，输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对象的age属性增加2岁。</li><li>创建第2个对象，执行上述操作，体会同一个类的不同对象之间的关系。</li></ul><p>Person类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类方法练习题 ：创建类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    19:17:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sex:1表明是男性</span></span><br><span class="line"><span class="comment">     * sex:0表明是女性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;studying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        age += i;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类方法练习题：测试（调用）创建的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    19:24:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     （1）创建Person类的对象，设置该对象的name、age和sex属性，调用study()方法，</span></span><br><span class="line"><span class="comment">         *     输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对</span></span><br><span class="line"><span class="comment">         *     象的age属性增加2岁。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用属性</span></span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">18</span>;</span><br><span class="line">        p1.sex = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        p1.study();</span><br><span class="line">        p1.showAge();</span><br><span class="line">        <span class="keyword">int</span> newAge = p1.addAge(<span class="number">2</span>);</span><br><span class="line">        System.out.println(p1.name + <span class="string">&quot;新年龄为：&quot;</span> + newAge);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     （2）创建第2个对象，执行上述操作，体会同一个类的不同对象之间的关系。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.study();</span><br><span class="line">        p2.showAge();</span><br><span class="line">        p2.addAge(<span class="number">2</span>);</span><br><span class="line">        p2.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805200444.png"></p><p>tips：在同一个包（package）里面，类方法可以分开写然后正常调用。</p><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 利用面向对象的编程方法，设计类Circle计算圆的面积。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    20:09:00</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle c1 = <span class="keyword">new</span> Circle();</span><br><span class="line">        c1.radius = <span class="number">2.1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对应方式一:</span></span><br><span class="line"><span class="comment">//        double area = c1.findArea();</span></span><br><span class="line"><span class="comment">//        System.out.println(area);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对应方式二:</span></span><br><span class="line">        c1.findArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式一：有返回值</span></span><br><span class="line"><span class="comment">//    public double findArea() &#123;</span></span><br><span class="line"><span class="comment">//        double area = Math.PI * radius * radius;</span></span><br><span class="line"><span class="comment">//        return area;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式二：无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = Math.PI * radius * radius;</span><br><span class="line">        System.out.println(<span class="string">&quot;面积为：&quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805202640.png"></p><h3 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>    3.1 编写程序，声明一个method方法，在方法中打印一个10*8的*型矩形，在main方法中调用改方法。</span></span><br><span class="line"><span class="comment"> *    3.2 修改上一个程序，在method方法中，除打印一个10*8的*型矩形外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"> *    3.3 修改上一个程序，在method方法中提供m和n两个参数，方法中打印一个m*n的*型矩形，并计算该矩形的面积，将其作为方法返回值。在main函数种调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    20:35:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Exercise3 test = <span class="keyword">new</span> Exercise3();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.1 测试：</span></span><br><span class="line">        <span class="comment">//test.method();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.2 测试：</span></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int area = test.method();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;面积为：&quot; + area);</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;面积为：&quot; + test.method());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.3 测试</span></span><br><span class="line">        <span class="keyword">int</span> area = test.method(<span class="number">12</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;面积为：&quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.1:</span></span><br><span class="line"><span class="comment">//    public void method() &#123;</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; 8;i++) &#123;</span></span><br><span class="line"><span class="comment">//            for(int j = 0;j &lt; 10;j++) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;* &quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.2:</span></span><br><span class="line"><span class="comment">//    public int method() &#123;</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; 8;i++) &#123;</span></span><br><span class="line"><span class="comment">//            for(int j = 0;j &lt; 10;j++) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;* &quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return 10 * 8;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.3:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.1：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805230403.png"></p><ul><li>3.2</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805213713.png"></p><ul><li>3.3</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805214434.png"></p><h3 id="练习四"><a href="#练习四" class="headerlink" title="练习四"></a>练习四</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 4.对象数组题目：</span></span><br><span class="line"><span class="comment"> *     定义类Student，包含3个属性：学号number（int），年级state（int），成绩score（int）。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</span></span><br><span class="line"><span class="comment"> *     问题一：打印出3年级（state值为3）的学生信息。</span></span><br><span class="line"><span class="comment"> *     问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line"><span class="comment"> *     提示：</span></span><br><span class="line"><span class="comment"> *     1）生成随机数：Math.random()，返回值类型double；</span></span><br><span class="line"><span class="comment"> *     2）四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    21:48:01</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明Student类型的数组</span></span><br><span class="line">        Student[] stu = <span class="keyword">new</span> Student[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="comment">//给数组元素赋值</span></span><br><span class="line">            stu[i] = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//Student对象的属性赋值</span></span><br><span class="line">            stu[i].number = (i + <span class="number">1</span>);</span><br><span class="line">            stu[i].state = (<span class="keyword">int</span>)(Math.random() * (<span class="number">6</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);<span class="comment">//6个年级</span></span><br><span class="line">            stu[i].score = (<span class="keyword">int</span>)(Math.random() * (<span class="number">100</span> - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：打印出3年级（state值为3）的学生信息:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(stu[i].info());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; stu.length -<span class="number">1</span> -i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stu[j].score &gt; stu[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">                    <span class="comment">//如果需要换序交换的是数组元素：Student对象！！！</span></span><br><span class="line">                    Student temp = stu[j];</span><br><span class="line">                    stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">                    stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> state;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;年级：&quot;</span> + state + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;成绩：&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805223223.png"></p><ul><li>优化：将各个重复性操作封装成方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 4.对象数组题目：</span></span><br><span class="line"><span class="comment"> *     定义类Student，包含3个属性：学号number（int），年级state（int），成绩score（int）。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</span></span><br><span class="line"><span class="comment"> *     问题一：打印出3年级（state值为3）的学生信息。</span></span><br><span class="line"><span class="comment"> *     问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line"><span class="comment"> *     提示：</span></span><br><span class="line"><span class="comment"> *     1）生成随机数：Math.random()，返回值类型double；</span></span><br><span class="line"><span class="comment"> *     2）四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    21:48:01</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明Student类型的数组</span></span><br><span class="line">        Student[] stu = <span class="keyword">new</span> Student[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="comment">//给数组元素赋值</span></span><br><span class="line">            stu[i] = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//Student对象的属性赋值</span></span><br><span class="line">            stu[i].number = (i + <span class="number">1</span>);</span><br><span class="line">            stu[i].state = (<span class="keyword">int</span>)(Math.random() * (<span class="number">6</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);<span class="comment">//6个年级</span></span><br><span class="line">            stu[i].score = (<span class="keyword">int</span>)(Math.random() * (<span class="number">100</span> - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Exercise4 test = <span class="keyword">new</span> Exercise4();</span><br><span class="line">        <span class="comment">//遍历学生数组</span></span><br><span class="line">        test.print(stu);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：打印出3年级（state值为3）的学生信息:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        test.searchState(stu, <span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        test.sort(stu);</span><br><span class="line">        test.print(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历数组的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Student[] stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 查找Student数组中指定年级的学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span>    2.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-522:44:37</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stu    要查找的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state    要找的年级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchState</span><span class="params">(Student[] stu, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].state == state) &#123;</span><br><span class="line">                System.out.println(stu[i].info());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 给Student数组排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-522:47:31</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stu </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Student[] stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; stu.length -<span class="number">1</span> -i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stu[j].score &gt; stu[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">                    <span class="comment">//如果需要换序交换的是数组元素：Student对象！！！</span></span><br><span class="line">                    Student temp = stu[j];</span><br><span class="line">                    stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">                    stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> state;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;年级：&quot;</span> + state + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;成绩：&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：面试遇到举例说明类和对象的关系时尽量举开发中的例子。</p></blockquote><h1 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h1><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><ol><li><p>定义</p><ul><li>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<ul><li>“两同一不同”：同一个类、相同的方法名；参数列表不同：参数个数不同、参数类型不同。</li></ul></li></ul></li><li><p>特点</p></li></ol><ul><li>与返回值类型无关，只看参数列表，且参数列表必须不同。（参数个数或参数类型）。调用时，根据方法参数列表的不同来区别。</li></ul><ol start="3"><li><p>示例</p><ul><li>Arrays类中重载的sort() / binarySearch()</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法重载举例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    18:51:26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadTest test = <span class="keyword">new</span> OverLoadTest();</span><br><span class="line">        test.getSum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如下4个方法构成了重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> d1, <span class="keyword">double</span> d2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public int getSum(int i,int j) &#123;</span></span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public void getSum(int m,int n) &#123;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：支持自动类型提升，例如，如果形参为double型，但是输入的形参为int型，则自动将int型转换为double型。</p></li><li><p>判断是否是重载</p></li></ol><ul><li>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系。</li></ul><ol start="5"><li><p>通过对象调用方法时，如何确定某一个指定的方法：</p><ul><li>方法名 —&gt; 参数列表</li></ul></li></ol><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h4 id="练习题一"><a href="#练习题一" class="headerlink" title="练习题一"></a>练习题一</h4><ul><li>编写程序，定义三个重载方法并调用。方法名为mOL。<ul><li>三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果、相乘并输出结果、输出字符串信息。</li><li>在主类的main方法中分别用参数区别调用三个方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义三个重载方法并调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    19:36:02</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadEx1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadEx1 m = <span class="keyword">new</span> OverLoadEx1();</span><br><span class="line">        m.mOL(<span class="number">2</span>);</span><br><span class="line">        m.mOL(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        m.mOL(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i * i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(i * j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习题二"><a href="#练习题二" class="headerlink" title="练习题二"></a>练习题二</h4><ul><li>定义三个重载方法max()，第一个方法求两个int值中的最大值，第二个方法求两个double值中的最大值，第三个方法求三个double值中的最大值，分别调用三个方法。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 重载方法练习二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    19:50:35</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadEx2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadEx2 test = <span class="keyword">new</span> OverLoadEx2();</span><br><span class="line">        test.max(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        test.max(<span class="number">1.5</span>, <span class="number">3.5</span>);</span><br><span class="line">        test.max(<span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">7.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个方法求得最大值为：&quot;</span> + ((i &gt; j)? i : j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个方法求得最大值为：&quot;</span> + ((i &gt; j)? i : j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j,<span class="keyword">double</span> k)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个方法求得最大值为：&quot;</span> + ((((i &gt; j)? i : j) &gt; k)? ((i &gt; j)? i : j) : k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><ol><li><p>JavaSE 5.0中提供了Varargs(variable number of arguments)机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。</p><ul><li><p>JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</p><p><code>public static void test(int a,String[] books);</code></p></li><li><p>JDK 5.0：采用可变个数形参来定义方法，传入多个同一类型变量</p><p><code>public static void test(int a,String...books);</code></p></li></ul></li><li><p>具体使用：</p><ul><li>可变个数形参的格式：数据类型 … 变量名</li><li>当调用可变个数形参的方法时，传入的参数个数可以是：0个、1个、2个……</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载。</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不够成重载（即二者不能共存）。</li><li>可变个数形参在方法的形参列表中，必须声明在末尾。</li><li>可变个数形参在方法的形参列表中，最多只能声明一个可变形参。</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 可变个数的形参具体使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    20:29:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarAgu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VarAgu test = <span class="keyword">new</span> VarAgu();</span><br><span class="line">        test.show(<span class="number">12</span>);</span><br><span class="line">        test.show(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        test.show(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        test.show();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        test.show(new String[] &#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;);//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量,JDK 5.0向前兼容,所以(String ... strs)同样可以用此方法传入形参</span></span><br><span class="line">        test.show(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(int i)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(String)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String ... strs)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(String ... strs)&quot;</span>);</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public void show(String[] strs) &#123;//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;show(String[] strs)&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a><font color="red">方法参数的值传递机制</font></h2><h3 id="变量的值传递机制"><a href="#变量的值传递机制" class="headerlink" title="变量的值传递机制"></a>变量的值传递机制</h3><ol><li><p>关于变量的赋值：</p><p>如果是基本数据类型，此时赋值的是变量所保存的数据值；</p><p>如果变量是引用数据类型，此时，赋值的是变量所保存的数据的地址值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法参数的值传递机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    21:03:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******基本数据类型的值传递情况******&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = m;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;******引用数据类型的值传递情况******&quot;</span>);</span><br><span class="line">        Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">        o1.orderID = <span class="number">1001</span>;</span><br><span class="line">        Order o2 = o1;<span class="comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderID = &quot;</span> + o1.orderID + <span class="string">&quot;, o2.orderID = &quot;</span> + o2.orderID);</span><br><span class="line">        o2.orderID = <span class="number">1002</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderID = &quot;</span> + o1.orderID + <span class="string">&quot;, o2.orderID = &quot;</span> + o2.orderID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> orderID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806215036.png" align="left"></li></ol><h3 id="方法的形参传递机制：值传递"><a href="#方法的形参传递机制：值传递" class="headerlink" title="方法的形参传递机制：值传递"></a>方法的形参传递机制：值传递</h3><ol><li><p>形参：方法定义时，声明的小括号内的参数。</p><p>实参：调用方法时实际传递给形参的数据。</p></li><li><p><font color="red">值传递机制</font>：</p><p>如果参数是<strong style="background:yellow">基本数据类型</strong>，此时实参赋给形参的是实参真实存储的<strong style="background:yellow">数据值</strong>;</p><p>如果参数是<strong style="background:yellow">引用数据类型</strong>，此时实参赋给形参的是实参存储数据的<strong style="background:yellow">地址值</strong>。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 法的形参传递机制：值传递</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    21:52:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        <span class="comment">//交换两个变量值的操作</span></span><br><span class="line"><span class="comment">//        int temp = m;</span></span><br><span class="line"><span class="comment">//        m = n;</span></span><br><span class="line"><span class="comment">//        n = temp;</span></span><br><span class="line">        ValueTransfer01 test = <span class="keyword">new</span> ValueTransfer01();</span><br><span class="line">        test.swap(m, n);<span class="comment">//未能交换，原因看内存解析。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806221508.png" align="left"><ul><li>内存解析（交换失败原因）</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806220731.png" style="zoom:75%;" align="left"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        data.m = <span class="number">10</span>;</span><br><span class="line">        data.n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;,n = &quot;</span> + data.n);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//交换m和n的值</span></span><br><span class="line"><span class="comment">//        int temp = data.m;</span></span><br><span class="line"><span class="comment">//        data.m = data.n;</span></span><br><span class="line"><span class="comment">//        data.n = temp;</span></span><br><span class="line">        ValueTransfer02 test = <span class="keyword">new</span> ValueTransfer02();</span><br><span class="line">        test.swap(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;,n = &quot;</span> + data.n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = data.m;</span><br><span class="line">        data.m = data.n;</span><br><span class="line">        data.n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806224618.png" align="left"><ul><li>内存解析</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806223846.png" style="zoom:40%;" align="left"></li></ol><h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><h4 id="例题一：方法的参数传递"><a href="#例题一：方法的参数传递" class="headerlink" title="例题一：方法的参数传递"></a>例题一：方法的参数传递</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    8:27:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ValueTransferEx01 test = <span class="keyword">new</span> ValueTransferEx01();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v,i);</span><br><span class="line">        System.out.println(v.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.println(v.i + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果</p><p>15 0</p><p>20</p></li><li><p>内存解析</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807091641.png" style="zoom:40" align="left"></li></ul><h4 id="练习二-1"><a href="#练习二-1" class="headerlink" title="练习二"></a>练习二</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    8:48:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ValueTransferEx02 test = <span class="keyword">new</span> ValueTransferEx02();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        test.method(a,b);<span class="comment">//需要在method方法被调用之后，仅打印出a = 100,b = 200，请写出method方法的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码编写处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span> * a;</span><br><span class="line">        b = <span class="number">20</span> * b;</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">        System.exit(<span class="number">0</span>);<span class="comment">//直接退出程序，不再执行后续步骤</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二：对输出流做处理，以后再学</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>本题不是考察方法的参数传递，只是一个易混淆思考方向的题目</p><h4 id="练习三：将对象作为参数传递给方法"><a href="#练习三：将对象作为参数传递给方法" class="headerlink" title="练习三：将对象作为参数传递给方法"></a>练习三：将对象作为参数传递给方法</h4><ol><li><p>定义一个Circle类，包含一个double型的radius属性代表圆的半径，一个findArea()返回圆的面积。</p></li><li><p>定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：public void printAreas(Circle c, int time)</p><p>在printAreas方法中打印输出1到time之间的每个整数半径值，以及对应的面积。例如，time为5，输出半径为1，2，3，4，5及其对应的圆面积。</p></li><li><p>在main方法中调用printAreas()，调用完毕后输出当前半径值。程序运行结果如图所示：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807091933.png" align="left" style="zoom:100%"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    9:30:36</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PassObject test = <span class="keyword">new</span> PassObject();</span><br><span class="line">        Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">5</span>;</span><br><span class="line">        test.printAreas(c, time);</span><br><span class="line">        System.out.println(<span class="string">&quot;now radius is:&quot;</span> + c.radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAreas</span><span class="params">(Circle c,<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Radius\t\tArea&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> i = <span class="number">1</span>;i &lt;= time;i++) &#123;</span><br><span class="line">            c.radius = i;</span><br><span class="line">            System.out.println(c.radius + <span class="string">&quot;\t\t&quot;</span> + c.findArea());</span><br><span class="line">        &#125;</span><br><span class="line">        c.radius = time + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807152312.png" align="left"></li></ol><h2 id="递归（recursion）方法"><a href="#递归（recursion）方法" class="headerlink" title="递归（recursion）方法"></a>递归（recursion）方法</h2><ol><li><p>递归方法：一个方法体内调用自身。</p></li><li><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无需循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 递归方法示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:04:41</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算1-100内所有数的和</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++) &#123;</span><br><span class="line">            sum1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一：&quot;</span> + sum1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二（递归）：</span></span><br><span class="line">        RecursionIns test = <span class="keyword">new</span> RecursionIns();</span><br><span class="line">        <span class="keyword">int</span> sum2 = test.getSum(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式二：&quot;</span> + sum2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算阶乘</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> fac = test.getFac(n);</span><br><span class="line">        System.out.println(n + <span class="string">&quot;的阶乘为：&quot;</span> + fac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算1-100内所有数的和的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n + getSum(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算1-n之间的乘积：n!</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * getFac(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807152550.png" align="left"></li></ol><h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><ul><li>已知有一个数列：f(0) = 1，f(1) = 4，f(n+2) = 2*f(n+1) + f(n)，其中n是大于0的整数，求f(10)的值。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 已知有一个数列：f(0) = 1，f(1) = 4，f(n+2) = 2*f(n+1) + f(n)，</span></span><br><span class="line"><span class="comment"> *                 其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:33:08</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionEx01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RecursionEx01 test = <span class="keyword">new</span> RecursionEx01();</span><br><span class="line">        System.out.println(<span class="string">&quot;f(10) = &quot;</span> + test.f(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>*f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807154838.png" align="left"><h4 id="练习二：斐波那契数列（Fibonacci）"><a href="#练习二：斐波那契数列（Fibonacci）" class="headerlink" title="练习二：斐波那契数列（Fibonacci）"></a>练习二：斐波那契数列（Fibonacci）</h4><ul><li><p>输入一个数据n，计算斐波那契数列(Fibonacci)的第n个值1 1 2 3 5 8 13 21 34 55。</p><p>规律：一个数等于前两个数之和。</p><p>要求：计算斐波那契数列的第n个值，并将整个数列打印出来。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 计算斐波那契数列第n个值并打印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:58:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RecursionEx02 test = <span class="keyword">new</span> RecursionEx02();</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印斐波那契数列前几位？（输入任意大于0的整数）&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = input.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">            System.out.print(test.f(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807160649.png" align="left"><h2 id="章节练习-1"><a href="#章节练习-1" class="headerlink" title="章节练习"></a>章节练习</h2><ol><li><p>什么是方法重载？</p><p>“两同一不同”：同一个类、相同的方法名；参数列表不同。</p></li><li><p>说明Java方法中的参数传递机制的具体体现。</p><p>基本数据类型：数据值</p><p>引用数据类型：地址值（含变量的数据类型）例：</p><p><code>Person p1 =  new Person();</code></p><p><code>User u1 = p1;//编译错误</code></p></li><li><p>成员变量和局部变量在声明的位置上是否有默认初始化值？</p></li><li><p>谈谈return关键字的使用。</p><p>①结束方法</p><p>②针对于有返回值的方法，return + 返回数据;</p></li><li><p>拓展：宋老师，我今天去百度面试，遇到一个双重递归调用的问题，我琢磨了一下，完全不知道为什么。打断点了，也还是没看懂程序为什么会那样走。您有空可以看一下，求指教。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试递归调用的次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">()</span></span>&#123; recursion(<span class="number">10</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    System.out.println(<span class="string">&quot;count1:&quot;</span> + count + <span class="string">&quot;    k:&quot;</span> + k);</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> recursion(k - <span class="number">1</span>) + recursion(k - <span class="number">2</span>);<span class="comment">//287</span></span><br><span class="line">    <span class="comment">//return recursion(k - 1);//11</span></span><br><span class="line">    <span class="comment">//return recursion(k - 1) + recursion(k - 1);//2047</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>图解</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807225959.png" align="left"></li></ol><h1 id="OOP特征一：封装与隐藏"><a href="#OOP特征一：封装与隐藏" class="headerlink" title="OOP特征一：封装与隐藏"></a>OOP特征一：封装与隐藏</h1><ul><li>OOP，即Object oriented programming，面向对象编程。</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ol><li>为什么需要封装？封装的作用和含义？<ul><li>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部结构吗？有必要碰电动机吗?</li><li>我要开车……</li></ul></li><li>我们程序设计追求“高内聚，低耦合”。<ul><li>高内聚：类的内部操作细节自己完成，不允许外部干涉；</li><li>低耦合：仅对外暴露少量的方法用于使用。</li></ul></li><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，<font color="red">把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</font></li></ol><h2 id="信息的封装和隐藏"><a href="#信息的封装和隐藏" class="headerlink" title="信息的封装和隐藏"></a>信息的封装和隐藏</h2><ul><li><p>当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值的操作要受属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们需要给属性赋值加入额外的条件。这个条件就不能再属性声明时体现，我们只能通过方法进行限制条件的添加。（比如，示例中的setLegs()方法）同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的（private）。</p><p>–&gt; 此时，针对属性就体现了封装性。</p></li></ul><ol><li><p>封装性的体现：我们讲类的属性xxx私有化（private），同时，提供公共的（public）方法来获取（getXxx）和设置（setXxx）此属性的值。</p></li><li><p>拓展：封装性的体现</p><p>①如上    ②不对外暴露的私有的方法    ③单例模式    …</p></li><li><p>示例</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 封装与隐藏示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    9:04:49</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsAnimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        a.name = <span class="string">&quot;大黄&quot;</span>;</span><br><span class="line">        <span class="comment">//a.age = 1;//age属性私有后无法赋值，通过setAge()方法来赋值</span></span><br><span class="line">        a.setAge(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//a.legs = 4;//The field Animal.legs is not visible（不可见）</span></span><br><span class="line">        a.setLegs(<span class="number">4</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        a.setLegs(<span class="number">6</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        a.setLegs(-<span class="number">2</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> legs;<span class="comment">//私有权限修饰符，使得外界不能直接调用legs这个参数，只能通过规定的方式（setLegs()）来设置legs属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//筛选合理赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLegs</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= <span class="number">0</span> &amp;&amp; l % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            legs = l;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            legs = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//抛出一个异常（暂时没有讲）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//legs被私有化以后用它来获取当前legs属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> legs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物进食&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;，age:&quot;</span> + age + <span class="string">&quot;， legs:&quot;</span> + legs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供属性age的get和set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        age = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808104927.png" align="left"><h2 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h2><ul><li>封装性的体现，需要权限修饰符来配合</li></ul><ol><li><p>Java规定的种权限（从小到大排列）：private、缺省、protected、public</p></li><li><p>Java的权限修饰符public、protected、private置于类的成员定义前，用来限定对象对该类成员的访问权限。</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808095828.png" align="left"></li><li><p>4种权限修饰符可以用来修饰类及类的内部结构：属性、方法、构造器、内部类。</p></li><li><p>具体的，4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类；修饰类只能用default（缺省）、public。</p></li><li><p>代码示例</p><p>同一个包不同的类里面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 权限修饰符使用测试（同包不同类）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    10:58:12</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromissionInsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PermissionIns order = <span class="keyword">new</span> PermissionIns();</span><br><span class="line">        </span><br><span class="line">        System.out.print(order.orderDefault + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(order.orderPublic);</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        System.out.println(order.orderPrivate);//报错：The field PermissionIns.orderPrivate is not visible</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法也类似</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        order.methodDefault();</span><br><span class="line">        order.show();</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        order.methodPrivate;</span></span><br><span class="line">        order.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个Project不同的包里面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.prossiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.encapsulationconcealment.PermissionIns;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 权限修饰符使用测试（不同的包）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    11:43:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromissionClassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PermissionIns order = <span class="keyword">new</span> PermissionIns();</span><br><span class="line">        </span><br><span class="line">        System.out.println(order.orderPublic);</span><br><span class="line">        <span class="comment">//出了PromissionIns类所属的包以后，私有结构、缺省声明的结构都不可以用了</span></span><br><span class="line"><span class="comment">//        System.out.print(order.orderDefault + &quot; &quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(order.orderPrivate);//报错：The field PermissionIns.orderPrivate is not visible</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法也类似</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//出了PromissionIns类所属的包以后，私有结构、缺省声明的结构都不可以用了</span></span><br><span class="line"><span class="comment">//        order.methodDefault();</span></span><br><span class="line">        order.show();</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        order.methodPrivate;</span></span><br><span class="line">        order.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构的在被调用时的可见性大小。</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808122452.png" align="left"></li></ol><h2 id="章节练习-2"><a href="#章节练习-2" class="headerlink" title="章节练习"></a>章节练习</h2><p>创建程序，在其中定义两个类：Person和PersonTest类。定义如下：用setAge()设置人的合法年龄（0~130），用getAge()返回人的年龄。在PersonTest类中实例化Person类的对象b，调用setAge()和getAge()方法，体会Java的封装性。</p><table><thead><tr><th align="left">Person</th></tr></thead><tbody><tr><td align="left">-age:int</td></tr><tr><td align="left">+setAge(i:int)<br>+getAge():int</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 体会Java的封装性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    12:05:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person b = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;设置前年龄为：&quot;</span> + b.getAge());</span><br><span class="line">        b.setAge(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;设置后年龄为：&quot;</span> + b.getAge());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;\n范围限定测试：&quot;</span>);</span><br><span class="line">        b.setAge(-<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">130</span>) &#123;</span><br><span class="line">            age = i;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;传入的数据非法！&quot;);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;传入的数据非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808122355.png" align="left"></li></ul><h1 id="类的成员之三：构造器（或构造方法）"><a href="#类的成员之三：构造器（或构造方法）" class="headerlink" title="类的成员之三：构造器（或构造方法）"></a>类的成员之三：构造器（或构造方法）</h1><h2 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a>构造器的作用</h2><ol><li><p>创建对象</p></li><li><p>初始化对象的信息</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类的结构之三：构造器（或构造方法、constructor）的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    14:52:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建类的对象：new + 构造器</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.eat();</span><br><span class="line">        </span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person()....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808151757.png" align="left"></li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器。</li><li>定义构造器的格式：权限修饰符 类名(形参列表){}。</li><li>一个类中定义多个构造器，彼此构成重载。</li><li>一旦我们显式定义了构造器之后，系统就不再提供默认的空参构造器。</li><li>一个类中，至少会有一个构造器。</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>在前面定义的Person类中添加构造器，利用构造器设置所有人的age属性初始值都为18。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改上题中的类和构造器，增加name属性，使得每次创建Person对象的同时初始化对象的age属性值和name属性值。</p><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>-name:String</td></tr><tr><td>+setName(i:String)<br>+getName():String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 练习题第2题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:27:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建类的对象：new + 构造器</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + p.getName() + <span class="string">&quot;\n年龄：&quot;</span> + p.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808161434.png" align="left"></li><li><p>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形面积。</p><p>在同一个包下，两个类分开创建。</p><ul><li>TriAngle类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:43:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriAngle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriAngle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开发时习惯上提供一个空参</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriAngle</span><span class="params">(<span class="keyword">double</span> b,<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TriAngleTest类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 另一个类中使用这些公共方法，计算三角形面积。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:54:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriAngleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一：调用空参的构造器&quot;</span>);</span><br><span class="line">        TriAngle t1 = <span class="keyword">new</span> TriAngle();</span><br><span class="line">        t1.setBase(<span class="number">2.0</span>);</span><br><span class="line">        t1.setHeight(<span class="number">2.4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长为&quot;</span> + t1.getBase() + <span class="string">&quot;，高为&quot;</span> + t1.getHeight() + <span class="string">&quot;，所以面积为&quot;</span> + (t1.getBase() * t1.getHeight() / <span class="number">2</span>) + <span class="string">&quot;。\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;方式二：调用带参的构造器&quot;</span>);</span><br><span class="line">        TriAngle t2 = <span class="keyword">new</span> TriAngle(<span class="number">2.0</span>,<span class="number">2.4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长为&quot;</span> + t2.getBase() + <span class="string">&quot;，高为&quot;</span> + t2.getHeight() + <span class="string">&quot;，所以面积为&quot;</span> + (t2.getBase() * t2.getHeight() / <span class="number">2</span>) + <span class="string">&quot;。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808161543.png" align="left"></li><li><p>定义Student类，有4个属性：String name、int age、String school、String major。定义Student类的3个构造器：</p><p>①第一个构造器Student(String n,int a)设置类的name和age属性；</p><p>②第二个构造器Student(String n,int a, String s)设置类的name，age和school属性；</p><p>③第三个构造器Student(String n,int a,String s,String m)设置类的name，age，school和major属性。</p><p>在main方法中分别调用不同的构造器创建对象，并输出器属性值。</p></li></ol><h2 id="总结：属性赋值的先后顺序"><a href="#总结：属性赋值的先后顺序" class="headerlink" title="总结：属性赋值的先后顺序"></a>总结：属性赋值的先后顺序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     总结：属性赋值的先后顺序</span></span><br><span class="line"><span class="comment"> *     ①默认初始化</span></span><br><span class="line"><span class="comment"> *     ②显式初始化</span></span><br><span class="line"><span class="comment"> *     ③构造器中初始化</span></span><br><span class="line"><span class="comment"> *     ④通过&quot;对象.方法&quot;的方式赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     以上操作的先后顺序：① -&gt; ② -&gt; ③ -&gt; ④</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(u.age);</span><br><span class="line">        </span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">2</span>);<span class="comment">//构造器赋值</span></span><br><span class="line">        u1.age = <span class="number">18</span>;</span><br><span class="line">        System.out.println(u1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">1</span>;<span class="comment">//显式赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h3 id="扩展知识一：JavaBean"><a href="#扩展知识一：JavaBean" class="headerlink" title="扩展知识一：JavaBean"></a>扩展知识一：JavaBean</h3><ol><li>JavaBean是一种Java语言写成的可重用组件。</li><li>所谓JavaBean，是指符合如下标准的Java类：<ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul></li><li>用户可以使用JavaBean将功能、处理。值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</li></ol><h3 id="扩展知识二：UML类图"><a href="#扩展知识二：UML类图" class="headerlink" title="扩展知识二：UML类图"></a>扩展知识二：UML类图</h3><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808165643.png" align="left"><ol><li><p>+表示public类型，-表示private类型，#表示protected类型。</p></li><li><p>方法的写法：</p><p>方法的类型（+、-） 方法名(参数名:参数类型):返回值类型</p></li></ol><h1 id="关键字：this"><a href="#关键字：this" class="headerlink" title="关键字：this"></a>关键字：this</h1><h1 id="关键字：package、import"><a href="#关键字：package、import" class="headerlink" title="关键字：package、import"></a>关键字：package、import</h1>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章数组</title>
      <link href="/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/"/>
      <url>/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="包名命名规范"><a href="#包名命名规范" class="headerlink" title="包名命名规范"></a>包名命名规范</h1><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802213450.png" alt="01PackageNameingNotations"></p><ul><li>前面为域名倒着写，最后（contact）则体现不同的功能</li></ul><h1 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h1><ul><li>数组（Array），是多个相同数据类型按一定顺序排列的集合，并使用一个名字命名，通过编号的方式对这些数据进行统一管理。</li></ul><h2 id="数组的常见概念"><a href="#数组的常见概念" class="headerlink" title="数组的常见概念"></a>数组的常见概念</h2><ol><li>数组名</li><li>标（或索引）</li><li>元素</li><li>数组的长度：元素的个数</li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>数组是有序排列的；</li><li>数组属于引用数据类型，但是数组的元素既可以是基本数据类型，也可以是引用数据类型；</li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址；</li><li>数组的长度一旦确定，就不能修改；</li><li>可以通过下标（或索引）的方式调用指定位置的元素，速度很快。</li></ol><h2 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h2><ol><li>按照维数：一维数组、二维数组……</li><li>按照数组元素类型分类：基本数据类型元素的素组、引用数据类型元素的数组。</li></ol><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li><p>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多</p></li><li><p>数据的存储结构：</p><ul><li>线性表：顺序表（比如：数组）、链表、栈、队列</li></ul><ul><li>树形结构：二叉树</li><li>图形结构：</li></ul></li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>排序算法</li><li>搜（检索）索算法</li></ol><h1 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h1><h2 id="一维数组的声明和初始化"><a href="#一维数组的声明和初始化" class="headerlink" title="一维数组的声明和初始化"></a>一维数组的声明和初始化</h2><ol><li><p>声明：<code>int[] ins;</code></p></li><li><p>静态初始化：数组的初始化和数组的赋值操作同时进行。</p><ul><li><code>int ids = new int[]&#123;1001,1002,1003,1004&#125;;</code></li></ul></li><li><p>动态初始化：数组的初始化和数组的赋值操作分开进行</p><ul><li><code>String[] names = new String[5];</code></li></ul></li><li><p>错误写法</p><ul><li>`int[] arr1 = new int[];``</li><li>``int[5] arr2 = new int[5];`</li><li>int [] arr3 = new int[3]{1,2,3};`</li></ul></li><li><p>总结：数组一旦初始化完成，其长度就确定了。</p></li></ol><h3 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><ol><li><p>如何调用数组指定函数指定位置的函数</p><ul><li>通过索引（角标）的方式调用，索引（角标）从0开始，直到数组的长度-1结束</li></ul></li><li><p>如何获取数组的长度</p><ul><li>属性：length</li><li>使用：<code>names.length</code></li></ul></li><li><p>遍历数组</p><ul><li><code>for(int i = 0; i &lt; names.length; i++)&#123;&#125;</code></li></ul></li></ol><h3 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h3><ol><li>数组元素是整形：0</li><li>数组元素浮点型：0.0</li><li>数组元素是char型：0（NUT）或’\u0000’（ASCII码为0的值）</li><li>数组元素是boolean型：false</li><li>数组元素是引用数据类型：null</li></ol><h3 id="数组的内存解析"><a href="#数组的内存解析" class="headerlink" title="数组的内存解析"></a>数组的内存解析</h3><ol><li>栈（stack）：存放局部变量</li><li>堆（heap)：存放new出来的结构（对象数组）</li><li>方法区</li></ol><ul><li>常量池</li><li>静态域</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802215212.png" alt="02ArrayMemoryParse"></p><ul><li>栈中的所有地址为Java虚拟机计算出来的哈希地址，并非真正的内存地址</li></ul><h1 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h1><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li>理解：对于二维数组的理解，可以看成是一维数组array1的元素而存在。<font color="red">从数组底层的运行机制来看，其实没有多维数组。</font></li><li>二维数组的使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;;<span class="comment">//静态初始化</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> String[<span class="number">3</span>][];<span class="comment">//动态初始化2</span></span><br></pre></td></tr></table></figure><ul><li>错误情况</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] arr4 = <span class="keyword">new</span> String[][<span class="number">4</span>];</span><br><span class="line">String[<span class="number">4</span>][<span class="number">3</span>] arr5 = <span class="keyword">new</span> String[][];</span><br><span class="line"><span class="keyword">int</span>[][] arr6 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li>Tips：中括号（[]）的位置可以放在类名或者变量名后面；或者类名后面放一个，变量名后面放一个（二维数组）。</li><li>类型推断：<code>int[][] arr7 = &#123;&#123;1, 2, 3&#125;, &#123;4, 5&#125;, &#123;6, 7, 8&#125;&#125;;//省略new int[][]</code></li></ul><h3 id="数组的基本操作-1"><a href="#数组的基本操作-1" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><ol><li><p>如何调用数组指定位置的函数</p><ul><li><code>arry[i][j]; //第i行第j列的元素</code></li></ul></li><li><p>如何获取数组长度</p><ul><li><code>arr4.length;</code></li><li><code>arr4[0].length;</code></li></ul></li><li><p>如何遍历数组</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; a &lt;= arr4.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= arr4[i].length)&#123;</span><br><span class="line">        <span class="comment">//执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素的默认初始化值-1"><a href="#数组元素的默认初始化值-1" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h3><ol><li><p>规定：二维数组分为外层数组的元素和内层数组的元素</p><p><code>int[][] arr = new int[4][3];</code></p></li></ol><ul><li><p>外层元素：arr[0]，arr[1]等；</p></li><li><p>内层元素：arr[0][0]，arr[1][2]等；</p></li><li><p>初始化方式一：<code>int[][] arr = new int[4][3];</code></p><ul><li>外层元素的初始化值为：地址值</li><li>外侧元素的初始化值：与一维数组初始化情况相同</li></ul></li><li><p>初始化方式二：<code>int[][] arr = new int[4][];</code></p><ul><li>外层元素的初始化值为：null</li><li>内层元素的初始化值为：不能调用，否则报错</li></ul></li></ul><h3 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h3><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802223836.png" alt="02ArrayMemoryParse02"></p><h1 id="数组中涉及到的常见算法"><a href="#数组中涉及到的常见算法" class="headerlink" title="数组中涉及到的常见算法"></a>数组中涉及到的常见算法</h1><ol><li><p>数组元素的赋值（杨辉三角、回形书等）（<font color="red">面试常考</font>）</p></li><li><p>求数值型数组中元素的最大值、最小值、平均数、总数等</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 求数值型数组中元素的最大值、最小值、平均数、总和等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-27        22:14:07</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> avg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            array[i] = (<span class="keyword">int</span>)(Math.random() * (<span class="number">99</span> - <span class="number">10</span> + <span class="number">1</span>) + <span class="number">10</span>);</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; maxValue) &#123;</span><br><span class="line">                maxValue = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            sum += array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        minValue = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; minValue) &#123;</span><br><span class="line">                minValue = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        avg = sum / array.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n最大值为：&quot;</span> + maxValue);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为：&quot;</span> + minValue);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数为：&quot;</span> + avg);</span><br><span class="line">        System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组的复制、反转、查找（线性查找、<font color="red">二分法查找</font>）（面试会考）</p><ul><li><p>复制：通过遍历元素的方式进行复制操作，赋值只能使得新数组值相同一块内存区域，修改其中一个，原数组就得一起改变，相当于Linux中的硬链接</p></li><li><p>反转：通过中间变量实现反转</p></li><li><p>查找</p><ul><li>线性查找</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String dest = <span class="string">&quot;BB&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFind = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dest.equals(arr[i]))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到了指定元素，位置为：&quot;</span> + i);</span><br><span class="line">        isFind = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFind == <span class="keyword">false</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没找到！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二分法查找</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有要查找的数组必须有序</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dest1 = -<span class="number">34</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr2.length - <span class="number">1</span>;<span class="comment">//初始末索引</span></span><br><span class="line"><span class="keyword">boolean</span> isFind = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (head + end)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(dest1 == arr2[mid])&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到了指定的元素，位置为：&quot;</span> + mid);</span><br><span class="line">        isFind = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr2[mid] &gt; dest1)&#123;</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFind == <span class="keyword">false</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;很遗憾，没有找到！&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组元素的排序算法（<font color="red">面试最常考</font>）</p><ul><li><p>排序：假设含有n个记录的序列为(R1, R2,…, Rn)，其相应的关键字序列为(K1, K2,…, Kn)。将这些记录重新排序为(Ri1, Ri2,…, Rin)，使得相应的关键字满足条件Ki1 &lt;= Ki2 &lt;=…&lt;= Kin，这样的一种操作成为排序。</p><ul><li>通常来说，排序的目的是快速查找。</li></ul></li><li><p>衡量排序算法的优劣</p><ul><li>时间复杂度：分析关键字的比较次数和记录的移动次数。</li><li>空间复杂度：分析排序算法中徐需要多少辅助内存。</li><li>稳定性：若两个记录A和B的关键字值相等，但排序后A、B先后次序保持不变，则称这种排序算法是稳定的。</li></ul></li></ul></li></ol><h2 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h2><ol><li>内部排序：整个排序过程不需要借助外部存储器（如磁盘等），所有排序操作都在内存中完成。</li></ol><ul><li><p>十大内部排序算法（和具体语言无关），前八种较常用。</p><ul><li><p>选择排序：</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113546.gif"></p><p>①直接选择排序；</p><p>②堆排序。</p></li><li><p>交换排序</p><p>③冒泡排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113636.gif"></p></li><li><p>介绍：冒泡排序的原理很简单，它重复地走访要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</p><ul><li>排序思想：比较相邻的元素，如果第一个比第二个大（升序），就交换它们两个；对每一对相邻元素做同样的工作，从开始的第一对到结尾的最后一对，这步做完后，最后元素回事最大的数；针对所有的元素重复上述步骤，除了最后一个；持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 数组冒泡排序的实现</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@data</span> 2020-7-28        14:24:38</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">43</span>,<span class="number">32</span>,<span class="number">76</span>,-<span class="number">98</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">33</span>,-<span class="number">21</span>,<span class="number">32</span>,<span class="number">99</span>&#125;;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i;j++) &#123;</span><br><span class="line">                  <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                      <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                      arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                      arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">              System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④快速排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113719.gif"></p><ul><li>介绍：快速排序通常明显比同为O（nlogn）的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中经常看到快排的影子。快速排列（Quick Sort）有图灵奖获得者Tony Hoare发明，被列为20世纪十大算法之一，是迄今为止所有内排序算中速度最快的一种。快速排序的时间复杂度为O（nlog(n)）。</li><li>排序思想：从数列种挑出一个元素，称为“基准”（pivot）；重新排序数列，所有元素比基准值小的放在基准值前面，比基准值大的放在基准值后面（相同的数可以到任一边）。在这个分区结束后，该基准就处于数列的中间位置。这个称为分区（partition）操作；递归地（recursive）把小于基准值的子数列和大于基准值的子数列排序；递归的最底部情形是数列的大小事0或1，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为每次迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802230020.png" alt="03QuickSort"></p><ul><li><p>插入排序</p><p>⑤直接插入排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113843.gif"></p><p>⑥折半插入排序</p><p>⑦Shell排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113918.gif"></p></li><li><p>⑧归并排序</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114013.gif"></p><ul><li>⑨桶式排序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114039.png"></p><ul><li>⑩基数排序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114107.gif"></p></li></ul><ol start="2"><li>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助外部存储器（如磁盘等）。外部排序最常见的是多路归并排序。可以认为外部排序是由多个内部排序组成。</li></ol><h2 id="各种排序算法的比较"><a href="#各种排序算法的比较" class="headerlink" title="各种排序算法的比较"></a>各种排序算法的比较</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802230754.png" alt="04SortComparsion"></p><ol><li>从平均时间而言：快速排序最佳，但在最坏的情况下，时间性能不如堆排序和归并排序。</li><li>从算法简单性看：由于直接选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。</li><li>从稳定性看：直接插入排序、冒泡排序和归并排序是稳定的；而直接选择排序、快速排序、Shell排序和堆排序是不稳定排序。</li><li>从待排序的记录数n的大小看：n较小时，宜采用简单排序；而n较大时，宜采用改进排序。</li></ol><h2 id="排序算法的选择"><a href="#排序算法的选择" class="headerlink" title="排序算法的选择"></a>排序算法的选择</h2><ol><li><p>若n较小（如n≤50），可采用直接插入或直接选择排序。</p></li><li><ul><li>当记录规模较小时，直接插入排序较好，否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。</li></ul></li><li><p>若文件初始状态基本有序（正序），则应选用直接插入、冒泡或随机的快速排序为宜。</p></li><li><p>若n较大，则应采用时间复杂度为O（nlgn）的排序方法：快速排序、堆排序或归并排序。</p></li></ol><h2 id="算法五大特征"><a href="#算法五大特征" class="headerlink" title="算法五大特征"></a>算法五大特征</h2><table><thead><tr><th align="center">输入(Input)</th><th align="left">有0个或多个输入数据，这些输入必须有清楚的描述和定义</th></tr></thead><tbody><tr><td align="center">输出(Output)</td><td align="left">至少有1个或多个输出结果，不可以没有输出结果</td></tr><tr><td align="center">有穷性(有限性，Finiteness)</td><td align="left">算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成</td></tr><tr><td align="center">确定性(明确性，Definiteness)</td><td align="left">算法中的每一步都有明确的含义，不会出现二义性</td></tr><tr><td align="center">可行性(有效性，Effectiveness)</td><td align="left">算法每一步都是清楚且可行的，能让用户用纸和笔计算出答案</td></tr></tbody></table><ul><li>说明：满足确定性的算法也成为了确定性算法。现在人们也关注更广泛的概念，例如考虑各种非确定性的算法，如并行算法、概率算法等。另外，人们也关注并不要求终止的计算描述，这种描述有时被称为过程（procedure）。</li></ul><h1 id="Arrays工具类的使用"><a href="#Arrays工具类的使用" class="headerlink" title="Arrays工具类的使用"></a>Arrays工具类的使用</h1><ol><li>java.util.Arrays类即为操作数组的工具类，它包含了用来操作数组（比如排序和搜索）的各种方法。</li></ol><table><thead><tr><th align="center">1</th><th>boolean equals(int[] a,int[] b)</th><th>判断两个数组是否相等</th></tr></thead><tbody><tr><td align="center">2</td><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td align="center">3</td><td>String toString(int[] a)</td><td>将指定值填充到数组之中</td></tr><tr><td align="center">4</td><td>void fill(int[] a,int val)</td><td>对数组进行排序</td></tr><tr><td align="center">5</td><td>int binarySearch(int[] a,int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> java.util.Arrays：操作数组的共工具类，里面定义了很多操作数组的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-28        16:56:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.boolean equals(int[] a,int[] b):判断两个数组是否相等</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 =  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 =  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">        System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.String toString(int[] a):输出数组信息</span></span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.void fill(int[] a,int val):将指定的值填充到数组中</span></span><br><span class="line">        Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.void sort(int[] a):对数组进行排序</span></span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.int binarySearch(int[] a,int key):对排序后的数组进行二分法检索指定的值</span></span><br><span class="line">        <span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(arr3, <span class="number">333</span>);</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232505.png" alt="05RunResult01"></p><h1 id="数组中常见的一异常"><a href="#数组中常见的一异常" class="headerlink" title="数组中常见的一异常"></a>数组中常见的一异常</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 说明数组中的常见异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-28        17:27:15</span></span><br><span class="line"><span class="comment"> *1.数组角标越界的异常:ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *2.空指针异常:NullPointerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组角标越界的异常</span></span><br><span class="line"><span class="comment">//                int[] arr = new int[] &#123;1,2,3,4,5&#125;;</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt;= arr.length;i++) &#123;</span></span><br><span class="line"><span class="comment">//                        System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr[-2]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//空指针异常</span></span><br><span class="line">        <span class="comment">//情况一:</span></span><br><span class="line"><span class="comment">//                int[] arr1 = new int[] &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">//                arr1 = null;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr1[0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况二:</span></span><br><span class="line"><span class="comment">//                int[][] arr2 = new int[4][];</span></span><br><span class="line"><span class="comment">//                System.out.println(arr2[0][0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况三:</span></span><br><span class="line"><span class="comment">//                String[] arr3 = new String[] &#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;;</span></span><br><span class="line"><span class="comment">//                arr3[0] = null;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr3[0].toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>数组角标越界异常：ArrayIndexOutOfBoundsException</p><ul><li>情况一</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= arr.length;i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232903.png" alt="06IndexRunResult1"></p><ul><li>情况二</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr[-<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232959.png" alt="06IndexRunResult2"></p><ol start="2"><li>空指针异常</li></ol><ul><li>情况一</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1 = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233131.png" alt="07NullRunResult1"></p><ul><li>情况二</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233215.png" alt="07NullRunResult2"></p><ul><li>情况三</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr3 = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233304.png" alt="07NullRunResult3"></p><h1 id="章节练习题"><a href="#章节练习题" class="headerlink" title="章节练习题"></a>章节练习题</h1><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><ol><li><p>Java能动态分配数组吗？</p><p>答：可以。<code>int i = 12; int[] myInt = new int[i];</code></p></li><li><p>我怎么知道数组的长度？</p><p>答：<code>.length</code>属性获取。</p></li><li><p>数组有没有length()这个方法? String有没有length()这个方法？</p><p>答：数组没有length()这个方法，只有length的属性；String有length()这个方法。</p></li><li><p>Java中的任何数据类型都可以使用System.out.pritln方法显示。</p><ul><li>对于基本数据类型而言，输出的往往是变量的值；</li><li>对于像数组这一类复杂的数据类型，输出的是其堆空间中存储位置的hashCode值。</li></ul></li><li><p>操作二维数组的注意点。</p><ul><li>操作二位数组不应使用常数来控制维数，具体方法是array.length表示行数，array[row].length老表示row行的列数。这样当数组行数和列数不相等时，代码可以自动调整为正确的值。</li></ul></li></ol><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><ol><li><p>显示输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] stringArray = <span class="keyword">new</span> String[<span class="number">3</span>]; <span class="comment">// 各元素的值默认为null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringArray.length; i++) &#123; <span class="comment">// 对各元素进行初始化，但没有赋值。</span></span><br><span class="line">    stringArray[i] = <span class="keyword">new</span> String();</span><br><span class="line">    System.out.println(stringArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：空（有别于null）。</p></li><li><p>面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。</p></li><li><p>回形数格式方阵的实现：从键盘输入1个整数（1~20），以该数字为矩阵的大小，把1，2，3，…… n*n的数字按照顺时针螺旋的形式填入其中。例如输入数字2，则程序2输出：</p><p>1  2</p><p>4  3</p><p>输入数字3，则程序输出：</p><p>1   2   3</p><p>8   9   4</p><p>7   6   5</p><p>输入数字4， 则程序输出： </p><p>1  2  3  4 </p><p>12 13 14 5 </p><p>11 16 15 6 </p><p>10  9   8  7</p></li><li><p>下面数组定义正确的有：</p><p>A.String strs[] = { ‘a’ ‘b’ ‘c’}; </p><p>B.String[] strs = {“a”, “b”, “c”};</p><p>C.String[] strs = new String{“a” ”b” ”c”};</p><p>D.String strs[] = new String[]{“a”, “b”, “c”};</p><p>E.String[] strs = new String[3]{“a”, “b”, “c”};</p><p>答案：B、D。</p></li><li><p>写出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String foo=<span class="string">&quot;blue&quot;</span>; </span><br><span class="line">        <span class="keyword">boolean</span>[] bar=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>]; </span><br><span class="line">        <span class="keyword">if</span>(bar[<span class="number">0</span>])&#123;</span><br><span class="line">                    foo=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(foo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：输出：blue</p></li><li><p>下面哪个数组定义是错误的？对错误的答案加上单行注释，写出错误原因。</p><p>A、float[]=new float[3]; //</p><p>B、 float f2[]=new float[];//</p><p>C、 float[] f1=new float[3];//</p><p>D、boolean[] b={“true”,”false”,”true”};//</p><p>E、 double f4[]={1,3,5}; //</p><p>F、int f5[]=new int[3]{2,3,4}; //</p><p>G、float f4[]={1.2F,3.0,5.4};//</p></li><li><p>Arrays工具类的使用。</p><p>练习：</p><p>①从键盘输入本组学员的成绩，放到数组中；</p><p>②用for循环显示所有学员的成绩；</p><p>③排序：从低到高；</p><p>④查找是否有正好60分的，如果有，返回位置；</p><p>⑤复制成绩最低三名构成新数组；</p><p>⑥用工具类打印成绩最低三名成绩。</p></li><li><p>数组赋值练习2</p><p>创建一个char类型的36个元素的数组，前26个元素放置’A’-‘Z’，后10个元素放置’1’-‘9’。使用for循环访问所有元素并打印出来。</p><ul><li>提示：char类型数据运算，’A’+1 –&gt; ‘B’，’0’+1 –&gt; ‘1’</li></ul></li><li><p>一维数组a[]，用Java代码将数组元素顺序颠倒。</p></li><li><p>任意输入一个人输入年龄就可以判断出他是哪个年龄段的人。</p><table><thead><tr><th align="center">年龄</th><th align="center">0-9</th><th align="center">10-19</th><th align="center">20-29</th><th align="center">30-39</th><th align="center">40-49</th><th>50-59</th><th align="center">60-69</th><th align="center">70-79</th><th align="center">80-89</th><th align="center">90-99</th></tr></thead><tbody><tr><td align="center">年龄段</td><td align="center">儿童</td><td align="center">少年</td><td align="center">青少年</td><td align="center">青年</td><td align="center">壮年</td><td>中年</td><td align="center">中老年</td><td align="center">老年</td><td align="center">老老年</td><td align="center">老老老年</td></tr></tbody></table></li><li><p>用数组求出斐波那契数列的前20项值。</p></li><li><p>对10个整数进行从小到大的顺序排序。</p></li><li><p>求一个3*3对角线元素之和。</p><p><strong>提示：</strong>首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。</p></li><li><p>利用随机数生成一个整数数组，数组中有10个元素，每个元素的值都在1-30之间，且要求各个数值不能相同。打印该数组。</p></li><li><p>将一个素组逆序输出。</p><p><strong>提示：</strong>用第一个与最后一个交换。</p></li><li><p>输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。 </p></li><li><p>有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</p></li><li><p>定义一个4行4列的二维数组，逐个从键盘输入值，然后将第1行和第4行的数据进行交换，将第2行和第3行的数据进行交换。</p></li><li><p>定义一个3行4列的二维数组，逐个从键盘输入值，编写程序将四周的数据清0。</p></li><li><p>定义一个3行4列的二维数组，逐个从键盘输入值，将左下三角的值清0。</p></li><li><p>定义一个4行4列的二维数组，逐个从键盘输入值，将对角线的值清0。</p></li><li><p>定义一个N*N二维数组，从键盘上输入值，找出每行中最大值组成一个一维数组并输出。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章基本语法</title>
      <link href="/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h1><h2 id="关键字（keyword）"><a href="#关键字（keyword）" class="headerlink" title="关键字（keyword）"></a>关键字（keyword）</h2><ol><li>定义：被Java语言赋予特殊含义，用作专门用途的字符（单词）。</li><li>特点：关键字中所有字母都为小写。</li><li>官方地址：<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts.html</a></li></ol><h2 id="保留字（reserved-word）"><a href="#保留字（reserved-word）" class="headerlink" title="保留字（reserved word）"></a>保留字（reserved word）</h2><ol><li><p>Java保留字：现有的Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字。</p><ul><li>例：goto、const……</li></ul></li></ol><h1 id="标识符（Identifier）"><a href="#标识符（Identifier）" class="headerlink" title="标识符（Identifier）"></a>标识符（Identifier）</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>Java对各种变量、方法和类等要素命名时使用的字符序列称为标识符。</li><li>比如：类名、变量名、方法名、接口名、包名……</li><li>技巧：凡是自己可以取名字的地方都叫标识符。</li></ol><h2 id="定义合法标识符规则（必须遵守）"><a href="#定义合法标识符规则（必须遵守）" class="headerlink" title="定义合法标识符规则（必须遵守）"></a>定义合法标识符规则（<font color="red">必须遵守</font>）</h2><ol><li>由26个英文字母大小写，0-9，_或$组成；</li><li>数字不可开头；</li><li>不可以使用关键字和保留字，但可以包含关键字和保留字；</li><li>Java中严格区分大小写，长度无限制；</li><li>标识符不能包含空格。</li></ol><h2 id="Java中名称命名规范（建议遵守）"><a href="#Java中名称命名规范（建议遵守）" class="headerlink" title="Java中名称命名规范（建议遵守）"></a>Java中名称命名规范（<font color="blue">建议遵守</font>）</h2><ol><li><p>包名：多单词组成时所有字母都小写：xxxyyyzzz；</p></li><li><p>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz ；</p></li><li><p>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz；</p></li><li><p>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ；</p></li><li><p>注意</p><ul><li><p>注意1：在取名字时，为提高阅读性，要尽量有意义（见名知意）</p></li><li><p>注意2：Java采用unicode字符集，因此标识符也可以使用汉字声明，但不建议使用</p></li></ul></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><ol><li><p>内存中的一个存储区域；</p></li><li><p>该区域的数据可在同一类型范围内不断变化；</p></li><li><p>变量是程序中最基本的存储单元。包含变量类型（强类型：必须先声明）、变量名和存储的值。</p><ul><li>定义变量的格式：数据类型 变量名 = 变量值<ul><li>例：<code>int myAge = 18;</code></li></ul></li></ul></li></ol><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><ol><li>用于在内存中保存数据。</li></ol><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ol><li>Java中每个变量必须先声明，后使用；</li><li>变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了。“一对{}”即为一个作用域；</li><li>同一个作用域内，不能声明两个同名的变量。</li><li>Java定义的数据类型（按数据类型分）：对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。</li></ol><ul><li><p>基本数据类型（primitive type）</p><p>(1)数值型</p><ul><li><p>整数类型</p><ul><li>byte<ul><li>占用存储空间：1字节 =  8bit位</li><li>表数范围：-128~127（27），最高位为符号位（0正1负），故为7次方</li></ul></li></ul><ul><li><p>short</p><ul><li>占用存储空间：2字节</li><li>表数范围：-215~215-1</li></ul></li><li><p>int</p><ul><li>占用存储空间：4字节</li><li>表数范围：-231~231-1（约21亿）</li></ul></li><li><p>long</p><ul><li>占用存储空间：8字节</li><li>表数范围：-263~263-1</li></ul></li><li><p>注意</p><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证Java程序的可移植性</li><li>Java的整型常量默认为int型，声明long型常量须后加‘l’或‘L’</li><li>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long         </li></ul></li></ul></li></ul><ul><li><p>浮点类型</p><ul><li><p>单精度float</p><ul><li>占用存储空间：4字节</li><li>表数范围：-3.403E38~3.403E38</li></ul></li><li><p>双精度double</p><ul><li>占用存储空间：8字节</li><li>表数范围：-1.798E308~1.798E308</li></ul></li><li><p>注意：与整数类型类似，Java浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</p></li><li><p>浮点型常量有两种表示形式</p><ul><li>十进制数形式：如：5.12、512.0f、.512          (必须有小数点）</li><li>科学计数法形式:如：5.12e2、512E2、100E-2</li></ul></li><li><p>float：单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求</p></li><li><p>double：双精度，精度是float的两倍。通常采用此类型</p></li><li><p>Java的浮点型常量默认为double型，声明float型常量，须后加’f’或’F’</p></li><li><p>float表示的数值范围比long还大，是因为它使用科学计数法来计数，但是精度不够</p></li></ul></li></ul><p>(2)字符型</p><ul><li><p>char</p><ul><li>1字符 = 2字节</li><li>声明或定义char型变量，通常使用一对单引号（’’），内部只能写一个字符</li><li>转义字符（例如：换行符\n、制表符\t、unicode编号等）</li></ul></li><li><p>布尔型</p><ul><li>boolean<ul><li>只能取两个值之一：true、false</li><li>常用于判断、循环结构</li><li>boolean类型数据只允许取值true和false，无null</li><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同</li><li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替：true用1表示，false用0表示</li></ul></li></ul></li></ul></li><li><p>引用数据类型（reference type）</p><ul><li>类（class）</li><li>接口（interface）</li><li>数组（[]）</li></ul></li></ul><h1 id="编码方式（了解内容）"><a href="#编码方式（了解内容）" class="headerlink" title="编码方式（了解内容）"></a>编码方式（了解内容）</h1><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><ol><li><p>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有0和1两种状态，因此8个二进制位就可以组合出256种状态，这被称为一个字节（byte）。一个字节一共可以用来表示 256       种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111</p></li><li><p>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0</p></li><li><p>缺点</p></li></ol><ul><li>不能表示所有字符</li><li>相同的编码表示的字符不一样：比如，130在法语编码中代表了é，在希伯来语编码中却代表(ג)了字母Gimel</li></ul><h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><ol><li><p>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，       就会出现乱码。</p></li><li><p>Unicode：一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一 无二的编码，使用Unicode没有乱码的问题。</p></li><li><p>Unicode的缺点</p></li></ol><ul><li>Unicode只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</li><li>无法区别 Unicode 和ASCII：计算机无法区分三个字节表示一个符号还是分别表示三个符号。另外，我们知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有 二到三个字节是0，这对于存储空间来说是极大的浪费。</li></ul><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><ol><li><p>UTF-8是在互联网上使用最广的一种Unicode的实现方式</p></li><li><p>UTF-8是一种变长的编码方式。它可以使用**<font color="red">1-6个字节</font>**表示一个符号，根据不同的符号而变化字节长度</p></li><li><p>UTF-8的编码规则</p><ul><li><p>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）</p></li><li><p>对于多字节的UTF-8编码，如果编码包含n个字节，那么第一个字节的前n位为1，第一个字节的第n+1位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码</p></li></ul></li><li><p>tips</p></li></ol><ul><li>解除转义例：解除换行符：\\n，直接显示“\n”</li></ul><h1 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则"></a>基本数据类型之间的运算规则</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>这里只讨论7种基本数据类型变量间的运算，不包含boolean类型的。</li></ul><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><ol><li>容量小的类型自动转换为容量大的数据类型。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210501.png"></p><ul><li>byte、char、short三种类型变量做运算时，结果为int类型，即这三个变量之间的运算结果至少要拿一个int型去接收。原因：可能是防止溢出，并且整形常量默认类型为int型，运算时如果直接加减数字的话编译不通过</li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul><li>自动类型提升的逆运算</li></ul><ol><li><p>需要使用强转符</p></li><li><p>强制类型转换可能导致精度损失</p></li></ol><h2 id="字符串类型：String"><a href="#字符串类型：String" class="headerlink" title="字符串类型：String"></a>字符串类型：String</h2><ol><li><p>String属于引用数据类型;</p></li><li><p>声明String类型变量时，使用一对双引号（””），长度不限（不超过内存空间即可）；</p></li><li><p>定义String类型变量时，双引号之间可以没有内容，但是char类型不可以；</p></li><li><p>String可以和8中基本数据类型变量作运算，且运算只能是连接运算（+），运算结果仍是String类型；</p></li><li><p>将String类型转为int型：<code>int num1 = Integer.parseInt(str1)</code>，而不能用强制转换，强制转换只能在上述7种数据类型之间。</p></li></ol><h1 id="进制（了解内容）"><a href="#进制（了解内容）" class="headerlink" title="进制（了解内容）"></a>进制（了解内容）</h1><ul><li>所有数字在计算机底层都以二进制形式存在</li></ul><h2 id="整数的四种表示方式"><a href="#整数的四种表示方式" class="headerlink" title="整数的四种表示方式"></a>整数的四种表示方式</h2><ol><li>二进制(binary)：0,1 ，满2进1，以0b或0B开头；</li><li>十进制(decimal)：0-9 ，满10进1；</li><li>八进制(octal)：0-7 ，满8进1，以数字0开头表示；</li><li>十六进制(hex)：0-9及A-F，满16进1，以0x或0X开头表示。此处的A-F不区分大小写。如：0x21AF + 1 = 0X21B0。</li></ol><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><ol><li><p>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</p></li><li><p>二进制的整数有如下三种形式：</p></li></ol><ul><li><p>原码：直接将一个数值换成二进制数。最高位是符号位。</p></li><li><p>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</p></li><li><p>负数的补码：其反码加1。</p></li><li><p>计算机以二进制补码的形式存所有的整数。</p><ul><li>正数的原码、反码、补码都相同</li><li>负数的补码是其反码+1</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210544.png" alt="02ComputeComplement"></p><h2 id="四种进制之间的转换"><a href="#四种进制之间的转换" class="headerlink" title="四种进制之间的转换"></a>四种进制之间的转换</h2><ul><li>以二进制位媒介来转换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210603.png" alt="进制转换"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>概念：运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210627.png" alt="04ArithmeticOperator"></p><ol><li><p>整形数相除后默认结果为整形</p><ul><li>需要精确结果进行运算前需要先进行类型转换（自动转换或者强制类型转换）</li></ul></li><li><p>取模（余）运算（%）</p><ul><li>结果符号与被除（模）数相同</li></ul></li><li><p>自增（减）</p><ul><li>（前）++：先自增1，后运算</li><li>（后）++：先运算，后自增1</li><li>自减（略）</li><li>注意：自增（减）不会改变变量本身数据类型</li></ul></li></ol><h2 id="赋值运算符（-）"><a href="#赋值运算符（-）" class="headerlink" title="赋值运算符（=）"></a>赋值运算符（=）</h2><ol><li><p>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</p></li><li><p>支持连续赋值</p><ul><li><code>int i1, j1;</code></li><li><code>i1 = j1 = 10;</code></li></ul></li></ol><h2 id="比较（关系）运算符"><a href="#比较（关系）运算符" class="headerlink" title="比较（关系）运算符"></a>比较（关系）运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210647.png" alt="05ComparisionOperator"></p><ol><li><p>比较运算符的运算结果都是boolean型，也就是要么是true，要么false</p></li><li><p>区分“=”和“==”</p></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210705.png" alt="06LogicOperator"></p><ol><li><p>区分逻辑与（&amp;）和短路与（&amp;&amp;）</p><ul><li>相同点：运算结果相同；党符号左边为true时，都会执行符号右边的内容</li><li>不同点：当左边为false时，&amp;&amp;不会执行符号右边的运算（短路）</li><li>开发中优先使用短路与（&amp;&amp;）</li></ul></li><li><p>区分逻辑或（|）和短路或（||）</p><ul><li>相同点：运算结果相同；当符号右边为false时，二者都会执行符号右边的内容</li><li>不同点：当符号左边为true时，|| 不会执行符号右边的运算（短路）</li><li>开发中优先使用短路或（||）</li></ul></li><li><p>逻辑非（!）</p></li><li><p>逻辑异或（^）</p></li></ol><h2 id="位运算符（用得较少）"><a href="#位运算符（用得较少）" class="headerlink" title="位运算符（用得较少）"></a>位运算符（用得较少）</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210726.png" alt="07BitOperator"></p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210745.png" alt="08BitOperatorDetails"></p><ol><li><p>位运算符是直接对整数的二进制进行的运算</p></li><li><p>位运算符操作的都是整形的数据</p></li><li><p>&lt;&lt;：在一定范围内，每向左移n位，相当于*2n</p></li><li><p>&gt;&gt;：在一定范围内，每向右移n位，相当于/2n</p><ul><li><p>面试题：如何最高效的计算2*8？</p><ul><li>2 &lt;&lt; 3 或 8 &lt;&lt; 1</li></ul></li><li><p>注意：无&lt;&lt;&lt;</p></li></ul></li><li><p>&amp;、|、^运算</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210803.png" alt="09AndOrXorOperation"></p><ol start="6"><li><p>~取反运算</p><ul><li><p>包括符号位在内取反</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210825.png" alt="10NotOperation"></p></li></ul></li><li><p>练习：交换两个变量的值</p></li></ol><ul><li><p>方法一：定义临时变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num1 = num1 + num2;</span><br><span class="line">num2 = num1 - num2;</span><br><span class="line">num1 = num1 - num2;</span><br></pre></td></tr></table></figure><ul><li>优点：不用定义临时变量、</li><li>弊端：①相加操作可能超出存储范围； ②有局限性：只能适用于数值类型。</li></ul></li><li><p>方法三：使用位运算符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ol><li><p>格式：<img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210855.png" alt="11TernaryOperation"></p><ul><li>条件表达式的结果为boolean类型</li><li>表达式1和表达式2为<strong>同种类型</strong></li><li>三元运算符可嵌套使用</li></ul></li><li><p>三元运算符与if-else的联系与区别</p><ul><li>三元运算符可简化if-else语句，因此能用三元运算符的地方尽量用三元运算符</li><li>三元运算符要求必须返回一个结果</li><li>if后的代码块可有多个语句</li><li>凡是可以使用三元运算符的地方都可以改写成if-else，反之则不一定行</li></ul></li><li><p>练习：获取3个数中的最大值</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> max1 = (a &gt; b)? a : b;</span><br><span class="line"><span class="keyword">int</span> max2 = (max1 &gt; c)? max1 : c;</span><br></pre></td></tr></table></figure><h2 id="运算符的优先等级"><a href="#运算符的优先等级" class="headerlink" title="运算符的优先等级"></a>运算符的优先等级</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210916.png" alt="12OperatorPrecedence"></p><ol><li><p>运算符有不同优先级，所谓优先级就是表达式 运算中的运算顺序</p></li><li><p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的</p></li></ol><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ul><li>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块</li></ul><h2 id="如何从键盘-控制台获取不同类型的变量：需要使用Scanner类"><a href="#如何从键盘-控制台获取不同类型的变量：需要使用Scanner类" class="headerlink" title="如何从键盘/控制台获取不同类型的变量：需要使用Scanner类"></a>如何从键盘/控制台获取不同类型的变量：需要使用Scanner类</h2><ol><li><p>导包：<code>import java.util.Scanner;</code></p></li><li><p>Scanner的实例化：<code>Scanner scan = new Scanner(System.in);</code></p></li><li><p>调用Scanner的相关方法，来获取指定类型的变量。</p></li><li><p>对于char类型的获取，Scanner没有提供相关的方法，只能获取一个字符串。</p></li><li><p>如果一定要获取char类型，可用charAt(0)获取字符串索引为0位置上的字符。</p></li></ol><ul><li>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配，则出现异常：InputMisMatchException，导致程序中断。容量小的可自动提升；</li></ul><h2 id="如何获取随机数"><a href="#如何获取随机数" class="headerlink" title="如何获取随机数"></a>如何获取随机数</h2><ol><li><code>double value = Math.random()</code>：返回一个[0.0, 1.0)之间的double型的值。</li></ol><ul><li>例：获取[a,b]之间的int型随机数：<code>(int)(Math.random() * (b - a + 1) + a)</code></li></ul><h2 id="流程控制方式结构化程序设计中规定的三种基本流程结构"><a href="#流程控制方式结构化程序设计中规定的三种基本流程结构" class="headerlink" title="流程控制方式结构化程序设计中规定的三种基本流程结构"></a>流程控制方式结构化程序设计中规定的三种基本流程结构</h2><ol><li><p>顺序结构</p><ul><li>程序从上到下逐行执行，中间没有任何判断和跳转</li></ul></li><li><p>分支结构</p><ul><li>根据条件，选择性地执行某段代码</li><li>有if-else和switch-case两种分支语句</li></ul></li><li><p>循环结构</p><ul><li>根据循环条件，重复性地执行某段代码</li><li>有while、do…while、for三种循环语句</li><li>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素</li></ul></li></ol><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="if-else结构"><a href="#if-else结构" class="headerlink" title="if-else结构"></a>if-else结构</h3><ol><li><p>第一种</p><p>if(条件表达式){</p><p>执行表达式</p><p>}</p></li><li><p>第二种：二选一</p><p>if(条件表达式){</p><p>执行表达式1</p><p>}else{</p><p>执行表达式2</p><p>}</p></li><li><p>第三种：多选一</p><p>if(条件表达式1){</p><p>执行表达式1</p><p>}</p><p>if(条件表达式2){</p><p>执行表达式2</p><p>}</p><p>……</p><p>else{</p><p>执行表达式n</p><p>}</p></li><li><p>使用说明</p><ul><li>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量。</li><li>语句块只有一条执行语句时，一对{}可以省略，<strong>但建议保留</strong></li><li>if-else语句结构，根据需要可以嵌套使用（一般不超过3层，超过3层未解决则停下来想其他办法）。</li><li>当if-else结构是“多选一”时，最后的else是可选的，根据需要可以省略。</li><li>当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓。</li><li>当多个条件是“包含”关系时，“小上大下 /子上父下”。</li><li>if (80 &lt; core &lt;= 99)报错原因：前面的(80 &lt; core)的结果为一个boolean类型，boolean类型不能与int类型做大小关系对比。</li></ul></li><li><p>针对于条件表达式：</p><ul><li><p>如果多个表达式之间是”互斥“关系（或没有交集的关系），判断和执行语句的上下顺序不影响。</p></li><li><p>如果多个表达式之间有交集的关系，则需要根据实际情况来决定哪个声明在上面。</p></li><li><p>如果多个表达式之间有包含关系，通常情况下，需要将范围小的声明在范围大的上面，否则范围小的就没机会执行了。</p></li><li><p>就近原则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">2</span>)</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//上述语句相当于：</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">2</span>)</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//以上误判源于省略了单行执行语句的&#123;&#125;，所以尽量不要省略&#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch-case结构"></a>switch-case结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210937.png" alt="13Switch-Case"></p><ol><li>说明：</li></ol><ul><li><p>根据switch表达式中的值，依次匹配各个case中的常量。一旦配成功，则进入相应的case结构中，调用其执行语句，当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p></li><li><p>break，可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。</p></li><li><p>switch结构中的表达式，只能是如下六种数据类型之一：byte、short、char、int、枚举类型（JDK5.0新增）、String类型（JDK7.0新增）。</p></li><li><p>case之后只能声明常量，尤其不能是一个范围。</p></li><li><p>break关键字是可选的。</p></li><li><p>default：相当于if-else中的else，也是可选的，且default位置是可选的，一般还是写在末尾。</p></li><li><p>如果switch-case结构中多个case的执行语句相同，则可以考虑进行合并，即写完多行执行语句相同的case以后只写1行执行语句。</p></li><li><p>凡是可以使用switch-case的结构，都可以转换为if-else。反之，不成立。</p></li><li><p>写分支结构时，如果既可以使用if-else，又可以使用switch-case（switch中表达式的取值情况不太多），优先选择使用switch-case。原因：switch-case执行效率稍高。</p></li><li><p>示例：输入日期，返回日期是那一年的第几天。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDays</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> year = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入月份：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> month = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入日期：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> day = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                days += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                days += <span class="number">28</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            days += day;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n&quot;</span> + year +<span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;号是&quot;</span> + year + <span class="string">&quot;年的第&quot;</span> + days + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;\n输入有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li><p>在某些条件满足得情况下，反复执行特定代码的功能</p></li><li><p>循环语句的四个组成部分</p><p>①初始化部分（init_statement）</p><p>②循环条件部分（test_exp）–&gt;  boolean类型</p><p>③循环体部分（body_statement）</p><p>④迭代部分（alter_statement）</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210958.png" alt="14LoopStructure"></p></li><li><p>通常情况下，循环结束都是因为②中循环条件返回了false</p><ul><li><p>循环语句分类</p><ul><li>for循环</li><li>结构</li></ul></li><li><p>for(① ;  ② ;  ④){</p><p>​        ③</p><p>}</p><p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; …… -&gt; 直到②不再返回true，跳出循环</p></li><li><p>例题：遍历100以内的偶数，输出所有偶数的和，输出所有偶数的个数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErgodicEvenNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                count += <span class="number">1</span>;                        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;0-100内偶数有&quot;</span> + count + <span class="string">&quot;个，它们的和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i在for循环内有效，出了for循环就失效了</span></span><br></pre></td></tr></table></figure></li><li><p>例题：输入两个正整数m和n，求其最大公约数和最小公倍数。比如，12和20的最大公约数是4，最小公倍数是60。</p><ul><li>说明break的作用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetGcdLcm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> min = (m &lt;= n)? m : n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span> + m + <span class="string">&quot;和&quot;</span> + n + <span class="string">&quot;的最大公约数为&quot;</span> + i + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = (m &gt;= n)? m : n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = max; i &lt;= m * n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最小公倍数为&quot;</span> + i + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>while循环</p><ul><li>结构</li></ul><p><code>①初始化部分</code></p><p><code>while(②循环条件部分)&#123;</code></p><p>​    <code>③循环体部分;</code></p><p>​    <code>④迭代部分;</code></p><p><code>&#125;</code></p><p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; …… -&gt;②</p><ul><li>说明<ul><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换</li><li>for循环和while循环初始化条件的作用范围不同。</li><li>i 出了while循环后可以继续使用，原因：①初始化部分在循环外。</li></ul></li></ul></li><li><p>do-while</p><ul><li><p>结构</p><p><code>①</code></p><p><code>do&#123;</code></p><p><code>③；</code></p><p><code>④；</code></p><p><code>&#125;while(②)；</code></p><p>执行过程：① -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② ……     -&gt;②</p></li><li><p>特点</p><ul><li>先执行再判断，至少执行一次循环体。</li><li>开发中较少使用do-while，for和while使用较多。</li></ul></li></ul></li><li><p>循环语句综合题：从键盘输入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时，结束程序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirCom</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> posNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> negNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> alter = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (alter &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                posNum += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (alter &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                negNum += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的正数个数为：&quot;</span> + posNum);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的负数个数为：&quot;</span> + negNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>while(true)就相当于for(;;)</li><li>结束循环的几种方式<ul><li>循环条件部分返回false；</li><li>在循环体中执行break。</li></ul></li></ul></li></ul></li><li><p>嵌套循环</p></li></ol><ul><li><p>嵌套循环的使用</p><ul><li>嵌套循环：将一个循环结构A声明在另一个循环结构B的循环体中，就构成了嵌套循环。</li><li>外层循环：循环结构B。</li><li>内层循环：循环结构A。</li></ul></li><li><p>说明</p><ul><li>内层循环结构遍历一遍，只相当于外层循环结构循环一次。</li><li>假设外层循环需要执行m次，内层循环需要执行n次，此时内存层循环的循环体需要执行m*n次。</li></ul></li><li><p>技巧：外层循环控制行数，内层循环控制列数。</p></li><li><p>例题：九九乘法表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiTable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印几行？（1-9）&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> line = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= line; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;x&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>100以内所有质数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印多少以内的质数？&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> limtNum = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;*********结果*********&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limtNum; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)        &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j ==<span class="number">0</span>)&#123;</span><br><span class="line">                    isPriNum = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPriNum)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印多少以内的质数？&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> limtNum = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;*********结果*********&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();<span class="comment">//获取当前时间距1970-01-01 00:00:00的毫秒数（long型）</span></span><br><span class="line">        <span class="keyword">boolean</span> isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limtNum; i++)&#123;</span><br><span class="line">            <span class="comment">//for (int j = 2; j &lt; i; j++)&#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;<span class="comment">//优化二：一个数如果在2到它本身开方的范围内没有商，则为质数</span></span><br><span class="line">                <span class="keyword">if</span> (i % j ==<span class="number">0</span>)&#123;</span><br><span class="line">                    isPriNum = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//优化一：只对本身非质数的自然数是有效的。加break前后对比：20181ms/2174ms = 9.28</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPriNum)&#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;质数的个数：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;所花费的时间：&quot;</span> + (start - end));</span><br><span class="line">        <span class="comment">//优化前：17916ms 优化一：1629ms 优化二：16ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊关键字的使用"><a href="#特殊关键字的使用" class="headerlink" title="特殊关键字的使用"></a>特殊关键字的使用</h3><ul><li><p>break</p><ul><li>使用范围：switch-case、循环结构中</li><li>循环中使用的作用：结束当前循环</li><li>默认跳出包裹此关键字最近的一层循环</li><li>结束指定标识的一层循环结构</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label:<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>continue</p><ul><li><p>使用范围：循环结构中</p></li><li><p>循环中使用的作用：结束当次循环</p></li><li><p>结束指定标识的一层循环结构的当次循环</p><p><code>countinue label;  </code></p></li></ul></li><li><p>相同点：两个关键字后面不能声明执行语句</p></li><li><p>return</p><ul><li>并非专门用于结束循环的，它的的功能是结束一个方法。当一个方法执行到一个return时，这个方法将被结束。</li><li>与break、continue不同的是吗，return直接结束整个方法，不管这个return处于多少层循环之内。</li></ul></li><li><p>补充：衡量一个功能代码的优劣</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率与低存储：时间复杂度、空间复杂度（衡量算法的好坏）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章Java语言概述</title>
      <link href="/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><p>//单行注释</p></li><li><p>/*多行注释*/</p></li><li><p>/**文档注释（Java特有）*/</p></li></ol><h2 id="单行和多行注释的作用"><a href="#单行和多行注释的作用" class="headerlink" title="单行和多行注释的作用"></a>单行和多行注释的作用</h2><ol><li><p>对所写程序进行解释说明，增强可读性，方便自己和别人。</p></li><li><p>调试所写代码（注释掉不需要运行部分）。</p></li><li><p>特点：单行和多行注释掉的内容不参与编译，编译以后生成的.class文件中不包含注释掉的信息。</p></li></ol><h2 id="文档注释的使用"><a href="#文档注释的使用" class="headerlink" title="文档注释的使用"></a>文档注释的使用</h2><ol><li><p>注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式</p><ul><li>&gt;javadoc -d [生成文件名] -author -version [解析文件名.java]（-author和-version分别为注释当中@author和@version后面的内容）</li></ul></li></ol><ul><li><strong>注意：多行注释不能嵌套使用</strong></li></ul><h2 id="第1个Java代码"><a href="#第1个Java代码" class="headerlink" title="第1个Java代码"></a>第1个Java代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;<span class="comment">//arguments参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="对第一个Java程序总结"><a href="#对第一个Java程序总结" class="headerlink" title="对第一个Java程序总结"></a>对第一个Java程序总结</h3><ol><li><p>java程序的编写-编译-运行的过程</p><ul><li><p>编写：我们将编写的java代码保存在以“.java”结尾的源文件中</p></li><li><p>编译：使用javac.exe来编译我们的java源文件。格式：javac 源文件名.java</p></li><li><p>运行：使用java.exe解释运行我们的字节码文件（.class)。格式：java 类名</p></li></ul></li><li><p>在一个java源文件中可以声明多个类（class），但是只能有一个类声明为public的，而且要求声明为public的类的类名必须与源文件名必须相同。</p></li><li><p>程序的入口是main()方法，格式是固定的。可以写成：public     static void main(String[] args)或public static void main(String[] a)或public     static void main(String a[])</p></li><li><p>输出语句</p><ul><li><p>System.out.println()：输出后换行，无内容则只换行</p></li><li><p>System.out.print()：输出后不换行</p></li></ul></li><li><p>每一个执行语句都以分号结尾，每个执行语句只要以分号隔开即使不换行也不影响执行</p></li><li><p>编译的过程：编译以后，会生成一个或多个字节码文件，字节码文件与java源文件中的类名相同。</p></li></ol><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><ol><li><p>java语言的特点是什么？</p><ul><li>面向对象性：两个基本概念：类、对象；三大特性：封装、继承、多态</li><li>健壮性：吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li><li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write      once , Run Anywhere”</li></ul></li><li><p>System.out.println()和System.out.print()有什么区别？</p><ul><li>前者输出内容后换行，后者输出后不换行。</li></ul></li><li><p>一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？</p><ul><li>答：可以。但最多只有一个类名声明为public，与文件名相同。</li></ul></li><li><p>设置path的目的是什么？</p><ul><li>目的是为了在控制台的任何文件路径下，都可以调用jdk指定目录下的所有指令。</li></ul></li><li><p>JDK,JRE和JVM的关系是什么？以及JDK、JRE包含的主要结构有哪些？</p><ul><li>关系：JDK包含JRE，JRE包含JVM</li><li>JDK = JRE + Java开发工具（javac.exe、java.exe、javadoc.exe）</li><li>JRD = JVM + Java核心类库</li></ul></li><li><p>创建如下类，使得运行可以输出：<img src="/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/01RunOutput" alt="01RunOutput"></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChairMan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：习大大\n&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别：男&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;住址：北京中南海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>编译和运行上述代码的指令</p><ul><li><p>编译：&gt;javac ChairMan.java</p></li><li><p>运行：&gt;java ChairMan</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客指南Guide</title>
      <link href="/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/"/>
      <url>/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol start="0"><li><a href="https://www.triabin.top/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/">博客指南Guide</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/">第1章Java语言概述</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/">第2章基本语法</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/">第3章数组</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">第4章面向对象编程（上）</a></li></ol><h1 id="主体内容"><a href="#主体内容" class="headerlink" title="主体内容"></a>主体内容</h1><ul><li><p>由于目前在自学Java，所以这个博客主要用来放我的Java笔记（后续也许会写一些其他教程），各位如果感兴趣或者想借鉴一下的话直接点网站右边标签里面那个Java就只显示Java的笔记了。如图</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802144156.png" alt="image-20200802144156706"></p><p><strong>（手机端的标签在页面下方）</strong></p><p>我目前使用的Java教程是B站的<a href="https://www.bilibili.com/video/BV1zE41197bw?from=search&seid=18257695344041836043">【尚硅谷】 Java全栈工程师就业班 全套（1100小时完结）</a>，有兴趣的老哥（or小姐姐）可以一起学习啊:happy:，做云同学:smirk:。​然后包括教学视频在内的各种课程配套资料可以去尚硅谷的微信公号回复Java获取，由于B站是别人整理拼接的，有部分教学视频缺失，所以建议保存他们的公众号给的度盘资源，然后对应着去看相应缺失的部分，看完再回B站就好了（为啥对B战这么执着:fun_moon_with_face:？当然是因为没有弹幕坚持不下去:cry:加上度盘没会员，画质太渣）</p></li></ul><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><p>这是对应的学习资料</p><p>链接：<a href="https://pan.baidu.com/s/15ocrWsdcODC8kA1VCkMaXQ">https://pan.baidu.com/s/15ocrWsdcODC8kA1VCkMaXQ</a><br>提取码：57vp </p><p><font color="purple"><strong>注意：如果链接失效了就自己去尚硅谷微信公众号回复关键字获取</strong></font></p></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>博客搭建：<a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://github.com/">GitHub</a> + <a href="https://git-scm.com/">Git</a> + <a href="https://nodejs.org/en/download/">Node.js</a></li><li>图床：<a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://github.com/">GitHub</a></li><li>博客主题：<a href="https://demo.jerryc.me/">butterfly</a></li><li>参考文章：<a href="https://spoience.com/hexo-github-build.html#%E5%89%8D%E8%A8%80">https://spoience.com/hexo-github-build.html#%E5%89%8D%E8%A8%80</a></li><li>评论：LeanCloud + Valine</li></ol><h1 id="网页操作指南"><a href="#网页操作指南" class="headerlink" title="网页操作指南"></a>网页操作指南</h1><ol><li><p>点击右下方的小齿轮可打开设置，即可进行切换阅读模式开关、日/夜间模式切换、网页的放大/缩小等操作，下方箭头为回到顶部。手机端会在齿轮与回到顶部之间多一个目录按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802152208.png" alt="image-20200802152207947"></p></li><li><p>加入评论功能后，在齿轮和回到顶部之间多了一个评论按钮，点击可直接跳转到评论区。如下图：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807200309.png" align="left"></li><li><p>评论功能</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807200459.png" align="left"><p>如图，评论功能使用 邮箱+昵称 的形式来区别用户的，所以这两项必填，分别点击两个地方填入就好了，目前我也不知道怎么改更简单的方法来区分用户，暂时这样了。评论功能用的Valine。</p></li><li><p>公告</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807202235.png" align="left"><p>网页有什么重大更新内容我会在这儿标注！</p></li><li><p>搜索功能</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807202710.png" align="left"><p>加入了本地搜索功能，可以搜索网页上所有文章中的内容。</p></li></ol><blockquote><p>以上按钮、评论、公告、搜索等功能均来自butterfly主题。</p></blockquote><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ul><li>首先感谢酷安<a href="http://www.coolapk.com/u/2292833">@加加加加油呦</a>、<a href="http://www.coolapk.com/u/2292833">@硝酸银</a>、<a href="http://www.coolapk.com/u/796912">@lhspang</a>三位老哥的推荐让我入坑了个人博客，过程确实没少折腾（纯小白，完全从0开始:sob:)，图床搭建，仓库创建，网站主题配置每一步都遇到过不少问题，其中图床搭建和主题配置（修改那个yml文件）最磨人，但是搭建好了以后是真的香，从此以后我也是一个由自己的网站的人了:sunglasses:。</li></ul><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><ul><li>最后附上两张酷安老哥身份标识图：</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802145953.png" align="left"><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802150009.png" align="left"><hr><p><strong><font color="red">后续网页各方面有变动都会在这个网页里面更新，网页我会置顶。</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Preface </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
