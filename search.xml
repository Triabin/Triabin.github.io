<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第8章多线程</title>
      <link href="/2020/10/20/%E7%AC%AC8%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/10/20/%E7%AC%AC8%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念：程序、进程、线程"><a href="#基本概念：程序、进程、线程" class="headerlink" title="基本概念：程序、进程、线程"></a>基本概念：程序、进程、线程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p><font color="blue">程序(program)</font>是为完成特定任务、用某种语言编写的一组指令的集合。即指<font color="red">一段静态的代码</font>，静态对象。</p></li><li><p><font color="blue">进程(process)</font>是程序的一次执行过程，或是<font color="red">正在运行的一个程序</font>。是一个动态的过程：有它自身的产生、存在和消亡过程。——生命周期</p><ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静止的，进程是动态的</li><li><font color="red">进程作为资源分配的单位，</font>系统在运行时会为每个进程分配不同的内存区域。</li></ul></li><li><p><font color="blue">线程(thread)</font>，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><ul><li>若一个进程同一时间<font color="blue">并行</font>执行多个线程，就是支持多线程的</li><li><font color="red">线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</font>，线程切换的开销小。</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间→它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简洁、高效。但多个线程操作共享的系统资源可能就会带来<font color="red">安全的隐患</font>。</li></ul></li></ol><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201021214146.png" align="left"><h2 id="单核CPU和多核CPU的理解"><a href="#单核CPU和多核CPU的理解" class="headerlink" title="单核CPU和多核CPU的理解"></a>单核CPU和多核CPU的理解</h2><ol><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。</li><li>一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ol><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><ol><li>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</li></ol><h2 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h2><p>背景：以单核CPU为例，只是用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成的时间要短，为何仍需要多个线程呢？</p><ol><li>提高应用程序的响应。对图形化页面更有意义，可增强用户体验。</li><li>提高计算机系统CPU的利用率。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li><li>何时需要用到多线程？<ul><li>程序需要同时执行两个或多个任务</li><li>程序要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等</li><li>需要一些后台运行的程序时、</li></ul></li></ol><h1 id="线程调的创建和使用"><a href="#线程调的创建和使用" class="headerlink" title="线程调的创建和使用"></a><font color="red">线程调的创建和使用</font></h1><h2 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h2><ol><li><p>Java语言的JVM允许程序运行多个线程它通过java.lang.Thread类来实现。</p></li><li><p>Thread类的特性：</p><p>① 每个线程都是通过某个特定的Thread对象的run()方法来操作的，经常把run()方法的主体称为线程体。</p><p>② 通过该Thread对象的start()方法来启动这个线程，而非直接调用run()。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  多线程的创建，方式一：继承于Thread类</span></span><br><span class="line"><span class="comment"> *  1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="comment"> *  2. 重写Thread类的run()方法 --&gt; 将此线程执行的操作声明在run()中</span></span><br><span class="line"><span class="comment"> *  3. 通过此对象调用start()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  例子：遍历100以内所有偶数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-10-21-22:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">//    2、重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);<span class="comment">//Thread.currentThread().getName()，获取当前线程名称</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3、创建Thread类的子类对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、通过对象调用start():①启动当前线程  ②调用当前线程的run()方法</span></span><br><span class="line">        t1.start();</span><br><span class="line"><span class="comment">//        t1.run();</span></span><br><span class="line"><span class="comment">//      问题一：不能通过直接调用run()方法的方式启动线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      问题二：再启动一个线程，遍历100以内的偶数</span></span><br><span class="line"><span class="comment">//        t1.start();//不可以让已经start()的线程去执行，会报IllegalThreadStateException</span></span><br><span class="line">        <span class="comment">//需要重新创建一个线程对象</span></span><br><span class="line"><span class="comment">//        MyThread t2 = new MyThread();</span></span><br><span class="line"><span class="comment">//        t2.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下操作仍然是在main线程中执行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201021224119.png" align="left"><ul><li>从运行结果可以看出，两个线程的执行结果交替显示，既两个线程并行执行。</li></ul></li><li><p>练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数。</p><ul><li>方式一：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01.exer1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-10-21-22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread1().start();</span><br><span class="line">        <span class="keyword">new</span> MyThread2().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二：创建匿名子类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01.exer1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-10-21-22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201021230200.png" align="left"></li></ol><h2 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h2><ol><li><p>void start()：启动线程并执行对象的run()方法。</p></li><li><p>run()：线程在被调度时执行的操作。</p></li><li><p>String getName()：返回线程的名称。</p></li><li><p>void setName(String name)：设置该线程名称。</p></li><li><p>static Thread courrentThread()：返回当前线程。在Thread子类中就是this，通常用于主线程和runnable实现类。</p></li><li><p>static void yield()：线程让步</p><p>① 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程。</p><p>② 若队列中没有同优先级的线程，忽略此方法。</p></li><li><p>join()：当某个程序执行流中调用其他线程的join()方法时，调用线程将被阻塞，知道join()方法加入的join线程执行完为止。</p><ul><li>低优先级的线程也可以获得执行</li></ul></li><li><p>static void sleep(long millis)：（指定时间：毫秒）</p><p>① 令当前活动线程在指定时间段内放弃对CPU控制，使其他线程有机会被执行，时间到后重排队。</p><p>② 抛出InterruptedException异常</p></li><li><p>stop()：强制结束线程生命周期，不推荐使用。</p></li><li><p>boolean isAlive()：返回booleean，判断线程是否还活着。</p></li></ol><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a><font color="red">线程的同步</font></h1><h1 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h1><h1 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a>JDK5.0新增线程创建方式</h1>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InteliJ_IDEA配置与使用</title>
      <link href="/2020/10/20/InteliJ-IDEA%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/10/20/InteliJ-IDEA%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h1><ol><li>bin：容器，执行文件和启动参数等。</li><li>help：快捷键文档和其他帮助文档。</li><li>jre64：64位的Java运行环境。</li><li>lib：idea依赖的类库。</li><li>license：各个插件的许可。</li><li>plugin：插件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目三：开发团队调度软件</title>
      <link href="/2020/10/16/%E9%A1%B9%E7%9B%AE%E4%B8%89/"/>
      <url>/2020/10/16/%E9%A1%B9%E7%9B%AE%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li><p>模拟实现一个基于文本界面的《开发团队调度软件》。</p></li><li><p>熟悉Java面向对象的高级特性，进一步掌握编程技巧和调试技巧。</p></li><li><p><font color="red">主要设计以下知识点：</font></p><p><font color="red">① 类的继承和多态性</font></p><p><font color="red">② 对象的值传递、接口</font></p><p><font color="red">③ static和final修饰符</font></p><p><font color="red">④ 特殊类的使用：包装类、抽象类、内部类</font></p><p><font color="red">⑤ 异常处理</font></p></li></ul><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><ul><li><p><strong>该软件运行时实现以下功能：</strong></p><p>①软件启动时，根据给定的数据创建公司部分成员列表（数组）</p><p>②根据菜单提示，基于现有的<u>公司成员</u>，组建一个<u>开发团队</u>以开发一个新的项目</p><p>③组建过程中包括将成员插入到团队中，或从团队中删除某成员，还可以列出团队中现有成员的列表</p><p>④开发团队成员包括架构师、设计师和程序员</p></li><li><p><strong>本软件采用单级菜单方式工作。当软件运行时，主界面显示公司成员的列表，如下：</strong></p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017162125.png" align="left"></li><li><p><strong>当选择“<font color="red">添加团队成员</font>”菜单时，将执行从列表中添加指定（通过ID）成员到<u>开发团队</u>的功能：</strong></p><p><font color="blue">1-团队列表 2-添加团队成员 3-删除团队成员 4-退出  请选择(1-4)：2</font></p></li></ul><p>  <font color="blue">———————添加成员———————</font></p><p>  <font color="blue">请输入要添加的员工ID：2</font></p><p>  <font color="blue">添加成功</font></p><p>  <font color="blue">按回车键继续…</font></p><p>  添加成功后，按回车键将重新显示主界面。</p><ul><li><p><strong><font color="blue">开发团队人员组成要求：</font></strong></p><p><font color="blue">–最多一名架构师</font></p><p><font color="blue">–最多两名设计师</font></p><p><font color="blue">–最多三名程序员</font></p></li><li><p><strong>如果添加操作因为某种原因失败，将显示类似以下信息（失败原因视具体原因而不同）：</strong></p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017001019.png" align="left"><p><strong><font color="red">失败信心包含以下几种：</font></strong></p><p><font color="red">①成员已满，无法添加</font></p><p><font color="red">②该成员不是开发人员，无法添加</font></p><p><font color="red">③该员工已在本开发团队中</font></p><p><font color="red">④该员工已是某团队成员</font></p><p><font color="red">⑤该员工正在休假，无法添加</font></p><p><font color="red">⑥团队中至多只能有一名架构师</font></p><p><font color="red">⑦团队中至多只能有两名设计师</font></p><p><font color="red">⑧团队中至多只能有三名程序员</font></p></li><li><p><strong>当选择“<font color="red">删除团队成员</font>”菜单时，将执行从<u>开发团队</u>中删除指定（通过TeamID）成员的功能：</strong></p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017001819.png" align="left"><p>删除成功后，按回车键将重新显示主界面。</p></li><li><p><strong>当选择“<font color="red">团队列表</font>”菜单时，将列出开发团队中的现有成员，例如：</strong></p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017002034.png" align="left"></li></ul><h1 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h1><ul><li><p>该软件由以下三个模块组成：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017002216.png" align="left"><p>①com.atguigu.team.view模块为主控模块，负责菜单的显示和处理用户操作。</p><p>②com.atguigu.team.service模块为实体对象（Employee及其子类如程序员等）的管理模块， NameListService和TeamService类分别用各自的数组来管理公司员工和开发团队成员对象。</p><p>③domain模块为Employee及其子类等JavaBean类所在的包。</p></li><li><p>com.atguigu.team.domain模块中包含了所有实体类：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201017002540.png" align="left"><p>其中程序员(Programmer)及其子类，均会领用某种电子设备(Equipment)。</p></li></ul><h2 id="第1步-创建项目基本组件"><a href="#第1步-创建项目基本组件" class="headerlink" title="第1步 创建项目基本组件"></a>第1步 创建项目基本组件</h2><ul><li><p>完成以下工作：</p><ol><li>创建TeamSchedule项目</li><li>按照设计要求创建所有包</li><li>将项目提供的几个类复制到相应的包中<font color="blue">（view包中：TSUtility.java；service包中：Data.java）</font></li></ol></li><li><p>按照设计要求，在com.atguigu.team.domain包中，创建Equipment接 </p><p>  口及其各实现子类代码。</p></li><li><p>按照设计要求，在com.atguigu.team.domain包中，创建Employee类</p><p>  及其各子类代码。</p></li><li><p>检验代码的正确性。</p></li><li><p>项目view包中提供了TSUtility.java类，可用来方便地实现键盘访问。</p></li><li><p>该类提供了以下静态方法：</p><ol><li><p>public static char readMenuSelection() </p><p><strong>用途：</strong>该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</p></li><li><p>public static void readReturn() </p><p><strong>用途：</strong>该方法提示并等待，直到用户按回车键后返回。</p></li><li><p>public static int readInt() </p><p><strong>用途：</strong>该方法从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</p></li><li><p>public static char readConfirmSelection() </p><p><strong>用途：</strong>从键盘读取‘Y’或’N’，并将其作为方法的返回值。</p></li></ol></li></ul><h3 id="Equipment接口及其实现子类的设计"><a href="#Equipment接口及其实现子类的设计" class="headerlink" title="Equipment接口及其实现子类的设计"></a>Equipment接口及其实现子类的设计</h3><table><thead><tr><th>&lt;&lt;interface&gt;&gt;<br>Equipment</th></tr></thead><tbody><tr><td></td></tr><tr><td>+getDescription():String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Equipment</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>PC</th></tr></thead><tbody><tr><td>-model:String<br>-display:String</td></tr><tr><td>+ PC(model: String, display: String)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PC</span> <span class="keyword">implements</span> <span class="title">Equipment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;<span class="comment">// 机器型号</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">// 显示器名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PC</span><span class="params">(String model, String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModel</span><span class="params">(String model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> model + <span class="string">&quot;(&quot;</span> + display + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>NoteBook</th></tr></thead><tbody><tr><td>-model:String<br>-price:double</td></tr><tr><td>+NoteBook(model:String,price:double)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> <span class="keyword">implements</span> <span class="title">Equipment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;<span class="comment">//机器型号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;<span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoteBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoteBook</span><span class="params">(String model, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModel</span><span class="params">(String model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> model + <span class="string">&quot;(&quot;</span> + price + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>Printer</th></tr></thead><tbody><tr><td>-name:String<br>-type:String</td></tr><tr><td>+Printer(name:String,type:String)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Equipment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Printer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Printer</span><span class="params">(String name, String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;<span class="comment">// 机器型号</span></span><br><span class="line">        <span class="keyword">this</span>.type = type;<span class="comment">// 机器类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;(&quot;</span> + type + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>说明：</p><p>model表示机器的型号</p><p>display表示显示器名称</p><p>type表示机器的类型</p></li><li><p>根据需要提供各属性的get/set方法以及重载构造器</p></li><li><p>实现类实现接口的方法，返回各自属性的信息</p></li></ul><h3 id="Employee类及其子类的设计"><a href="#Employee类及其子类的设计" class="headerlink" title="Employee类及其子类的设计"></a>Employee类及其子类的设计</h3><table><thead><tr><th align="left">Employee</th></tr></thead><tbody><tr><td align="left">-id:int<br>-name:String<br>-age:int<br>-salary:double</td></tr><tr><td align="left">+Employee(id:int,name:String,age:int,salary:double)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + age + salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDetials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Programmer</th></tr></thead><tbody><tr><td align="left">-memberId:int<br><font color="blue">-status:Status = FREE</font><br>-equipment:Equipment</td></tr><tr><td align="left">+Programmer(id:int,name:String,age:int,salary:double,equipment:Equipment)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.team.service.Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memberId;<span class="comment">// 开发团队中的ID</span></span><br><span class="line">    <span class="keyword">private</span> Status status = Status.FREE;</span><br><span class="line">    <span class="keyword">private</span> Equipment equipment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Programmer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Programmer</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary, Equipment equipment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id, name, age, salary);</span><br><span class="line">        <span class="keyword">this</span>.equipment = equipment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMemberId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemberId</span><span class="params">(<span class="keyword">int</span> memberId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memberId = memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Equipment <span class="title">getEquipment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> equipment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipment</span><span class="params">(Equipment equipment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.equipment = equipment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDetials() + <span class="string">&quot;\t程序员\t&quot;</span> + status + <span class="string">&quot;\t\t\t&quot;</span> + equipment.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetialsForTeam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memberId + <span class="string">&quot;/&quot;</span> + getId() + <span class="string">&quot;\t&quot;</span> + getName() + <span class="string">&quot;\t&quot;</span> + getAge() + <span class="string">&quot;\t&quot;</span> + getSalary() + <span class="string">&quot;\t程序员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>说明：</p><p>①memberId 用来记录成员加入开发团队后在团队中的ID。</p><p>②Status是项目service包下自定义的类，<font color="blue">声明三个对象属性，分别表示成员的状态</font>。</p><ol><li><font color="blue">FREE-空闲</font></li><li><font color="blue">BUSY-已加入开发团队</font></li><li><font color="blue">VACATION-正在休假</font></li></ol><p>③equipment表示该成员领用的设备</p></li><li><p>可根据需要为类提供个属性的get/set方法以及重载构造器</p></li><li><p>Status类：Status枚举类位于team.service包中，封装员工的状态。其代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.team.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String NAME;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Status</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.NAME = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Status FREE = <span class="keyword">new</span> Status(<span class="string">&quot;FREE&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Status VOCATION = <span class="keyword">new</span> Status(<span class="string">&quot;VOCATION&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Status BUSY = <span class="keyword">new</span> Status(<span class="string">&quot;BUSY&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNAME</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NAME;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NAME;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">Designer</th></tr></thead><tbody><tr><td align="left">-bonus:double</td></tr><tr><td align="left">+Designer(id:int,name:String,age:int,salary:double,equipment:Equipment,bonus:double)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Designer</span> <span class="keyword">extends</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> bonus;<span class="comment">//奖金</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary, Equipment equipment, <span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id, name, age, salary, equipment);</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDetials() + <span class="string">&quot;\t设计师\t&quot;</span> + getStatus() + <span class="string">&quot;\t&quot;</span> + bonus + <span class="string">&quot;\t\t&quot;</span> + <span class="keyword">super</span>.getEquipment().getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetialsForTeam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMemberId() + <span class="string">&quot;/&quot;</span> + getId() + <span class="string">&quot;\t&quot;</span> + getName() + <span class="string">&quot;\t&quot;</span> + getAge() + <span class="string">&quot;\t&quot;</span> + getSalary() + <span class="string">&quot;\t设计师&quot;</span> + <span class="string">&quot;\t&quot;</span> + getBonus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Architect</th></tr></thead><tbody><tr><td align="left">-stock:int</td></tr><tr><td align="left">Architect(id:int,name:String,age:int,salary:double,equipment:Equipment,bonus:double,stock:int)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Architect</span> <span class="keyword">extends</span> <span class="title">Designer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stock;<span class="comment">//股票</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Architect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Architect</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary, Equipment equipment, <span class="keyword">double</span> bonus, <span class="keyword">int</span> stock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id, name, age, salary, equipment, bonus);</span><br><span class="line">        <span class="keyword">this</span>.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStock</span><span class="params">(<span class="keyword">int</span> stock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDetials() + <span class="string">&quot;\t架构师\t&quot;</span> + getStatus() + <span class="string">&quot;\t&quot;</span> + getBonus() + <span class="string">&quot;\t&quot;</span> + stock + <span class="string">&quot;\t&quot;</span> + <span class="keyword">super</span>.getEquipment().getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetialsForTeam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMemberId() + <span class="string">&quot;/&quot;</span> + getId() + <span class="string">&quot;\t&quot;</span> + getName() + <span class="string">&quot;\t&quot;</span> + getAge() + <span class="string">&quot;\t&quot;</span> + getSalary() + <span class="string">&quot;\t架构师&quot;</span> + <span class="string">&quot;\t&quot;</span> + getBonus() + <span class="string">&quot;\t&quot;</span> + stock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>说明：</p><p>①bonus表示奖金。</p><p>②stock表示公司奖励的股票数量。</p></li><li><p>可根据需要为类提供个属性的get/set方法以及重载构造器。</p></li></ul><h2 id="第2步-实现service包中的类"><a href="#第2步-实现service包中的类" class="headerlink" title="第2步 实现service包中的类"></a>第2步 实现service包中的类</h2><ul><li><p>按照设计要求编写NameListService类。</p></li><li><p>在NameListService类中临时添加一个main方法，作为单元测试方法。</p></li><li><p>在方法中创建NameListService对象，然后分别用模拟数据调用该对象的各个方法，以测试是否正确。</p><p>注：测试应细化到包含了所有非正常的情况，一确保方法完全正确。</p></li><li><p>重复1-3步，完成TeamService类的开发。</p></li></ul><h3 id="NameListService类的设计"><a href="#NameListService类的设计" class="headerlink" title="NameListService类的设计"></a>NameListService类的设计</h3><table><thead><tr><th align="left">NameListService</th></tr></thead><tbody><tr><td align="left">-employees:Employee[]</td></tr><tr><td align="left"><u>+NmaeListService()</u><br>+getAllEmployees():Employee[]<br>+getEmployee(int id) <font color="red">throws TeamException</font>:Employee</td></tr></tbody></table><ul><li><p>功能：负责将Data中的数据封装到Employee[]数组中，同时提供相关操作Employee[]的方法。</p></li><li><p>说明：</p><p>①employees用来保存公司所有员工对象。</p><p>②NameListService()构造器：</p><ol><li>根据项目提供的Data类构建相应大小的employees数组。</li><li>再根据Data类中的数据构建不同的对象，包括Employee、Programmer、Designer和Architect对象，以及相关联的Equipment子类的对象。</li><li>将对象存于数组中。</li><li>Data类位于team.service包中。</li></ol><p>③getAllEmployees ()方法：获取当前所有员工。</p><p>​    返回：包含所有员工对像的数组。</p><p>④getEmployee(id : int)方法：获取指定ID的员工对象。</p><p>​    参数：指定员工的ID</p><p>​    返回：指定员工对象</p><p>​    异常：<font color="blue">找不到指定的员工</font></p></li><li><p>在service子包下提供自定义异常类：<font color="blue">TeamException</font>。</p></li><li><p>另外，可根据需要自行添加其他方法或重载构造器。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.team.domain.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> top.triabin.team.service.Data.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 负责将Data中的数据封装到Employee[]数组中，同时提供相关操作Employee[]的方法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-17    17:30:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameListService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Employee[] employees;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     给数组及数组元素进行初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NameListService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据项目提供的Data类构建相应大小的employees数组。</span></span><br><span class="line">        <span class="comment">//再根据Data类中的数据构建不同的对象，包括Employee、Programmer、Designer和Architect对象，</span></span><br><span class="line">        <span class="comment">//以及相关联的Equipment子类的对象。</span></span><br><span class="line">        <span class="comment">//将对象存于数组中。</span></span><br><span class="line">        employees = <span class="keyword">new</span> Employee[EMPLOYEES.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; employees.length;i++) &#123;</span><br><span class="line">            <span class="comment">//获取员工类型</span></span><br><span class="line">            <span class="keyword">int</span> type = Integer.parseInt(EMPLOYEES[i][<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取Employee的4个基本信息</span></span><br><span class="line">            <span class="keyword">int</span> id = Integer.parseInt(EMPLOYEES[i][<span class="number">1</span>]);</span><br><span class="line">            String name = EMPLOYEES[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> age = Integer.parseInt(EMPLOYEES[i][<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">double</span> salary = Double.parseDouble(EMPLOYEES[i][<span class="number">4</span>]);</span><br><span class="line">            </span><br><span class="line">            Equipment equipment;</span><br><span class="line">            <span class="keyword">double</span> bonus;</span><br><span class="line">            <span class="keyword">int</span> stock;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">            <span class="keyword">case</span> EMPLOYEE:</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Employee(id,name,age,salary);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROGRAMMER:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Programmer(id,name,age,salary,equipment);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DESIGNER:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                bonus = Double.parseDouble(EMPLOYEES[i][<span class="number">5</span>]);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Designer(id,name,age,salary,equipment,bonus);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARCHITECT:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                bonus = Double.parseDouble(EMPLOYEES[i][<span class="number">5</span>]);</span><br><span class="line">                stock = Integer.parseInt(EMPLOYEES[i][<span class="number">6</span>]);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Architect(id, name, age, salary, equipment, bonus, stock);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取指定index上的员工设备</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:17:53</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Equipment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Equipment <span class="title">creatEquipment</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key = Integer.parseInt(EQUIPMENTS[index][<span class="number">0</span>]);</span><br><span class="line">        String modelOrName = EQUIPMENTS[index][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">switch</span>(key) &#123;</span><br><span class="line">        <span class="keyword">case</span> PC:<span class="comment">//21</span></span><br><span class="line">            String display = EQUIPMENTS[index][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PC(modelOrName,display);</span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:<span class="comment">//22</span></span><br><span class="line">            <span class="keyword">double</span> price = Double.parseDouble(EQUIPMENTS[index][<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NoteBook(modelOrName, price);</span><br><span class="line">        <span class="keyword">case</span> PRINTER:<span class="comment">//23</span></span><br><span class="line">            String type = EQUIPMENTS[index][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Printer(modelOrName, type);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取当前所有员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:50:57</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  员工数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Employee[] getAllEmployees() &#123;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取指定id的员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:52:45</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定id的员工（Employee）对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TeamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> TeamException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; employees.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(employees[i].getId() == id) &#123;</span><br><span class="line">                <span class="keyword">return</span> employees[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;找不到指定员工&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> top.triabin.team.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.team.domain.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> top.triabin.team.service.Data.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 负责将Data中的数据封装到Employee[]数组中，同时提供相关操作Employee[]的方法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-17    17:30:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameListService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Employee[] employees;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     给数组及数组元素进行初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NameListService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据项目提供的Data类构建相应大小的employees数组。</span></span><br><span class="line">        <span class="comment">//再根据Data类中的数据构建不同的对象，包括Employee、Programmer、Designer和Architect对象，</span></span><br><span class="line">        <span class="comment">//以及相关联的Equipment子类的对象。</span></span><br><span class="line">        <span class="comment">//将对象存于数组中。</span></span><br><span class="line">        employees = <span class="keyword">new</span> Employee[EMPLOYEES.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; employees.length;i++) &#123;</span><br><span class="line">            <span class="comment">//获取员工类型</span></span><br><span class="line">            <span class="keyword">int</span> type = Integer.parseInt(EMPLOYEES[i][<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取Employee的4个基本信息</span></span><br><span class="line">            <span class="keyword">int</span> id = Integer.parseInt(EMPLOYEES[i][<span class="number">1</span>]);</span><br><span class="line">            String name = EMPLOYEES[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> age = Integer.parseInt(EMPLOYEES[i][<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">double</span> salary = Double.parseDouble(EMPLOYEES[i][<span class="number">4</span>]);</span><br><span class="line">            </span><br><span class="line">            Equipment equipment;</span><br><span class="line">            <span class="keyword">double</span> bonus;</span><br><span class="line">            <span class="keyword">int</span> stock;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">            <span class="keyword">case</span> EMPLOYEE:</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Employee(id,name,age,salary);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROGRAMMER:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Programmer(id,name,age,salary,equipment);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DESIGNER:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                bonus = Double.parseDouble(EMPLOYEES[i][<span class="number">5</span>]);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Designer(id,name,age,salary,equipment,bonus);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARCHITECT:</span><br><span class="line">                equipment = creatEquipment(i);</span><br><span class="line">                bonus = Double.parseDouble(EMPLOYEES[i][<span class="number">5</span>]);</span><br><span class="line">                stock = Integer.parseInt(EMPLOYEES[i][<span class="number">6</span>]);</span><br><span class="line">                employees[i] = <span class="keyword">new</span> Architect(id, name, age, salary, equipment, bonus, stock);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取指定index上的员工设备</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:17:53</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Equipment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Equipment <span class="title">creatEquipment</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key = Integer.parseInt(EQUIPMENTS[index][<span class="number">0</span>]);</span><br><span class="line">        String modelOrName = EQUIPMENTS[index][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">switch</span>(key) &#123;</span><br><span class="line">        <span class="keyword">case</span> PC:<span class="comment">//21</span></span><br><span class="line">            String display = EQUIPMENTS[index][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PC(modelOrName,display);</span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:<span class="comment">//22</span></span><br><span class="line">            <span class="keyword">double</span> price = Double.parseDouble(EQUIPMENTS[index][<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NoteBook(modelOrName, price);</span><br><span class="line">        <span class="keyword">case</span> PRINTER:<span class="comment">//23</span></span><br><span class="line">            String type = EQUIPMENTS[index][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Printer(modelOrName, type);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取当前所有员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:50:57</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  员工数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Employee[] getAllEmployees() &#123;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取指定id的员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-199:52:45</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定id的员工（Employee）对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TeamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> TeamException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; employees.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(employees[i].getId() == id) &#123;</span><br><span class="line">                <span class="keyword">return</span> employees[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;找不到指定员工&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TeamService类的设计"><a href="#TeamService类的设计" class="headerlink" title="TeamService类的设计"></a>TeamService类的设计</h3><table><thead><tr><th align="left">TeamService</th></tr></thead><tbody><tr><td align="left">-counter: int = 1<br>-MAX_MEMBER: final int = 5<br>-team: Programmer[] = new Programmer[MAX_MEMBER];<br>-total:int = 0</td></tr><tr><td align="left">+getTeam():Programmer[]<br>+addMember(e:Employee) <font color="red">throws TeamException</font>:void<br>+removeMember(memberId:int) <font color="red">throws TeamException</font>:void</td></tr></tbody></table><ul><li><p>功能：关于开发团队成员的管理：添加、删除等。</p></li><li><p>说明：</p><p>①counter为静态变量，用来为开发团队新增成员自动生成团队中的唯一ID，即memberId。（提示：应使用增1的方式）。</p><p>②MAX_MEMBER：表示开发团队最大成员数。</p><p>③team数组：用来保存当前团队中的各成员对象。</p><p>④total：记录团队成员的实际人数。</p><p>⑤getTeam()方法：返回当前团队的所有对象。</p><p>​    返回：包含所有成员对象的数组，数组大小与成员人数一致。</p><p>⑥addMember(e: Employee)方法：向团队中添加成员。</p><p>​    参数：待添加成员的对象</p><p>​    异常：<font color="red">找不到指定memberId的员工，删除失败</font></p><p>⑦removeMember(memberId: int)方法：从团队中删除成员。</p><p>​    参数：待删除成员的memberId</p><p>​    异常：<font color="red">找不到指定memberId的员工，删除失败</font></p></li><li><p>另外，可根据需要自行添加其他方法或重载构造器。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.team.domain.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 关于开发团队成员的管理：添加、删除等。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-19    10:58:27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">1</span>;<span class="comment">//静态变量，用于为开发团队新增人员生成唯一memberId(自增的方式)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_MEMBER = <span class="number">5</span>;<span class="comment">//表示开发团队最大成员数</span></span><br><span class="line">    <span class="keyword">private</span> Programmer[] team = <span class="keyword">new</span> Programmer[MAX_MEMBER];<span class="comment">//保存开发团队成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total;<span class="comment">//记录开发团队实际人数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeamService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 返回当前团队的所有对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-1911:11:31</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Programmer数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Programmer[] getTeam() &#123;</span><br><span class="line">        Programmer[] team = <span class="keyword">new</span> Programmer[total];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; team.length;i++) &#123;</span><br><span class="line">            team[i] = <span class="keyword">this</span>.team[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> team;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 将指定员工添加到开发团队中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-1911:12:14</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 待添加成员的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TeamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Employee e)</span> <span class="keyword">throws</span> TeamException</span>&#123;</span><br><span class="line"><span class="comment">//        成员已满，无法添加</span></span><br><span class="line">        <span class="keyword">if</span>(total &gt;= MAX_MEMBER) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;成员已满，无法添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        该成员不是开发人员，无法添加</span></span><br><span class="line">        <span class="keyword">if</span>(!(e <span class="keyword">instanceof</span> Programmer)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;该成员不是开发人员，无法添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        该员工已在本开发团队中</span></span><br><span class="line">        <span class="keyword">if</span>(isEsit(e)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;该员工已在本开发团队中&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        该员工已是某团队成员</span></span><br><span class="line"><span class="comment">//        该员工正在休假，无法添加</span></span><br><span class="line">        Programmer p = (Programmer)e;<span class="comment">//一定不会出现ClassCastException</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BUSY&quot;</span>.equals(p.getStatus().getNAME())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;该员工已是某团队成员&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;VACATION&quot;</span>.equals(p.getStatus().getNAME())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;该员工正在休假，无法添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        团队中至多只能有一名架构师</span></span><br><span class="line"><span class="comment">//        团队中至多只能有两名设计师</span></span><br><span class="line"><span class="comment">//        团队中至多只能有三名程序员</span></span><br><span class="line">        <span class="keyword">int</span> numOfArch = <span class="number">0</span>,numOfDesi = <span class="number">0</span>,numOfPro = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; total;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(team[i] <span class="keyword">instanceof</span> Architect) &#123;</span><br><span class="line">                numOfArch++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(team[i] <span class="keyword">instanceof</span> Designer) &#123;</span><br><span class="line">                numOfDesi++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(team[i] <span class="keyword">instanceof</span> Programmer) &#123;</span><br><span class="line">                numOfPro++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Architect) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numOfArch &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;团队中至多只能有一名架构师&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Designer) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numOfDesi &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;团队中至多只能有两名设计师&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Programmer) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numOfPro &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;团队中至多只能有三名程序员&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//错误写法(逻辑上的错误)</span></span><br><span class="line"><span class="comment">//        if(p instanceof Architect &amp;&amp; numOfArch &gt;= 1) &#123;</span></span><br><span class="line"><span class="comment">//            throw new TeamException(&quot;团队中至多只能有一名架构师&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;else if(p instanceof Designer &amp;&amp; numOfDesi &gt;= 2) &#123;</span></span><br><span class="line"><span class="comment">//            throw new TeamException(&quot;团队中至多只能有两名设计师&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;else if(p instanceof Programmer &amp;&amp; numOfPro &gt;= 3) &#123;</span></span><br><span class="line"><span class="comment">//            throw new TeamException(&quot;团队中至多只能有三名程序员&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//p的属性赋值</span></span><br><span class="line">        p.setStatus(Status.BUSY);</span><br><span class="line">        p.setMemberId(counter++);</span><br><span class="line">        <span class="comment">//将e添加到现有的team中</span></span><br><span class="line">        team[total++] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 判断指定的员工是否已存在于现有的开发团队中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-1911:49:35</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 员工(Employee)对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEsit</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; total;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(team[i].getId() == e.getId()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-10-1911:12:31</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memberId 要删除成员的memberId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TeamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberId)</span> <span class="keyword">throws</span> TeamException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i &lt; total;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(team[i].getMemberId() == memberId) &#123;</span><br><span class="line">                team[i].setStatus(Status.FREE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未找到指定memberId的情况</span></span><br><span class="line">        <span class="keyword">if</span>(i == total) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TeamException(<span class="string">&quot;找不到指定memberId的员工，删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; total;j++) &#123;</span><br><span class="line">            team[j - <span class="number">1</span>] = team[j];</span><br><span class="line">        &#125;</span><br><span class="line">        team[--total] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第3步-实现view包中的类"><a href="#第3步-实现view包中的类" class="headerlink" title="第3步 实现view包中的类"></a>第3步 实现view包中的类</h2><ul><li>按照设计要求编写TeamView类，注意实现各个方法吗，并编译。</li><li>执行main方法，测试软件各个功能。</li></ul><h3 id="TeamView类的设计"><a href="#TeamView类的设计" class="headerlink" title="TeamView类的设计"></a>TeamView类的设计</h3><table><thead><tr><th align="left">TeamView</th></tr></thead><tbody><tr><td align="left">-listSvc: NameListService = new NameListService()<br>-teamSvc: TeamService = new TeamService()</td></tr><tr><td align="left">+enterMainMenu(): void<br>-listAllEmployees(): void<br>-getTeam():void<br>-addMember(): void<br>-deleteMember(): void<br>+main(args: String[]) : void</td></tr></tbody></table><ul><li><p>说明：</p><p>①listSvc和teamSvc属性：供类中的方法使用；</p><p>②enterMainMenu ()方法：主界面显示及控制方法；</p><p>③以下方法仅供enterMainMenu()方法调用：</p><ol><li>listAllEmployees ()方法：以表格形式列出公司所有成员；</li><li>getTeam()方法：显示团队成员列表操作；</li><li>addMember ()方法：实现添加成员操作；</li><li>deleteMember ()方法：实现删除成员操作。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.team.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.team.domain.*;</span><br><span class="line"><span class="keyword">import</span> top.triabin.team.service.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-19    12:58:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NameListService listSvc = <span class="keyword">new</span> NameListService();</span><br><span class="line">    <span class="keyword">private</span> TeamService teamSvc = <span class="keyword">new</span> TeamService();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> menu = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(menu != <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                listAllEmployees();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;1-团队列表 2-添加团队成员 3-删除团队成员 4-退出  请选择(1-4)：&quot;</span>);</span><br><span class="line">            menu = TSUtility.readMenuSelection();</span><br><span class="line">            <span class="keyword">switch</span>(menu) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                getTeam();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                addMember();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                deleteMember();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;确认是否退出？（Y/N）&quot;</span>);</span><br><span class="line">                <span class="keyword">char</span> isExit = TSUtility.readConfirmSelection();</span><br><span class="line">                <span class="keyword">if</span>(isExit == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     以表格形式列出公司所有成员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listAllEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------开发团队调度软件--------------------------------------\n&quot;</span>);</span><br><span class="line">        Employee[] employees = listSvc.getAllEmployees();</span><br><span class="line">        <span class="keyword">if</span>(employees == <span class="keyword">null</span> || employees.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;公司中没有任何员工信息！\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ID\t姓名\t年龄\t工资\t职位\t状态\t奖金\t股票\t领用设备&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; employees.length;i++) &#123;</span><br><span class="line">                System.out.println(employees[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    显示团队成员列表操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getTeam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------团队成员列表----------------------------------------\n&quot;</span>);</span><br><span class="line">        Programmer[] team = teamSvc.getTeam();</span><br><span class="line">        <span class="keyword">if</span>(team == <span class="keyword">null</span> || team.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开发团队目前没有成员！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TID/ID\t姓名\t年龄\t工资\t职位\t奖金\t股票&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; team.length;i++) &#123;</span><br><span class="line">                System.out.println(team[i].getDetialsForTeam());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    实现添加成员操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------添加成员------------------------------------------\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要添加的员工ID:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = TSUtility.readInt();</span><br><span class="line">        Employee e;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            e = listSvc.getEmployee(id);</span><br><span class="line">            teamSvc.addMember(e);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeamException e1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败，原因：&quot;</span> + e1.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按回车继续……</span></span><br><span class="line">        TSUtility.readReturn();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    实现删除成员操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------删除成员------------------------------------------\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要删除员工的TID: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> tId = TSUtility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;是否确认删除？（Y/N）&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> isDel = TSUtility.readConfirmSelection(); </span><br><span class="line">        <span class="keyword">if</span>(isDel == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            teamSvc.removeMember(tId);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeamException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败，原因：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按回车继续……</span></span><br><span class="line">        TSUtility.readReturn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TeamView view = <span class="keyword">new</span> TeamView();</span><br><span class="line">        view.enterMainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Data-java"><a href="#Data-java" class="headerlink" title="Data.java"></a>Data.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.team.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EMPLOYEE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROGRAMMER = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESIGNER = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ARCHITECT = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PC = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTEBOOK = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRINTER = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Employee  :  10, id, name, age, salary</span></span><br><span class="line">    <span class="comment">//Programmer:  11, id, name, age, salary</span></span><br><span class="line">    <span class="comment">//Designer  :  12, id, name, age, salary, bonus</span></span><br><span class="line">    <span class="comment">//Architect :  13, id, name, age, salary, bonus, stock</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[][] EMPLOYEES = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;10&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;马云&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;3000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;32&quot;</span>, <span class="string">&quot;18000&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;7000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;24&quot;</span>, <span class="string">&quot;7300&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;雷军&quot;</span>, <span class="string">&quot;28&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;5000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;任志强&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;6800&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;柳传志&quot;</span>, <span class="string">&quot;29&quot;</span>, <span class="string">&quot;10800&quot;</span>,<span class="string">&quot;5200&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;杨元庆&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;19800&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;史玉柱&quot;</span>, <span class="string">&quot;26&quot;</span>, <span class="string">&quot;9800&quot;</span>, <span class="string">&quot;5500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;丁磊&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;6600&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;张朝阳&quot;</span>, <span class="string">&quot;25&quot;</span>, <span class="string">&quot;7100&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;杨致远&quot;</span>, <span class="string">&quot;27&quot;</span>, <span class="string">&quot;9600&quot;</span>, <span class="string">&quot;4800&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如下的EQUIPMENTS数组与上面的EMPLOYEES数组元素一一对应</span></span><br><span class="line">    <span class="comment">//PC      :21, model, display</span></span><br><span class="line">    <span class="comment">//NoteBook:22, model, price</span></span><br><span class="line">    <span class="comment">//Printer :23, name, type </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[][] EQUIPMENTS = &#123;</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;22&quot;</span>, <span class="string">&quot;联想T4&quot;</span>, <span class="string">&quot;6000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;戴尔&quot;</span>, <span class="string">&quot;NEC17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;戴尔&quot;</span>, <span class="string">&quot;三星 17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;23&quot;</span>, <span class="string">&quot;佳能 2900&quot;</span>, <span class="string">&quot;激光&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;华硕&quot;</span>, <span class="string">&quot;三星 17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;华硕&quot;</span>, <span class="string">&quot;三星 17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;23&quot;</span>, <span class="string">&quot;爱普生20K&quot;</span>, <span class="string">&quot;针式&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;22&quot;</span>, <span class="string">&quot;惠普m6&quot;</span>, <span class="string">&quot;5800&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;戴尔&quot;</span>, <span class="string">&quot;NEC 17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;21&quot;</span>, <span class="string">&quot;华硕&quot;</span>,<span class="string">&quot;三星 17寸&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;22&quot;</span>, <span class="string">&quot;惠普m6&quot;</span>, <span class="string">&quot;5800&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TSUtility-java"><a href="#TSUtility-java" class="headerlink" title="TSUtility.java"></a>TSUtility.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.team.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 项目中提供了TSUtility.java类，可用来方便地实现键盘访问。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  Email:shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年2月12日上午12:02:58</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TSUtility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019年2月12日上午12:03:30</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp;</span><br><span class="line">                c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 该方法提示并等待，直到用户按回车键后返回。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019年2月12日上午12:03:50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;按回车键继续...&quot;</span>);</span><br><span class="line">        readKeyBoard(<span class="number">100</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 该方法从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019年2月12日上午12:04:04</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019年2月12日上午12:04:45</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第7章异常处理</title>
      <link href="/2020/10/03/%E7%AC%AC7%E7%AB%A0%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/10/03/%E7%AC%AC7%E7%AB%A0%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="异常概述与异常体系结构"><a href="#异常概述与异常体系结构" class="headerlink" title="异常概述与异常体系结构"></a>异常概述与异常体系结构</h1><ol><li><p>概念：在Java语言中，将程序执行中发生的不正常情况称为“异常”（开发过程中的语法错误和逻辑错误不是异常）。</p></li><li><p>Java程序在执行过程中所发生的的异常事件可分为两类：</p><p><font color="blue"><strong>Error：</strong></font>Java虚拟机无法解决的严重问题。如JVM系统内部错误、资源耗尽等严重情况。比如：<font color="red">StackOverflowError</font>（栈溢出）和<font color="red">OOM</font>（java.lang.OutOfMeoryError，堆溢出）。一般不编写针对性的代码进行处理。</p><p><font color="blue"><strong>Exception：</strong></font>其他因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：</p><ul><li><font color="red">指针访问</font></li><li><font color="red">试图读取不存在的文件</font></li><li><font color="red">网络连接中断</font></li><li><font color="red">数组角标越界</font></li></ul></li><li><p>对于这些错误，一般有两种<font color="red">解决方法</font>：一是遇到错误就终止程序的运行。另一种方法时由程序员在编写程序时，就考虑到错误的检测、错误消息提示，以及错误的处理。</p></li><li><p>捕获错误最理想的是在<font color="red"><strong>编译期间</strong></font>，但有的错误只有在<font color="red"><strong>运行时</strong></font>才会发生。比如：<font color="red">除数为0，数组下标越界</font>等</p><p>分类：<font color="red">编译时异常</font>和<font color="red">运行时异常</font></p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201003144226.png" align="left"><p><font color="red">红色：编译时异常，即受检(checked)异常。</font></p><p><font color="blue">蓝色：运行时异常，即非受检(unchecked)异常。</font></p></li></ol><ul><li><p>运行时异常</p><ul><li>是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。</li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理会对程序的可读性和运行效率产生影响。</li></ul></li><li><p>编译时异常</p><ul><li>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。<font color="red">编译器要求Java程序必须捕获或声明所有编译时异常。</font></li><li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li></ul></li></ul><h1 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h1><p><strong>继承关系：</strong></p><p>java.lang.Throwable</p><p>​    java.lang.Error：一般不编写针对性的代码进行处理</p><p>​    java.lang.Exception：可以进行一场处理</p><p>​        编译时异常（checked）</p><p>​            IOException</p><p>​                FileNotFoundException</p><p>​            ClassNotFoundException</p><p>​        运行时异常（unchecked,RuntimeException）</p><p>​            NullPointerException（空指针异常）</p><p>​            ArrayIndexOutOfBoundsException（数组下标越界）</p><p>​            ClassCastException</p><p>​            NumberFormatException（数字格式化异常）</p><p>​            InputMismatchException（输入不匹配异常）</p><p>​            ArithmeticException（算数异常）</p><blockquote><p><strong>面试题：</strong>常见的异常有哪些？举例说明</p><p>① 编译时异常：</p><p>​    IOException</p><p>​        FileNotFoundException</p><p>​    ClassNotFoundException</p><p>② 运行时异常：</p><p>​    NullPointerException（空指针异常）</p><p>​    ArrayIndexOutOfBoundsException（数组下标越界）</p><p>​    ClassCastException</p><p>​    NumberFormatException（数字格式化异常）</p><p>​    InputMismatchException（输入不匹配异常）</p><p>​    ArithmeticException（算数异常）</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02commonexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">//************************编译时异常************************</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(file);//FileNotFoundException</span></span><br><span class="line"><span class="comment">//        int data = fis.read();//IOException</span></span><br><span class="line"><span class="comment">//        while(data !=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println((char)data);</span></span><br><span class="line"><span class="comment">//            data = fis.read();//IOException</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fis.close();//IOException</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//************************运行时异常************************</span></span><br><span class="line">    <span class="comment">//ArithmeticException:算术异常</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//InputMismatchException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> score = scan.nextInt();<span class="comment">//当输入类型不是int型时报错：InputMismatchException</span></span><br><span class="line">        System.out.println(score);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//NumberFormatException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ClassCastException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Date();</span><br><span class="line">        String str = (String)obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        int[] arr = new int[10];</span></span><br><span class="line"><span class="comment">//        System.out.println(arr[10]);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">        String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;null&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int[][] arr = null;</span></span><br><span class="line"><span class="comment">//        System.out.println(arr[3]);</span></span><br><span class="line">        String str = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        str = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理机制一：try-catch-finally"><a href="#异常处理机制一：try-catch-finally" class="headerlink" title="异常处理机制一：try-catch-finally"></a><font color="red">异常处理机制一：try-catch-finally</font></h1><h2 id="异常处理：抓抛模型"><a href="#异常处理：抓抛模型" class="headerlink" title="异常处理：抓抛模型"></a>异常处理：抓抛模型</h2><ol><li><p>过程一：“抛”，程序正常执行中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。</p><p>一旦抛出对象以后，其后的代码就不再执行。</p></li><li><p>过程二：“抓”，可以理解为异常的处理方式：① try-catch-finally    ②throws</p></li></ol><h2 id="try-catch-finally的使用"><a href="#try-catch-finally的使用" class="headerlink" title="try-catch-finally的使用"></a>try-catch-finally的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//……</span></span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><p>finally是可选的</p></li><li><p>使用try将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配。</p></li><li><p>一旦try中的异常对象匹配到某一个catch时，就进入到catch中进行异常处理。一旦处理完成，就跳出当前try-catch结构（没有写finally的情况），继续执行其后的代码。</p></li><li><p>catch中的异常类型如果没有子父类关系，则声明的先后（上下）无所谓；catch中的异常类型如果满足子父类关系，则要求一定先声明子类。否则，<strong>报错</strong>。</p></li><li><p>常用的异常对象处理方式：</p><p>① String getMessage()    获取异常信息，返回字符串</p><p>② printStackTrace()    获取异常类名和异常信息，以及异常出现在程序中的位置，返回值void。</p></li><li><p>在try结构中声明的变量，在try结构外无法调用。</p><p>​    如果确实要在外面调用，可以先在try结构上面初始化变量，再在try结构后面调用。</p></li><li><p>try-catch-finally结构可以嵌套。</p></li></ol><p>体会1：使用try-catch-finally处理编译时异常，使得程序在编译时不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常延迟到运行时出现。</p><p>体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，一定要考虑异常的处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03trycatchfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            num = Integer.parseInt(str);</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello--1&quot;</span>);<span class="comment">//未能执行此语句，因为程序遇到异常后直接抛出异常，停止执行后面的语句，转而执行catch操作，异常被catch解决后程序正常执行，所以后面的hello--2正常显示</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;出现数值转换异常了，莫慌……&quot;);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//String getMessage():</span></span><br><span class="line"><span class="comment">//            System.out.println(e.getMessage());</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//printStackTrace():</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello--2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-catch-finally中finally的使用"><a href="#try-catch-finally中finally的使用" class="headerlink" title="try-catch-finally中finally的使用"></a>try-catch-finally中finally的使用</h2><ol><li>finally是可选的。</li><li>finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句等情况。</li><li>像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动回收的，我们需要自己手动地进行手动地进行资源的释放。此时的资源释放，就需要声明在finally中。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03trycatchfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);<span class="comment">//FileNotFoundException</span></span><br><span class="line">            <span class="keyword">int</span> data = fis.read();<span class="comment">//IOException</span></span><br><span class="line">            <span class="keyword">while</span>(data != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">                data = fis.read();<span class="comment">//IOException</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            fis.close();//IOException，将此结构放到finally结构中</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fis != <span class="keyword">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = method();</span><br><span class="line">        System.out.println(num);<span class="comment">//先执行finally中的内容，再执行catch中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我一定会被执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            System.out.println(a / b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;楼主是真的帅！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理机制二：throws"><a href="#异常处理机制二：throws" class="headerlink" title="异常处理机制二：throws"></a><font color="red">异常处理机制二：throws</font></h1><h2 id="throws-异常类型"><a href="#throws-异常类型" class="headerlink" title="throws + 异常类型"></a>throws + 异常类型</h2><ol><li><p>“throws + 异常类型” 写在方法的声明处。指明方法执行时可能会抛出的异常类型。</p><p>一旦方法执行时出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时就会被抛出。异常代码后续代码就不再执行。</p></li><li><p>注意：try-catch-finally：真正将异常处理掉了。</p><p>throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉。</p></li><li><p>开发中，如何选择使用try-catch-finally还是throws？</p><ul><li>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</li><li>执行的方法a中，先后有调用了另外的几个方法，这几个方法时递进关系执行的。则这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._04throws;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     异常处理的方式二：throws + 异常类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> data = fis.read();</span><br><span class="line">        <span class="keyword">while</span>(data != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            data = fis.read();</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法重写的规则之一：子类重写方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._04throws;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     方法重写的规则之一：</span></span><br><span class="line"><span class="comment"> *     子类重写方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverrideTest test = <span class="keyword">new</span> OverrideTest();</span><br><span class="line">        test.display(<span class="keyword">new</span> SubClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(SuperClass s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="手动抛出异常：throw"><a href="#手动抛出异常：throw" class="headerlink" title="手动抛出异常：throw"></a>手动抛出异常：throw</h1><h2 id="关于异常对象的产生"><a href="#关于异常对象的产生" class="headerlink" title="关于异常对象的产生"></a>关于异常对象的产生</h2><ol><li><p>系统自动生成的异常对象</p></li><li><p>手动生成一个异常对象，并抛出（throw）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05throw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.regist(-<span class="number">1001</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line">            <span class="comment">//手动抛出一个异常对象</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;您输入的数据非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201014132746.png" align="left"></li></ol><h1 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06userdefined;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     如何自定义异常类？</span></span><br><span class="line"><span class="comment"> *     1. 继承现有的异常结构：RuntimeException、Exception</span></span><br><span class="line"><span class="comment"> *     2. 提供全局常量：serialVersionUID</span></span><br><span class="line"><span class="comment"> *     3. 提供重载构造器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7034897193246939L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><ul><li><p>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。</p><p>对数据类型不一致（NumberFormatException）、缺少命令行参数（ArrayIndexOutOfBoundsException）、除以0（ArithmeticException）及输入负数（EcDef自定义的异常）进行处理。</p></li><li><p>提示：</p><p>(1) 在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</p><p>(2) 在main()方法中使用异常处理语句进行异常处理。</p><p>(3) 在程序中，自定义对应输入负数的异常类(EcDef)。</p><p>(4) 运行时接受参数 <code>java EcmDef 20 10 //args[0]=“20” args[1]=“10”</code>。</p><p>(5) Interger类的static方法parseInt(String s)将s转换成对应的int值。</p><p>​    如：<code>int a=Interger.parseInt(“314”);    //a = 314</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="keyword">package</span> top.triabin._06userdefined.exercise1;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *    在程序中，自定义对应输入负数的异常类(EcDef)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcDef</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">           <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">33875164229948L</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>(msg);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06userdefined.exercise1;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcmDef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">              <span class="keyword">int</span> j = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">              <span class="keyword">double</span> result = ecm(i,j);</span><br><span class="line">              System.out.println(result);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;数据类型不一致&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;缺少命令行参数&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;除数为0&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (EcDef e) &#123;</span><br><span class="line">              System.out.println(e.getMessage());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@data</span> 2020-10-1414:28:48</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> i 被除数</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> j 除数</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span> 商</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@throws</span> EcDef</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ecm</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> <span class="keyword">throws</span> EcDef</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> EcDef(<span class="string">&quot;分子或分母为负数了！&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> i / j;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>① 数据类型不一致</p><p>输入：12 abc</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201016212436.png" align="left"><p>② 缺少命令行参数</p><p>输入：12</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201016212634.png" align="left"><p>③ 除数为0（自定义错误类型）</p><p>输入：12 0</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201016212830.png" align="left"></li></ul><blockquote><h3 id="一首小悟结束异常处理"><a href="#一首小悟结束异常处理" class="headerlink" title="一首小悟结束异常处理"></a>一首小悟结束异常处理</h3><p>世界上最遥远的<font color="red">距离</font>，是我在if里你在else里，似乎一直相伴又永远分离；</p><p>世界上最痴心的<font color="red">等待</font>，是我当case你是switch，或许永远都选不上自己；</p><p>世界上最真情的<font color="red">相依</font>，是你在try我在catch。无论你发神马脾气，我都默默承受，静静处理。到那时，再来期待我们的finally。</p></blockquote><hr><blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>final、finally、finalize三者的区别？</p><p><strong>类似：</strong></p><p>throw和throws</p><p>​    throw：表示抛出一个异常类的对象，生成异常对象的过程。生命在方法体内。</p><p>​    throws：属于异常处理的一种方式，声明在方法的声明处。</p><p>Collection和Collections</p><p>String、StringBuffer和StringBuilder</p><p>ArrayList、LingkedList</p><p>HashMap、LinkedHashMap</p><p>重写、重载</p><p><strong>结构不相似的：</strong></p><p>抽象类、接口</p><p>==、equals</p><p>sleep()、wait()</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第6章面向对象编程（下）</title>
      <link href="/2020/08/19/%E7%AC%AC6%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2020/08/19/%E7%AC%AC6%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="关键字：static"><a href="#关键字：static" class="headerlink" title="关键字：static"></a>关键字：static</h1><h2 id="static关键字的使用"><a href="#static关键字的使用" class="headerlink" title="static关键字的使用"></a>static关键字的使用</h2><ol><li><p>static：静态的。</p></li><li><p>可以用来修饰：属性、方法、代码块、内部类。</p></li><li><p>使用static来修饰属性:静态变量</p><p>属性：按是否使用是static修饰，又分为静态属性和非静态属性（实例变量）</p><ul><li>实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样属性值的修改。</li><li>静态变量：我们创建了类的多个对象，多个对象共享一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用次静态变量时，是修改过的。</li></ul><p>static修饰属性的其他说明：</p><ul><li><p>静态变量随着类的加载而加载，可以通过“类.静态变量”的方式调用；</p></li><li><p>静态变量的加载要早于对象的创建；</p></li><li><p>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p></li><li><table><thead><tr><th></th><th>类变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li></ul><p>静态属性举例：System.out、Math.PI。</p></li><li><p>使用static来修饰方法：静态方法</p><p>① 随着类的加载而加载，可以通过“类.静态方法”的方式进行调用;</p><table><thead><tr><th>②</th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table><p>③ 静态方法中，只能调用静态的方法或属性；非静态方法中，既可以调用静态的方法或属性，也可以调用非静态的方法或属性。</p></li><li><p>static注意点：</p><p>① 在静态方法内不能使用this关键字和super关键字;</p><p>② 关于静态属性和静态方法的使用，都从生命周期的角度去解释。</p></li><li><p>开发中，如何确定一个属性是否要声明为static的？</p><ul><li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</li><li>类中的常量也常常声明为static。</li></ul><p>开发中，如何确定一个方法是否要声明为static的？</p><ul><li>操作静态属性的方法,通常设置为static的；</li><li>工具类中的方法，习惯上声明为static的。比如：Math、Arrays、Collections。</li></ul></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01static;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static关键字的使用：代码示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;static-access&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese.nation = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        Chinese c1 = <span class="keyword">new</span> Chinese();</span><br><span class="line">        System.out.println(<span class="string">&quot;通过“类.静态变量”的方式赋值的静态变量：&quot;</span> + c1.nation);</span><br><span class="line">        c1.name = <span class="string">&quot;姚明&quot;</span>;</span><br><span class="line">        c1.age = <span class="number">40</span>;</span><br><span class="line">        c1.nation = <span class="string">&quot;CHN&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        Chinese c2 = <span class="keyword">new</span> Chinese();</span><br><span class="line">        c2.name = <span class="string">&quot;马龙&quot;</span>;</span><br><span class="line">        c2.age = <span class="number">30</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(c1.nation + <span class="string">&quot;  \t&quot;</span> +c2.nation );<span class="comment">//CHN      CHN</span></span><br><span class="line">        c2.nation = <span class="string">&quot;CHINA&quot;</span>;</span><br><span class="line">        System.out.println(c1.nation + <span class="string">&quot;\t&quot;</span> +c2.nation);<span class="comment">//CHINA    CHINA</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Chinese.name = &quot;张继科&quot;;//编译不通过，不能使用类去调用非静态属性</span></span><br><span class="line">        </span><br><span class="line">        c1.eat();</span><br><span class="line">        Chinese.show();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Chinese.eat();//编译不通过，不能使用类去调用非静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String nation;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国人吃中餐&quot;</span>);</span><br><span class="line">        <span class="comment">//调用非静态结构</span></span><br><span class="line">        <span class="keyword">this</span>.info();</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">        <span class="comment">//调用静态结构</span></span><br><span class="line">        walk();</span><br><span class="line">        System.out.println(<span class="string">&quot;nation: &quot;</span> + Chinese.nation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个中国人！&quot;</span>);</span><br><span class="line"><span class="comment">//        eat();//静态方法中，只能调用静态的方法或属性</span></span><br><span class="line"><span class="comment">//        name = &quot;Triabin&quot;</span></span><br><span class="line">        System.out.println(Chinese.nation);<span class="comment">//可以调用静态的属性或方法，属性前可以省略了“类名.”（Chinese.）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;,age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200819203408.png" align="left"></li><li><p>应用举例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01static;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static关键字的使用：应用举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle c1 = <span class="keyword">new</span> Circle();</span><br><span class="line">        Circle c2 = <span class="keyword">new</span> Circle();</span><br><span class="line">        Circle c3 = <span class="keyword">new</span> Circle(<span class="number">3.4</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;c1的id：&quot;</span> + c1.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;c2的id：&quot;</span> + c2.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;c3的id：&quot;</span> + c3.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;创建圆的个数为：&quot;</span> + Circle.getTotal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total;<span class="comment">//记录创建圆的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> init = <span class="number">1001</span>;<span class="comment">//static声明的属性被所有对象所共享</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        id = init++;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200819203554.png" align="left"></li></ol><h2 id="单例（Singleton）设计模式"><a href="#单例（Singleton）设计模式" class="headerlink" title="单例（Singleton）设计模式"></a>单例（Singleton）设计模式</h2><ol><li><p><strong>设计模式</strong><font color="red">是在大量的实践中总结和理论化之后优选的代码结构、编程风格、 以及解决问题的思考方式。</font>设计模免去我们自己再思考和摸索。就像是经典 的棋谱，不同的棋局，我们用不同的棋谱。<font color="red">”套路”</font></p></li><li><p>设计模式：</p><ul><li>创建型模式，共5种：工厂方法模式、抽象工厂模式、<font color="red">单例模式</font>、创造者模式、原型模式；</li><li>结构型模式，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式；</li><li>行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><p><strong>PS：</strong><font color="red">设计模式是独立于语言之外的，就像数据结构与算法。</font></p></li><li><p>单例设计模式只是上述设计模式中的一种。所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类**<font color="red">只能存在一个对象实例</font>**，并且该类只提供一个取得其对象实例的方法。 如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的<font color="blue">构造器的访问权限设置为private</font>，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能<font color="blue">调用该类的某个静态方法</font>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<font color="blue">该类对象的变量也必须定义成静态的</font>。</p></li><li><p>如何实现？</p><p>① 饿汉式实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01static;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *单例模式的懒汉式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank1 = Bank.getInstance();</span><br><span class="line">        Bank bank2 = Bank.getInstance();</span><br><span class="line">        </span><br><span class="line">        System.out.println(bank1 == bank2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 内部创建类的对象</span></span><br><span class="line">    <span class="comment">//4. 此对象必须声明为static的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3. 提供公共的静态的方法，返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>坏处：直接加载对象，对象加载时间过长；</li><li>好处：饿汉式是线程安全的。</li></ul><p>② 懒汉式实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01static;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 单例模式的懒汉式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order1 = Order.getInstance();</span><br><span class="line">        Order order2 = Order.getInstance();</span><br><span class="line">        </span><br><span class="line">        System.out.println(order1 == order2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 声明当前类对象没有初始化</span></span><br><span class="line">    <span class="comment">//4. 此对象也必须声明为static的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3. 声明public、static的返回当前类对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Order();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好处：到需要时才加载对象，延迟对象的创建；</li><li>目前写法坏处：线程不安全。—&gt; 到多线程内容时再修改</li></ul></li><li><p>单例模式的优点：由于单例模式只生成一个实例，<font color="red">减少了系统性能开销</font>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p></li><li><p>举例：java.lang.Runtime。</p></li><li><p>单例设计模式应用场景</p><ul><li><font color="blue">网站的计数器</font>，一般也是单例模式实现，否则难以同步。</li><li><font color="blue">应用程序的日志应用</font>，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</li><li><font color="blue">数据库连接池</font>的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</li><li>项目中，<font color="blue">读取配置文件的类</font>，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。</li><li><font color="blue">Application也是单例的典型应用</font>。</li><li>Windows的<font color="blue">Task Manager(任务管理器)</font>就是很典型的单例模式。</li><li>Windows的<font color="blue">Recycle Bin (回收站)</font>也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</li></ul></li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>编写一个类实现银行账户的概念，包含的属性有“账号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。<font color="red">账号要自动生成。</font></p><p>编写主类，使用银行账户类，输入、输出3个储户的上述信息。</p><p>考虑：哪些属性可以设计成static属性。</p><ul><li>Account类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01exercise1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 课后练习题1：Account类</span></span><br><span class="line"><span class="comment"> * 编写一个类实现银行账户的概念，包含的属性有“账号”、“密码”、“存款余额”、“利率”、</span></span><br><span class="line"><span class="comment"> * “最小余额”，定义封装这些属性的方法。账号要自动生成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String pwd = <span class="string">&quot;000000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> interestRate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> minBalance = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> iterId = <span class="number">1001</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        id = iterId++;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String pwd,<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getInterestRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInterestRate</span><span class="params">(<span class="keyword">double</span> interestRate)</span> </span>&#123;</span><br><span class="line">        Account.interestRate = interestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getMinBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMinBalance</span><span class="params">(<span class="keyword">double</span> minBalance)</span> </span>&#123;</span><br><span class="line">        Account.minBalance = minBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account [id=&quot;</span> + id + <span class="string">&quot;, pwd=&quot;</span> + pwd + <span class="string">&quot;, balance=&quot;</span> + balance + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主类Bank</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01exercise1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 课后练习题1主类：Bank、</span></span><br><span class="line"><span class="comment"> * 编写主类，使用银行账户类，输入、输出3个储户的上述信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account a1 = <span class="keyword">new</span> Account();</span><br><span class="line">        a1.setBalance(<span class="number">201314</span>);</span><br><span class="line">        Account a2 = <span class="keyword">new</span> Account(<span class="string">&quot;quqian&quot;</span>,<span class="number">2000</span>);</span><br><span class="line">        Account a3 = <span class="keyword">new</span> Account(<span class="string">&quot;123455&quot;</span>,<span class="number">1314</span>);</span><br><span class="line">        Account.setInterestRate(<span class="number">3.5</span>);</span><br><span class="line">        Account.setMinBalance(<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(a1);</span><br><span class="line">        System.out.println(a2);</span><br><span class="line">        System.out.println(a3);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小余额 = &quot;</span> + Account.getMinBalance());</span><br><span class="line">        System.out.println(<span class="string">&quot;账户数量 = &quot;</span> + Account.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;利率 = &quot;</span> + Account.getInterestRate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200819214034.png" align="left"></li></ol><h1 id="理解main方法的语法"><a href="#理解main方法的语法" class="headerlink" title="理解main方法的语法"></a>理解main方法的语法</h1><h2 id="main-方法的使用说明"><a href="#main-方法的使用说明" class="headerlink" title="main()方法的使用说明"></a>main()方法的使用说明</h2><ol><li><p>main()作为程序的入口。</p></li><li><p>main()方法也是一个普通的静态方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main.main(<span class="keyword">new</span> String[<span class="number">100</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++) &#123;</span><br><span class="line">            args[i] = <span class="string">&quot;args_&quot;</span> + i;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行时会询问将哪一个main()方法作为程序入口</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820100255.png" align="left"><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820100335.png" align="left"></li><li><p>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02main;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * main()方法与控制台交互示例代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainInteract</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;String型：&quot;</span> + args[i]);</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(args[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;int型：&quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① Eclipse中</p><ul><li><p>先运行使其编译一遍，然后：右键 -&gt; Run As -&gt;Run Configurations -&gt; 左侧找到并选中相应类名 -&gt; <font color="blue">(x)=</font> Arguments -&gt; 在Program arguments处输入内容，不管加不加””号都以字符串形式输入 -&gt; Run</p></li><li><p>如图：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820095251.png" align="left"></li><li><p>运行</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820095329.png" align="left"></li></ul><p>② 命令行中</p><ul><li>先<code>javac MainInteract.java</code> -&gt; <code>java MainInteract 77 99 88 66 55</code> -&gt; 运行：</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820095647.png" align="left"></li></ol><h1 id="类的成员之四：代码块"><a href="#类的成员之四：代码块" class="headerlink" title="类的成员之四：代码块"></a>类的成员之四：代码块</h1><h2 id="基本概念和作用"><a href="#基本概念和作用" class="headerlink" title="基本概念和作用"></a>基本概念和作用</h2><ol><li><p>代码块的作用：用来初始化类、对象。</p></li><li><p>代码块如果有修饰，只能是static。</p></li><li><p>分类：静态代码块、非静态代码块。</p></li><li><p>静态代码块：</p><ul><li>内部可以有输出语句</li><li>随着类的加载而执行，而且只执行一次</li><li><strong><font color="red">作用：初始化类信息</font></strong></li><li>如果一个类中定义了多个代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行优于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul></li><li><p>非静态代码块：</p><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li><font color="red"><strong>作用：可以在创建对象时，对对象的属性进行初始化</strong></font></li><li>非静态代码块内可以调用静态的属性、静态的方法或非静态的属性、非静态的方法</li></ul></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03codeblock;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 类的成员之四：代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 代码块的作用：用来初始化类、对象。</span></span><br><span class="line"><span class="comment"> * 2. 代码块如果有修饰，只能是static。</span></span><br><span class="line"><span class="comment"> * 3. 分类：静态代码块、非静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4. 静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5. 非静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String descr = Person.descr;</span><br><span class="line">        System.out.println(descr);</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        Person.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String descr = <span class="string">&quot;我是一个人&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    <span class="comment">//static代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,static block_1!&quot;</span>);</span><br><span class="line">        <span class="comment">//调用静态结构</span></span><br><span class="line">        descr = <span class="string">&quot;我是一个爱学习的人1&quot;</span>;</span><br><span class="line">        info();</span><br><span class="line"><span class="comment">//        eat();</span></span><br><span class="line"><span class="comment">//        name = &quot;Triabin&quot;;//不能调用非静态结构</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,static block_2!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非static代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,block!&quot;</span>);</span><br><span class="line">        <span class="comment">//调用非静态结构</span></span><br><span class="line">        age = <span class="number">1</span>;</span><br><span class="line">        eat();</span><br><span class="line">        <span class="comment">//调用静态结构</span></span><br><span class="line">        descr = <span class="string">&quot;我是一个爱学习的人&quot;</span>;</span><br><span class="line">        info();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个快乐的人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820163203.png" align="left"></li></ol><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><ol><li><p>先父后子，静态先行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> top.triabin._03codeblock;</span><br><span class="line">   <span class="comment">//总结：先父后子，静态先行</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Root</span></span>&#123;</span><br><span class="line">       <span class="keyword">static</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Root的静态初始化块&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Root的普通初始化块&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Root</span><span class="params">()</span></span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Root的无参数的构造器&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Mid</span> <span class="keyword">extends</span> <span class="title">Root</span></span>&#123;</span><br><span class="line">       <span class="keyword">static</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Mid的静态初始化块&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Mid的普通初始化块&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">()</span></span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Mid的无参数的构造器&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">           <span class="comment">//通过this调用同一类中重载的构造器</span></span><br><span class="line">           <span class="keyword">this</span>();</span><br><span class="line">           System.out.println(<span class="string">&quot;Mid的带参数构造器，其参数值：&quot;</span></span><br><span class="line">               + msg);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Mid</span></span>&#123;</span><br><span class="line">       <span class="keyword">static</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Leaf的静态初始化块&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Leaf的普通初始化块&quot;</span>);</span><br><span class="line">       &#125;    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="comment">//通过super调用父类中有一个字符串参数的构造器</span></span><br><span class="line">           <span class="keyword">super</span>(<span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">           System.out.println(<span class="string">&quot;Leaf的构造器&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeafTest</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">           <span class="keyword">new</span> Leaf(); </span><br><span class="line">           System.out.println();</span><br><span class="line">           <span class="keyword">new</span> Leaf();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820163430.png" align="left"></li></ol><ol start="2"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03codeblock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;11111111111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;22222222222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;33333333333&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;44444444444&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;55555555555&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;66666666666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 由父及子 静态先行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;77777777777&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200820163904.png" align="left"></li></ol><blockquote><p>对属性可以赋值的位置总结：</p><p>​    ① 默认初始化</p><p>​    ② 显示初始化</p><p>​    ③ 构造器中初始化</p><p>​    ④ 有了对象以后，可以通过“对象.属性”或“对象.方法”的方式，进行赋值</p><p>​    ⑤ 在代码块中赋值</p><p>执行的先后顺序：① - ② / ⑤ - ③ - ④</p><p>②和⑤谁写在前面就先执行谁。</p></blockquote><h1 id="关键字：final"><a href="#关键字：final" class="headerlink" title="关键字：final"></a>关键字：final</h1><h2 id="基本概念和使用"><a href="#基本概念和使用" class="headerlink" title="基本概念和使用"></a>基本概念和使用</h2><p>final：最终的</p><ol><li>final可以用来修饰的结构：类、方法、变量</li><li>final用来修饰一个类：此类不能被其他类继承。<ul><li>比如：String类、System类、StringBuffer类</li></ul></li><li>final用来修饰方法：表明此方法不可以被重写。<ul><li>比如：Object类中的getClass()</li></ul></li><li>final用来修饰变量：此时的”变量“就称为是一个常量<ul><li>final修饰属性：可以考虑赋值的位置有：显示初始化、代码块中初始化、构造器中初始化</li><li>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后就只能在方法体内使用此形参，但不能重新赋值。</li></ul></li></ol><blockquote><p>static final用来修饰属性：全局常量</p><p>static final用来修饰方法：不可重写的静态方法</p></blockquote><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>面试题：排错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;<span class="comment">//错误</span></span><br><span class="line">        <span class="comment">//return x + 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Other o = <span class="keyword">new</span> Other();</span><br><span class="line">        <span class="keyword">new</span> Something().addOne(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span></span>&#123;</span><br><span class="line">        <span class="comment">//o = new Other();//错误</span></span><br><span class="line">        o.i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h1><ul><li>概念：随着继承层次的中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫<font color="red">抽象类</font>。</li></ul><h2 id="abstract关键字的使用"><a href="#abstract关键字的使用" class="headerlink" title="abstract关键字的使用"></a>abstract关键字的使用</h2><ol><li><p>abstract：抽象的。</p></li><li><p>abstract可以用来修饰：类、方法。</p></li><li><p>abstract修饰类：抽象类</p><ul><li>此类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化全过程）</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作</li></ul></li><li><p>abstract修饰方法：抽象方法</p><ul><li><p>抽象方法只有方法的声明，没有方法体</p></li><li><p>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法。</p></li><li><p>若子类重写了父类中所有抽象方法后，此子类可实例化</p><p>若子类没有重写父类中所有抽象方法，则次子类也是一个抽象类，需要使用abstract修饰</p></li></ul></li><li><p>abstract使用上的注意点：</p><ul><li>abstract不能用来修饰：属性、构造器等结构</li><li>abstract不能用来修饰私有方法、静态方法、final的方法</li></ul></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05abstract;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * abstract关键字的使用：</span></span><br><span class="line"><span class="comment"> * 1. abstract：抽象的</span></span><br><span class="line"><span class="comment"> * 2. abstract可以用来修饰：类、方法</span></span><br><span class="line"><span class="comment"> * 3. abstract修饰类：抽象类</span></span><br><span class="line"><span class="comment"> * 4. abstract修饰方法：抽象方法</span></span><br><span class="line"><span class="comment"> * 5. abstract使用上的注意点：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一旦Person类抽象了，就不可实例化</span></span><br><span class="line"><span class="comment">//        Person p1 = new Person();//Cannot instantiate the type Person</span></span><br><span class="line"><span class="comment">//        p1.eat();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不是抽象方法</span></span><br><span class="line"><span class="comment">//    public void eat() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//必须重写父类中所有的抽象方法，否则子类无法实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="抽象类的匿名子类"><a href="#抽象类的匿名子类" class="headerlink" title="抽象类的匿名子类"></a>抽象类的匿名子类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Person为抽象类、Person的eat()和breath()为抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//……</span></span><br><span class="line"><span class="comment">//创建匿名子类的对象：p</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    method(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建匿名子类的匿名对象</span></span><br><span class="line">method(<span class="keyword">new</span> Person()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="多态的应用：模板方法设计模式（TemplateMethod）"><a href="#多态的应用：模板方法设计模式（TemplateMethod）" class="headerlink" title="多态的应用：模板方法设计模式（TemplateMethod）"></a>多态的应用：模板方法设计模式（TemplateMethod）</h2><ol><li><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p></li><li><p>解决的问题：</p><ul><li>当功能内部的一部分实现是确定的，一部分实现是不确定的。这时可以吧不确定的部分暴露出去，让子类去实现。</li><li><font color="red">换句话说，在软件开发在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</font></li></ul></li><li><p>举例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05abstract;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 抽象类的应用：模板方法的设计模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Template t = <span class="keyword">new</span> SubTemlate();</span><br><span class="line">        t.spendTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 计算某段代码执行所需要花费的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-2416:07:07</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spendTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        code();<span class="comment">//不确定的部分，易变的部分</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (start - end));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemlate</span> <span class="keyword">extends</span> <span class="title">Template</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt(i);j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isFlag) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">10</span>) &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200824162356.png" align="left"></li><li><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ul><li>数据库访问的封装</li><li>Junit单元测试</li><li>JavaWeb的Servlet中关于doGet/doPost方法调用</li><li>Hibernate中模板程序</li><li>Spring中JDBCTemlate、HibernateTemplate等</li></ul></li></ol><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>编写一个Employee类，声明为抽象类，包含如下三个属性：</p><p>name，id，salary。</p><p>提供必要的构造器和抽象方法：work()。</p><p>对于Manager类来说，他既是员工，还具有奖金（bonus）的属性。请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 编写一个Employee类，声明为抽象类，包含如下三个属性：</span></span><br><span class="line"><span class="comment"> * name，id，salary。</span></span><br><span class="line"><span class="comment"> * 提供必要的构造器和抽象方法：work()。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-24    9:59:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//工号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;<span class="comment">//薪资</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于Manager类来说，他既是员工，还具有奖金（bonus）的属性。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> bonus;<span class="comment">//奖金</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name,<span class="keyword">int</span> id,<span class="keyword">double</span> salary,<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,id,salary);</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员工，提高公司的运行效率&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;员工在一线车间生产产品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee manager = <span class="keyword">new</span> Manager(<span class="string">&quot;库克&quot;</span>,<span class="number">1001</span>,<span class="number">5000</span>,<span class="number">50000</span>);</span><br><span class="line">        manager.work();</span><br><span class="line">        </span><br><span class="line">        CommonEmployee commonEmployee = <span class="keyword">new</span> CommonEmployee();</span><br><span class="line">        commonEmployee.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200824153900.png" align="left"></li><li><p>编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，则将该雇员的工资增加100元。实验说明：</p><p>(1) 定义一个Employee类，该类包含：</p><ul><li>private成员变量name,number,birthday，其中birthday为MyDate类的对象；</li><li>abstract方法earnings()；</li><li>toString()方法输出对象的name,number和birthday。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise2;</span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><ul><li><p>定义一个Employee类，该类包含：</p><ul><li>private成员变量name,number,birthday，其中birthday为MyDate类的对象；</li></ul></li><li><p>abstract方法earnings()；</p><ul><li><p>toString()方法输出对象的name,number和birthday。</p></li><li><p>/<br>public abstract class Employee {</p><pre><code>private String name;private int number;private MyDate brithday;public Employee () &#123;</code></pre><p>  super();</p><pre><code>&#125;public Employee(String name,int number,MyDate birthday) &#123;    this.name = name;</code></pre><p>  this.number = number;</p><pre><code>    this.brithday = birthday;&#125;</code></pre></li></ul></li></ul></li></ol><pre><code>public String getName() &#123;          return name;&#125;      public void setName(String name) &#123;          this.name = name;      &#125;public int getNumber() &#123;          return number;      &#125;      public void setNumber(int number) &#123;    this.number = number;      &#125;public MyDate getBirthday() &#123;          return brithday;&#125;      public void setBrithday(MyDate brithday) &#123;    this.brithday = brithday;      &#125;public abstract double earnings();      @Overridepublic String toString() &#123;          return &quot;[name=&quot; + name + &quot;, number=&quot; + number + &quot;, brithday=&quot; + brithday.toDateString() + &quot;]&quot;;</code></pre><p>   }<br>   }</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">(2) MyDate类包含:</span><br><span class="line">   </span><br><span class="line">* private成员变量year,month,day；</span><br><span class="line">   * toDateString()方法返回日期对应的字符串：xxxx年xx月xx日</span><br><span class="line">   </span><br><span class="line">   &#96;&#96;&#96;java</span><br><span class="line">   package top.triabin._05exercise2;</span><br><span class="line">   &#x2F;*</span><br><span class="line">    *  MyDate类包含:</span><br><span class="line">    * private成员变量year,month,day；</span><br><span class="line">    * toDateString()方法返回日期对应的字符串：xxxx年xx月xx日</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public class MyDate &#123;</span><br><span class="line">       private int year;</span><br><span class="line">       private int month;</span><br><span class="line">       private int day;</span><br><span class="line">       </span><br><span class="line">       public MyDate(int year, int month, int day) &#123;</span><br><span class="line">           this.year &#x3D; year;</span><br><span class="line">           this.month &#x3D; month;</span><br><span class="line">           this.day &#x3D; day;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       public int getYear() &#123;</span><br><span class="line">           return year;</span><br><span class="line">       &#125;</span><br><span class="line">       public void setYear(int year) &#123;</span><br><span class="line">           this.year &#x3D; year;</span><br><span class="line">       &#125;</span><br><span class="line">       public int getMonth() &#123;</span><br><span class="line">           return month;</span><br><span class="line">       &#125;</span><br><span class="line">       public void setMonth(int month) &#123;</span><br><span class="line">           this.month &#x3D; month;</span><br><span class="line">       &#125;</span><br><span class="line">       public int getDay() &#123;</span><br><span class="line">           return day;</span><br><span class="line">       &#125;</span><br><span class="line">       public void setDay(int day) &#123;</span><br><span class="line">           this.day &#x3D; day;</span><br><span class="line">       &#125;</span><br><span class="line">       public String toDateString() &#123;</span><br><span class="line">           return year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   (3) 定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：</p><ul><li><p>private成员变量monthlySalary；</p></li><li><p>实现父类的抽象方法earnings(),该方法返回monthlySalary值；</p></li><li><p>toString()方法输出员工类型信息及员工的name，number,birthday。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：</span></span><br><span class="line"><span class="comment"> * private成员变量monthlySalary；</span></span><br><span class="line"><span class="comment"> * 实现父类的抽象方法earnings(),该方法返回monthlySalary值；</span></span><br><span class="line"><span class="comment"> * toString()方法输出员工类型信息及员工的name，number,birthday。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalariedEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> monthlySalary;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SalariedEmployee</span><span class="params">(String name,<span class="keyword">int</span> number,MyDate birthday,<span class="keyword">double</span> monthlySalary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,number,birthday);</span><br><span class="line">        <span class="keyword">this</span>.monthlySalary = monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">earnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SalariedEmployee &quot;</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMonthlySalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonthlySalary</span><span class="params">(<span class="keyword">double</span> monthlySalary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monthlySalary = monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：</p></li><li><p>private成员变量wage和hour；</p></li><li><p>实现父类的抽象方法earnings(),该方法返回wage*hour值；</p></li><li><p>toString()方法输出员工类型信息及员工的name，number,birthday。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：</span></span><br><span class="line"><span class="comment"> * private成员变量wage和hour；</span></span><br><span class="line"><span class="comment"> * 实现父类的抽象方法earnings(),该方法返回wage*hour值；</span></span><br><span class="line"><span class="comment"> * toString()方法输出员工类型信息及员工的name，number,birthday。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HourlyEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> hour;<span class="comment">//月工作小时数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> wage;<span class="comment">//时薪</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HourlyEmployee</span><span class="params">(String name,<span class="keyword">int</span> number,MyDate birthday,<span class="keyword">double</span> wage,<span class="keyword">double</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,number,birthday);</span><br><span class="line">        <span class="keyword">this</span>.wage = wage;</span><br><span class="line">        <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHour</span><span class="params">(<span class="keyword">double</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWage</span><span class="params">(<span class="keyword">int</span> wage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wage = wage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HourlyEmployee &quot;</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">earnings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wage * hour;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5) 定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday,以及该对象生日。当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</p></li><li><p>*提示：**</p></li><li><p>定义People类型的数组People c1[]=new People[10];</p></li><li><p>数组元素赋值</p><p>c1[0]=new People(“John”,”0001”,20);</p><p>c1[1]=new People(“Bob”,”0002”,19);</p></li><li><p>若People有两个子类Student和Officer，则数组元素赋值时，可以使父类类型的数组元素指向子类。</p><p>c1[0]=new Student(“John”,”0001”,20,85.0);</p><p>c1[1]=new Officer(“Bob”,”0002”,19,90.5);</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05exercise2;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/* 编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，</span></span><br><span class="line"><span class="comment"> *  则将该雇员的工资增加100元。</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。</span></span><br><span class="line"><span class="comment"> * 利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday。</span></span><br><span class="line"><span class="comment"> * 当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayrollSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方式一：控制台输入</span></span><br><span class="line"><span class="comment">//        Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;请输入当前月份：&quot;);</span></span><br><span class="line"><span class="comment">//        int month = scan.nextInt(); </span></span><br><span class="line"><span class="comment">//        scan.close();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：自动获取当前月份</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> month = calendar.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//1月份为0</span></span><br><span class="line">        </span><br><span class="line">        Employee[] emps = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">        emps[<span class="number">0</span>] = <span class="keyword">new</span> SalariedEmployee(<span class="string">&quot;Triabin&quot;</span>, <span class="number">1001</span>, <span class="keyword">new</span> MyDate(<span class="number">1998</span>,<span class="number">4</span>,<span class="number">2</span>),<span class="number">12000</span>);</span><br><span class="line">        emps[<span class="number">1</span>] = <span class="keyword">new</span> HourlyEmployee(<span class="string">&quot;DawnLee&quot;</span>, <span class="number">1002</span>, <span class="keyword">new</span> MyDate(<span class="number">1998</span>,<span class="number">8</span>,<span class="number">4</span>),<span class="number">60</span>,<span class="number">240</span>);</span><br><span class="line">        emps[<span class="number">2</span>] = <span class="keyword">new</span> SalariedEmployee(<span class="string">&quot;Trisolaran&quot;</span>, <span class="number">1003</span>, <span class="keyword">new</span> MyDate(<span class="number">1998</span>, <span class="number">4</span>, <span class="number">29</span>) , <span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; emps.length;i++) &#123;</span><br><span class="line">            System.out.println(emps[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;月工资为：&quot;</span> + emps[i].earnings());</span><br><span class="line">            <span class="keyword">if</span>(month == emps[i].getBirthday().getMonth()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;生日快乐！奖励100元。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825165534.png" align="left"></li></ul><h1 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p></li><li><p>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。</p></li><li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。<font color="red">继承是一个”是不是”的关系，而接口实现则是 “能不能” 的关系</font>。</p></li><li><p><font color="red">接口的本质是契约，标准，规范</font>，就像法律一样。指定好后大家都要遵守。</p></li><li><p>举例</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825170726.png" align="left"><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825170805.png" align="left"></li></ol><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><ol><li><p>使用interface来定义。</p></li><li><p>在Java语言中，接口和类是并列的两个结构。</p></li><li><p>如何定义接口：定义接口中的成员</p><p>① JDK7以前：只能定义全局常量和抽象方法</p><ul><li>全局常量：public static final的，但是书写时可以省略不写</li><li>抽象方法：public abstract的</li></ul><p>② JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法。（暂略）</p></li><li><p>接口中不能定义构造器，意味着接口不可以实例化。</p></li><li><p>Java开发中，接口通过让类去实现(implements)的方式来使用。</p><p>如果实现类覆盖了接口中所有抽象方法，则次实现类可以实例化；如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类。</p></li><li><p>Java类可以实现说个接口 —&gt; 弥补了Java单继承性的局限性。</p><p>格式：class  AA extends BB implements CC,DD,EE,…{}    先写继承，后写实现。</p></li><li><p>接口与接口之间可以继承，而且可以多继承。</p></li><li><p>接口的具体使用体现多态性。</p></li><li><p>接口实际上可以看做是一种规范。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接口的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Flyable.MAX_SPEED);</span><br><span class="line">        System.out.println(Flyable.MIN_SPEED);</span><br><span class="line"><span class="comment">//        Flyable.MIN_SPEED = 2;//The final field Flyable.MIN_SPEED cannot be assigned</span></span><br><span class="line">        </span><br><span class="line">        Plane plane = <span class="keyword">new</span> Plane();</span><br><span class="line">        plane.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line">    <span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;<span class="comment">//第一宇宙速度</span></span><br><span class="line">    <span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>;<span class="comment">//省略了public static final</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;<span class="comment">//省略了public abstract</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public Flyable() &#123;</span></span><br><span class="line"><span class="comment">//        //Interfaces cannot have constructors</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过引擎起飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;驾驶员减速停止&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kite</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Flyable</span>,<span class="title">Attackable</span>,<span class="title">CC</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//************************************</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CC</span> <span class="keyword">extends</span> <span class="title">AA</span>,<span class="title">BB</span></span>&#123;</span><br><span class="line">    <span class="comment">//多继承</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>面试题：抽象类与接口有哪些异同？</p></blockquote><h2 id="应用举例-1"><a href="#应用举例-1" class="headerlink" title="应用举例"></a>应用举例</h2><ol><li><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825201509.png" align="left"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接口的使用</span></span><br><span class="line"><span class="comment"> * 1. 接口使用上也满足多态。</span></span><br><span class="line"><span class="comment"> * 2. 接口，实际上就是定义了一种多态。</span></span><br><span class="line"><span class="comment"> * 3. 开发中，体会面向接口编程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USBTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        <span class="comment">//1. 创建了接口的非匿名实现类的非匿名对象</span></span><br><span class="line">        Flash flash = <span class="keyword">new</span> Flash();</span><br><span class="line">        computer.transferData(flash);</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//2. 创建了接口的非匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> Printer());</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//3. 创建了接口的匿名实现类的非匿名对象</span></span><br><span class="line">        USB phone = <span class="keyword">new</span> USB() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机结束工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        computer.transferData(phone);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 创建了接口的匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> USB() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3开始工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3结束工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferData</span><span class="params">(USB usb)</span> </span>&#123;<span class="comment">//USB usb = new Flash(); 接口的多态性</span></span><br><span class="line">        usb.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;具体传输数据的细节&quot;</span>);</span><br><span class="line">        usb.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="comment">//常量：定义了长、宽、最大最小的传输速率等</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机结束工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h2><ol><li><p>概述：代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825205225.png" align="left"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接口的应用：代理模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetWorkTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        ProxyServer proxyServer = <span class="keyword">new</span> ProxyServer(server);</span><br><span class="line">        proxyServer.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyServer</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NetWork work;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyServer</span><span class="params">(NetWork work)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.work = work;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;联网之前的一些检查工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        check();</span><br><span class="line">        work.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825211238.png" align="left"></li><li><p>应用场景：</p><ul><li><font color="blue">安全代理：</font>屏蔽对真实角色的直接访问。</li><li><font color="blue">远程代理：</font>通过代理类处理远程方法调用（RMI）。</li><li><font color="blue">延迟加载：</font>先加载轻量级的代理对象，真正需要再加载真实对象。比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。</li></ul></li><li><p>分类：</p><ul><li><font color="blue">静态代理</font>（静态定义代理类）</li><li><font color="blue">动态代理</font>（动态生成代理类）<ul><li>JDK自动的动态代理，需要反射等知识</li></ul></li></ul></li></ol><h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><h2 id="Java8中关于接口的改进"><a href="#Java8中关于接口的改进" class="headerlink" title="Java8中关于接口的改进"></a>Java8中关于接口的改进</h2><ul><li><p>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法。</p></li><li><p>Java 8中，你可以为接口添加<font color="blue">静态方法</font>和<font color="blue">默认方法</font>。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p></li><li><p><strong>静态方法：</strong>使用<font color="red">static</font>关键字修饰。<font color="red">可以通过接口直接调用静态方法</font>，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的接口和类。</p></li><li><p><strong>默认方法：</strong>默认方法使用<font color="red">default</font>关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompareA</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CompareA：北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CompareA：上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;<span class="comment">//public可省略</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CompareA：上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompareB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;<span class="comment">//public可省略</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CompareB：上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperClass：北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06interface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line"><span class="comment">//        s.method1();</span></span><br><span class="line">        <span class="comment">//知识点1：接口中定义的静态方法只能通过接口来调用。</span></span><br><span class="line">        CompareA.method1();</span><br><span class="line">        <span class="comment">//知识点2：通过实现类的对象，可以调用接口中的默认方法</span></span><br><span class="line">        <span class="comment">//实现类可以重写接口中的默认方法</span></span><br><span class="line">        s.method2();</span><br><span class="line">        <span class="comment">//知识点3：如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的默认方法，那么</span></span><br><span class="line">        <span class="comment">//子类在没有重写此方法的情况下，默认调用的是父类中同名同参数的默认方法。(类优先原则)</span></span><br><span class="line">        <span class="comment">//知识点4：如果子类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现</span></span><br><span class="line">        <span class="comment">//类没有重写此方法的情况下，报错。(接口冲突)</span></span><br><span class="line">        <span class="comment">//这就需要我们在实现类中重写此方法</span></span><br><span class="line">        s.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> <span class="keyword">implements</span> <span class="title">CompareA</span>,<span class="title">CompareB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubClass：上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubClass：深圳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//知识点5：如何在子类（或实现类）的方法中调用父类、接口中被重写的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method3();<span class="comment">//自己定义的重写方法</span></span><br><span class="line">        <span class="keyword">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">        <span class="comment">//调用接口中默认的方法</span></span><br><span class="line">        CompareA.<span class="keyword">super</span>.method3();</span><br><span class="line">        CompareB.<span class="keyword">super</span>.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825232655.png" align="left"></li></ul><h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>面试题：排错1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(x);<span class="comment">//The field x is ambiguous.</span></span><br><span class="line">        <span class="comment">//改正：</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.x);<span class="comment">//调用父类中的x=1</span></span><br><span class="line">        System.out.println(A.x);<span class="comment">//调用接口中的x=0</span></span><br><span class="line">        <span class="comment">//如果不重名，可直接写相应名称即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面试题：排错2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Playable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bounceable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Rollable</span> <span class="keyword">extends</span> <span class="title">Playable</span>,<span class="title">Bounceable</span></span>&#123;</span><br><span class="line">    Ball ball = <span class="keyword">new</span> Ball(<span class="string">&quot;PingPang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">implements</span> <span class="title">Rollable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ball = <span class="keyword">new</span> Ball(<span class="string">&quot;Football&quot;</span>);<span class="comment">//ball前面省略了public static final，是一个常量，不能再次赋值修改。</span></span><br><span class="line">        System.out.println(ball.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>① 定义一个接口来实现两个对象的比较。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CompareObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;<span class="comment">//若返回值是0，代表相等，代表当前对象大；负数代表当前对象小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 定义一个Circle类，声明radius属性，提供getter和setter方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06exercise3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个Circle类，声明radius属性，提供getter和setter方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Double radius;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(Double radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(Double radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 定义一个CompareableCircle类，继承Circle类并且实现CompareObject接口。在CompareableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06exercise3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个CompareableCircle类，继承Circle类并且实现CompareObject接口。</span></span><br><span class="line"><span class="comment"> * 在CompareableCircle类中给出接口中方法compareTo的实现体，用来比较两</span></span><br><span class="line"><span class="comment"> * 个圆的半径大小。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareableCircle</span> <span class="keyword">extends</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">CompareObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompareableCircle</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(radius);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> CompareableCircle) &#123;</span><br><span class="line">            CompareableCircle c = (CompareableCircle)o;</span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            if(this.getRadius() &gt; c.getRadius()) &#123;</span></span><br><span class="line"><span class="comment">//                return 1;</span></span><br><span class="line"><span class="comment">//            &#125;else if(this.getRadius() &lt; c.getRadius()) &#123;</span></span><br><span class="line"><span class="comment">//                return -1;</span></span><br><span class="line"><span class="comment">//            &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：当属性radius声明为Double类型时，可以调用包装类方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getRadius().compareTo(c.getRadius());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CompareObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;<span class="comment">//若返回值是0，代表相等，正数代表当前对象大；负数代表当前对象小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 定义一个测试类InterfaceTest，创建两个CompareableCircle对象，调用compareTo方法比较两个类的半径大小。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06exercise3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个测试类InterfaceTest，创建两个CompareableCircle对象，调用compareTo方法</span></span><br><span class="line"><span class="comment"> * 比较两个类的半径大小。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CompareableCircle c1 = <span class="keyword">new</span> CompareableCircle(<span class="number">3.4</span>);</span><br><span class="line">        CompareableCircle c2 = <span class="keyword">new</span> CompareableCircle(<span class="number">3.6</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> compareValue = c1.compareTo(c2);</span><br><span class="line">        <span class="keyword">if</span>(compareValue &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;c1半径比c2大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compareValue &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;c2半径比c1大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compareValue == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;c1和c2一样大&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200825224408.png" align="left"><p><font color="purple">⑤ 思考：参照上述做法定义矩形类Rectangle和CompareableRectangle类，在CompareableRectangle类中给出compareTo方法的实现，比较两个矩形的面积大小。</font></p></li><li><p>接口冲突的解决方式。</p><p>若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现：<strong>接口冲突</strong>。</p><ul><li>解决办法：实现类必须覆盖接口中同名同参数的方法，来解决冲突。</li></ul><p>若一个接口中定义了一个默认方法，而父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。因为此时遵守：类优先原则。接口中具有相同名称和参数的默认方法会被忽略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filial</span></span>&#123;<span class="comment">//孝顺的</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老妈，我来救你了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Spoony</span></span>&#123;<span class="comment">//痴情的</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;媳妇，别怕，我来了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Filial</span>,<span class="title">Spoony</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我该怎么办？&quot;</span>);</span><br><span class="line">        Filial.<span class="keyword">super</span>.help();</span><br><span class="line">        Spoony.<span class="keyword">super</span>.help();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="类的成员之五：内部类"><a href="#类的成员之五：内部类" class="headerlink" title="类的成员之五：内部类"></a>类的成员之五：内部类</h1><ol><li><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类。</p></li><li><p>内部类的分类：成员内部类（静态、非静态） vs 局部内部类（方法内、代码块内、构造器内）。</p></li><li><p>成员内部类：</p><p>一方面，作为外部类的成员：</p><ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ul><p>另一方面，作为一个类：</p><ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>可以被abstract修饰</li></ul></li><li><p>关注如下3个问题：</p><p>① 如何实例化成员内部类</p><p>② 如何在成员内部类中区分调用外部类的结构</p><p>③ 开发中局部内部类的使用 见《InnerClassTest1.java》</p></li><li><p>fad</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._07innerclass;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 类的内部成员之五：内部类 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Dog实例（静态的成员内部类）：</span></span><br><span class="line">        Person.Dog dog = <span class="keyword">new</span> Person.Dog();</span><br><span class="line">        dog.show();</span><br><span class="line">        <span class="comment">//创建Bird实例（非静态的成员内部类）：</span></span><br><span class="line"><span class="comment">//        Person.Bird bird = new Person.Bird();//错误的</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Person.Bird bird = p.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">        bird.sing();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        bird.display(<span class="string">&quot;形参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人：吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">        <span class="comment">//静态成员内部类</span></span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;卡拉是条狗&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">        <span class="comment">//非静态成员内部类</span></span><br><span class="line">        String name = <span class="string">&quot;内部类&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;唱歌&quot;</span>);</span><br><span class="line">            Person.<span class="keyword">this</span>.eat();<span class="comment">//调用外部类的非静态属性</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">            System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line">            <span class="comment">//局部内部类</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//局部内部类(代码块内)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line">            <span class="comment">//局部内部类(构造器内)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._07innerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开发中很少见</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="章节练习及面试题"><a href="#章节练习及面试题" class="headerlink" title="章节练习及面试题"></a>章节练习及面试题</h1><h2 id="main-方法"><a href="#main-方法" class="headerlink" title="main()方法"></a>main()方法</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String foo = args[<span class="number">1</span>];</span><br><span class="line">        String bar = args[<span class="number">2</span>];</span><br><span class="line">        String baz = args[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>D:\&gt;java Test Red Green Blue</p></blockquote><p>what is the value of baz?</p><p>​    A. baz has value of “” </p><p>​    B. baz has value of null</p><p>​    C. baz has value of “Red” </p><p>​    D. baz has value of “Blue” </p><p>​    E. baz has value of “Green” </p><p>​    F. the code does not compile </p><p>​    G. the program throw an exception</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h3><ol><li><p>下面关于接口的说法中不正确的是（）。</p><p>A．接口中所有的方法都是抽象的</p><p>B．接口中所有的方法都是public访问权限</p><p>C．子接口继承父接口所用的关键字是implements</p><p>D．接口是Java中的特殊类，包含常量和抽象方法</p></li><li><p>Java语言接口间的继承关系是（）。</p><p>A．单继承    B．多重继承    C．不能继承    D．不一定</p></li><li><p>一个类实现接口的情况是（）。</p><p>A．一次可以实现多个接口    B．一次只能实现一个接口</p><p>C．不能实现接口    D．不一定</p></li></ol><h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h3><ol><li>____是声明接口的关键字，可以把它看成一个特殊类。接口中的数据成员默认的修饰符是_____，接口中的成员方法默认的修饰符是____。</li><li>如果实现某接口的类不是abstract的抽象类，则在类的定义部分必须该接口的所有抽象方法；如果实现某接口的类是abstract的抽象类，则它可以该接口所有的方法。但是对于这个抽象类任何一个非抽象的子类而言，它们父类所实现的接口中的所有抽象方法以及自身所实现接口中的抽象方法都必须有实在的。</li></ol><h3 id="补全代码"><a href="#补全代码" class="headerlink" title="补全代码"></a>补全代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 补足代码；调用两个函数，要求用匿名内部类</span></span><br><span class="line">        Inter in = <span class="keyword">new</span> Inter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        in.show(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        in.func();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="abstract-class和interface有什么区别？"><a href="#abstract-class和interface有什么区别？" class="headerlink" title="abstract class和interface有什么区别？"></a>abstract class和interface有什么区别？</h3><p>答：声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向某具体子类的一个实例。不能有抽象构造函数或抽象静态方法。abstract类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类。取而代之，在子类中实现该方法。知道其行为的其他类可以在类中实现这些方法。</p><p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p><h3 id="接口是否可继承接口？抽象类是否可实现（implements）接口？抽象类是否可继承实体类（concrete-class）？"><a href="#接口是否可继承接口？抽象类是否可实现（implements）接口？抽象类是否可继承实体类（concrete-class）？" class="headerlink" title="接口是否可继承接口？抽象类是否可实现（implements）接口？抽象类是否可继承实体类（concrete class）？"></a>接口是否可继承接口？抽象类是否可实现（implements）接口？抽象类是否可继承实体类（concrete class）？</h3><p>答：是，接口可继承接口。抽象类可以实现（implements）接口，抽象类可以继承实体类，但实体类必须不能是如下两种情况之一：①final修饰符修饰的类是不能的；②如果此实体类有且仅有私有的构造函数也是不能的。</p><h3 id="是否能通过编译？"><a href="#是否能通过编译？" class="headerlink" title="是否能通过编译？"></a>是否能通过编译？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">A</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> x =<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(x);  <span class="comment">//super.x   A.x</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> C().pX();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：不能。在编译时会发生错误，错误描述不同的JVM有不同的信息，意思就是未明确的x调用，两个x都匹配（就像同时import java.util和java.sql两个包时直接声明Date一样）。</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章面向对象编程（中）</title>
      <link href="/2020/08/11/%E7%AC%AC5%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2020/08/11/%E7%AC%AC5%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="OOP特征二：继承性"><a href="#OOP特征二：继承性" class="headerlink" title="OOP特征二：继承性"></a>OOP特征二：继承性</h1><h2 id="继承性的好处"><a href="#继承性的好处" class="headerlink" title="继承性的好处"></a>继承性的好处</h2><ol><li>减少代码冗余，提高了代码的复用性；</li><li>便于功能的扩展；</li><li>为之后多态性的使用，提供了前提。</li></ol><h2 id="继承性的格式：class-A-extends-B"><a href="#继承性的格式：class-A-extends-B" class="headerlink" title="继承性的格式：class A extends B{}"></a>继承性的格式：class A extends B{}</h2><ol><li><p>A：子类、派生类、subclass</p></li><li><p>B：父类、超类、基类、superclass</p></li><li><p>体现：一旦子类A继承父类B后，子类A就获取了父类B中所有的属性和方法。</p></li><li><p>特别地：父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构，只是因为封装性的影响，使得子类不能直接调用父类的结构而已。</p></li><li><p>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展，扩展。</p></li></ol><h2 id="Java中关于继承性的规定"><a href="#Java中关于继承性的规定" class="headerlink" title="Java中关于继承性的规定"></a>Java中关于继承性的规定</h2><ol><li>一个类可以被多个子类继承；</li><li>Java中类的单继承性：一个类只能有一个父类；</li><li>子类是相对概念；</li><li>子类直接继承的父类称为直接父类，间接继承的父类称为间接父类；</li><li>子类继承父类以后就获取了直接父类以及所有间接父类声明的属性和方法。</li></ol><h2 id="java-lang-Object类的理解"><a href="#java-lang-Object类的理解" class="headerlink" title="java.lang.Object类的理解"></a>java.lang.Object类的理解</h2><ol><li>如果没有显式地声明一个类的父类的话，则此类继承于java.lang.Object类；</li><li>所有的Java类（除java.lang.Object类之外都直接或间接的继承于java.lang.Object类；</li><li>意味着，所有的Java类具java.lang.Object类声明的功能。</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>定义一个学生类Student，它继承自Person类。</p><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>name:String<br>sex:char<br>age:int</td></tr><tr><td><u>+Person(name:String sex:char age:int)</u><br>+toString():String</td></tr></tbody></table><p>^</p><p>|</p><table><thead><tr><th>Student</th></tr></thead><tbody><tr><td>number:long<br>math:int<br>english:int<br>computer:int</td></tr><tr><td><u>+Student(n:String s:char a:int k:long m:int e:int c:int)</u><br>+aver():double<br>+max():int<br>+min():int<br>+toString():String</td></tr></tbody></table><p>(1) Person类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">char</span> sex,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name: &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\nsex: &quot;</span> + <span class="keyword">this</span>.sex + <span class="string">&quot;\nage: &quot;</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> number;</span><br><span class="line">    <span class="keyword">int</span> math;</span><br><span class="line">    <span class="keyword">int</span> english;</span><br><span class="line">    <span class="keyword">int</span> computer;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n,<span class="keyword">char</span> s,<span class="keyword">int</span> a,<span class="keyword">long</span> k,<span class="keyword">int</span> m,<span class="keyword">int</span> e,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n,s,a);</span><br><span class="line">        <span class="keyword">this</span>.number = k;</span><br><span class="line">        <span class="keyword">this</span>.math = m;</span><br><span class="line">        <span class="keyword">this</span>.english = e;</span><br><span class="line">        <span class="keyword">this</span>.computer = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">long</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnglish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComputer</span><span class="params">(<span class="keyword">int</span> computer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = computer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">aver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.math + <span class="keyword">this</span>.english + <span class="keyword">this</span>.computer) / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (((<span class="keyword">this</span>.math &gt; <span class="keyword">this</span>.english)? <span class="keyword">this</span>.math : <span class="keyword">this</span>.english) &gt; <span class="keyword">this</span>.computer)? ((<span class="keyword">this</span>.math &gt; <span class="keyword">this</span>.english)? <span class="keyword">this</span>.math : <span class="keyword">this</span>.english) : <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minValue = (<span class="keyword">this</span>.math &lt; <span class="keyword">this</span>.english)? <span class="keyword">this</span>.math : <span class="keyword">this</span>.english;</span><br><span class="line">        minValue = (minValue &lt; <span class="keyword">this</span>.computer)? minValue : <span class="keyword">this</span>.computer;</span><br><span class="line">        <span class="keyword">return</span> minValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name: &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\nsex: &quot;</span> + <span class="keyword">this</span>.sex + <span class="string">&quot;\nage: &quot;</span> + <span class="keyword">this</span>.age + <span class="string">&quot;\nnumber: &quot;</span> + <span class="keyword">this</span>.number + <span class="string">&quot;\nmath=&quot;</span> + <span class="keyword">this</span>.math + <span class="string">&quot;\nEnglish=&quot;</span> + <span class="keyword">this</span>.english +<span class="string">&quot;\ncomputer=&quot;</span> + <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>（1）定义一个ManKind类，包括</p><ul><li>成员变量int sex和int salary；</li><li>方法void mainOrWoman()：根据sex的值显式“man“（sex==1）或者“woman”（sex==0）；</li><li>方法void employeed()：根据salary的值显示“nojob”（salary==0）或者“job”（salary==1）。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManKind</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;<span class="comment">//工作状</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManKind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManKind</span><span class="params">(<span class="keyword">int</span> sex, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manOrWoman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sex == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;woman&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sex == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">employeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        if(salary == 0) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;no job&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;else if(salary == 1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;job&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;//或者</span></span><br><span class="line">        System.out.println((salary == <span class="number">0</span>)? <span class="string">&quot;no job&quot;</span> : <span class="string">&quot;job&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）定义类Kids继承ManKind，并包括</p><ul><li>成员变量int yearsOld；</li><li>方法printAge()打印yearsOld的值。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kids</span> <span class="keyword">extends</span> <span class="title">ManKind</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> yearsOld;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Kids</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Kids</span><span class="params">(<span class="keyword">int</span> sex,<span class="keyword">int</span> salary,<span class="keyword">int</span> yearsOld)</span> </span>&#123;</span><br><span class="line">        setSex(sex);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">        <span class="keyword">this</span>.yearsOld = yearsOld;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYearsOld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yearsOld;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYearsOld</span><span class="params">(<span class="keyword">int</span> yearsOld)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.yearsOld = yearsOld;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am &quot;</span> + yearsOld + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）定义类KidsTest，在类的main方法中实例化Kids的对象someKid，用该对象访问其父类的成员变量及方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KidsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Kids someKid = <span class="keyword">new</span> Kids(<span class="number">1</span>,<span class="number">0</span>,<span class="number">18</span>);</span><br><span class="line">        someKid.manOrWoman();</span><br><span class="line">        someKid.employeed();</span><br><span class="line">        someKid.printAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据下图实现类。在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径个高，并输出圆柱的体积。</p><table><thead><tr><th>Circle（圆）</th></tr></thead><tbody><tr><td>-redius:double</td></tr><tr><td>Circle():构造器，将radius初始化为1</td></tr><tr><td>+setRadius(double radius):void<br>+getRadius():double<br>+findArea():double 计算圆的面积</td></tr></tbody></table><p>^</p><p>|</p><table><thead><tr><th>Cylinder（圆柱）</th></tr></thead><tbody><tr><td>-length:double</td></tr><tr><td>Cylinder():构造器，将length属性初始化为1</td></tr><tr><td>+setLength(double length):void<br>+getLength():double<br>+findVolueme():double 计算圆柱体积</td></tr></tbody></table><p>①Circle类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②Cylinder类、</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cylinder</span> <span class="keyword">extends</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cylinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findVolueme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findArea() * length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③CylinderTest测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trisbin.inheritanceex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CylinderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cylinder cy = <span class="keyword">new</span> Cylinder();</span><br><span class="line">        </span><br><span class="line">        cy.setRadius(<span class="number">7</span>);</span><br><span class="line">        cy.setLength(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">double</span> area = cy.findArea();</span><br><span class="line">        <span class="keyword">double</span> volueme = cy.findVolueme();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;此圆柱底面积 = &quot;</span> + area);</span><br><span class="line">        System.out.println(<span class="string">&quot;此圆柱体积 = &quot;</span> + volueme);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20201002133513.png" align="left"></li></ol><h2 id="Debug（调试）"><a href="#Debug（调试）" class="headerlink" title="Debug（调试）"></a>Debug（调试）</h2><h2 id="如何调试程序"><a href="#如何调试程序" class="headerlink" title="如何调试程序"></a>如何调试程序</h2><ol><li><p>System.out.println()；</p></li><li><p>Eclipse - Debug</p><ul><li>设置断点（可设置多个断点）</li><li>debug as java application</li><li>常用操作</li></ul><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>step into 跳入（F5）</td><td>进入当前所调用的方法中</td></tr><tr><td>step over 跳过（F6）</td><td>执行完当前语句进入下一行</td></tr><tr><td>step return 跳回（F7）</td><td>执行完当前所在方法，进入下一行</td></tr><tr><td>drop to frame</td><td>回到当前行所在方法的第一行</td></tr><tr><td>resume 恢复</td><td>执行完当前所在断点的所有代码，进入下一个断点，如果没有就结束</td></tr><tr><td>Terminate 终止</td><td>停止JVM，后面的程序不会再执行</td></tr></tbody></table></li></ol><h1 id="方法的重写（override-overwrite）"><a href="#方法的重写（override-overwrite）" class="headerlink" title="方法的重写（override/overwrite）"></a>方法的重写（override/overwrite）</h1><h2 id="概念及使用"><a href="#概念及使用" class="headerlink" title="概念及使用"></a>概念及使用</h2><ol><li><p>重写：在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在执行程序时，子类的方法将覆盖父类的方法。</p></li><li><p>应用：重写以后，当创建子类对象以后，通过子类对象调用父类中的同名参数的方法时，实际执行的是子类重写父类的方法。</p></li><li><p>重写规定：</p><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{</p><p>​                            //方法体</p><p>​                        }</p><p>约定俗成：子类中的叫重写的方法，父类中的叫被重写的方法</p><ul><li>重写与被重写方法名以及形参列表相同</li><li>重写重写方法的权限修饰符必须不小于被重写方法的权限修饰符<ul><li>特殊情况：子类不能重写父类中权限为private的方法</li></ul></li><li>返回值类型：<ul><li>父类被重写方法的返回值类型是void，则子类重写方法的返回值类型只能是void；</li><li>父类被重写方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类；</li><li>父类被重写方法的返回值类型是基本数据类型（比如double），则子类重写的方法的返回值类型必须是相同的基本数据类型（必须也是double）；</li></ul></li><li>子类重新写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。（具体放到异常处理再讲）</li></ul></li></ol><ul><li>子类和父类中同名同参数的要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.override;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法重写练习--父类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    15:19:55</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">(<span class="keyword">int</span> distance)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走路，走的距离是&quot;</span> + distance + <span class="string">&quot;公里。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.override;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法重写练习--子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    15:24:49</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String major;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String major)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习。专业是：&quot;</span> + major);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对父类中的eat()方法重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生应该多吃有营养的事食物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.override;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法重写练习--测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    15:28:22</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;计算机科学与技术&quot;</span>);</span><br><span class="line">        s.eat();</span><br><span class="line">        s.walk(<span class="number">10</span>);</span><br><span class="line">        s.study();</span><br><span class="line">        </span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>面试题：区分方法的重载与重写   <font color="draw">高频题</font></p><p>答：</p><p>① 二者概念：</p><p>② 重载和重写的具体规则：</p><p>③ 重载不表现为多态性，重写表现为多态性。</p></blockquote><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><ol><li><p>如果现在父类的一个方法定义成private访问权限，在子类中将此方法声明为default访问权限，那么这样还叫重写吗？</p><p>NO</p></li><li><p>修改上一节OOP特征二：继承性练习题第2题中定义的类Kids，在Kids中重新定义employeed()方法，覆盖父类ManKind中定义的employeed()方法，输出“Kids should study and no job.”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接在子类Kids中重写该类如下：</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">employeed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Kids should study and no job.&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h1><ol><li><p>Java权限修饰符public、protected、 (缺省)、 private置于<font color="red">类的成员</font>定义前，用来限定对象对该类成员的访问权限。</p><table><thead><tr><th align="center">修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">Yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">（缺省）</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><font color="red">protected</font></td><td align="center"><font color="red">Yes</font></td><td align="center"><font color="red">Yes</font></td><td align="center"><font color="red">Yes</font></td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table><p>对于class的权限修饰只能用public和default（缺省）。</p><ul><li><p>public类可以在任意地方被访问</p></li><li><p>default类只可以被同一个包内部的类访问</p></li></ul></li><li><p>访问控制举例</p><p>创建一个Order类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.fourpermissionmodifiers;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 体会4种不同的权限修饰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    18:23:20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderPrivate;</span><br><span class="line">    <span class="keyword">int</span> orderDefault;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> orderProtected;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> orderPublic;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodPrivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderPrivate = <span class="number">1</span>;</span><br><span class="line">        orderDefault = <span class="number">1</span>;</span><br><span class="line">        orderProtected = <span class="number">1</span>;</span><br><span class="line">        orderPublic = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderPrivate = <span class="number">2</span>;</span><br><span class="line">        orderDefault = <span class="number">2</span>;</span><br><span class="line">        orderProtected = <span class="number">2</span>;</span><br><span class="line">        orderPublic = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">methodProtected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderPrivate = <span class="number">3</span>;</span><br><span class="line">        orderDefault = <span class="number">3</span>;</span><br><span class="line">        orderProtected = <span class="number">3</span>;</span><br><span class="line">        orderPublic = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodPublic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderPrivate = <span class="number">4</span>;</span><br><span class="line">        orderDefault = <span class="number">4</span>;</span><br><span class="line">        orderProtected = <span class="number">4</span>;</span><br><span class="line">        orderPublic = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①同一个包中的其他类，不可以调用Order类中私有的属性、方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.fourpermissionmodifiers;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 4种不同的权限修饰测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    18:30:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        </span><br><span class="line">        order.orderDefault = <span class="number">2</span>;</span><br><span class="line">        order.orderProtected = <span class="number">3</span>;</span><br><span class="line">        order.orderPublic = <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line">        order.methodDefault();</span><br><span class="line">        order.methodProtected();</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        同一个包中的其他类，不可以调用Order类中私有的属性、方法</span></span><br><span class="line"><span class="comment">//        order.orderPrivate = 1;</span></span><br><span class="line"><span class="comment">//        order.methodPrivate();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②在不同包的子类中，不能调用Order类中声明为private和缺省权限的属性、方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.fourpermissionmodifiers.suborder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.fourpermissionmodifiers.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOrder</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderProtected = <span class="number">1</span>;</span><br><span class="line">        orderPublic = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        methodProtected();</span><br><span class="line">        methodPublic();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        在不同包的子类中，不能调用Order类中声明为private和缺省权限的属性、方法。</span></span><br><span class="line"><span class="comment">//        orderDefault = 3;</span></span><br><span class="line"><span class="comment">//        orderPrivate = 4;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//        methodDefault();</span></span><br><span class="line"><span class="comment">//        methodPrivate();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③不同包下的普通类（非子类）要使用Order类，不可以调用声明为private、缺省、protected权限的属性、方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.fourpermissionmodifiers.suborder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.fourpermissionmodifiers.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.orderPublic = <span class="number">1</span>;</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        不同包下的普通类（非子类）要使用Order类，不可以调用声明为private、缺省、protected权限的属性、方法。</span></span><br><span class="line"><span class="comment">//        order.orderPrivate = 2;</span></span><br><span class="line"><span class="comment">//        order.orderDefault = 3;</span></span><br><span class="line"><span class="comment">//        order.orderProtected = 4;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//        order.methodPrivate();</span></span><br><span class="line"><span class="comment">//        order.methodDefault();</span></span><br><span class="line"><span class="comment">//        order.methodProtected();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="关键字：super"><a href="#关键字：super" class="headerlink" title="关键字：super"></a>关键字：super</h1><h2 id="super关键字的使用"><a href="#super关键字的使用" class="headerlink" title="super关键字的使用"></a>super关键字的使用</h2><ol><li><p>super理解为：父类</p></li><li><p>super可以用来调用：属性、方法、构造器；</p></li><li><p>super的使用：调用属性和方法</p><p>①我们可以在子类的方法或构造器中，通过使用“super.属性”或“super.方法”的方式，显示的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略“super.”；</p><p>②特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须是显示的使用“super.属性”的方式，表明调用的是父类中声明的属性；</p><p>③特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须是显示的使用“super.方法”的方式，表明调用的是父类中被重写的方法。</p></li><li><p>super的使用：调用构造器</p><p>①我们可以在子类的构造器中显式的使用“super(形参列表)”的方式，调用父类中声明的构造器；</p><p>②“super(形参列表)”的使用，必须声明在子类构造器的首行；</p><p>③我们在类的构造器中，针对于“this(形参列表)”或“super(形参列表)”只能二选一，不能同时出现</p><p>④在子类构造器的首行，没有显示的声明“this(形参列表)”或“super(形参列表)”，则默认调用父类中空参的构造器：super()；</p><p>⑤在类的多个构造器中，至少有一个类的构造器中是用来了“super(形参列表)”，调用父类中的构造器。</p></li></ol><h2 id="super关键字举例"><a href="#super关键字举例" class="headerlink" title="super关键字举例"></a>super关键字举例</h2><ol><li><p>父类Person</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordsuper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1001</span>;<span class="comment">//身份证号</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在构造器的首行没有显示的声明“this(形参列表)”或“super(形参列表)”，则默认调用父类中空参的构造器：super()。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人：吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人：走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类Student</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordsuper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String major;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1002</span>;<span class="comment">//学号</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String major)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String major)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line">        <span class="keyword">super</span>(name,age);<span class="comment">//调用父类中形参列表相同的构造器</span></span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生：多吃有营养的食物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生：学习知识&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.eat();</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;,age = &quot;</span> + <span class="keyword">super</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + <span class="keyword">this</span>.id);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + <span class="keyword">super</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类SuperTest</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordsuper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> super关键字的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-14    22:10:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        s.study();</span><br><span class="line">        </span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;Triabin&quot;</span>,<span class="number">18</span>,<span class="string">&quot;IT&quot;</span>);</span><br><span class="line">        s1.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;****************************&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200815231303.png" align="left"></li></ol><h1 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h1><ol><li>从结果上来看：（继承性）<ul><li>子类继承父类以后，就获取了父类中声明的属性和方法；</li><li>创建的子类的对象，在堆空间中，就会加载所有父类中声明的属性。</li></ul></li><li>从过程上来看：<ul><li>但我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类构造器，进而调用父类的父类的构造器，直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类结构，所以才可以看到内存中有父类中的结构，子类对象才可以调用。</li></ul></li></ol><ul><li>明确：虽然创建子类对象时，调用了父类的构造器，但自始至终就创建过一个对象，即为new的子类对象。</li></ul><h2 id="实验：类的继承-amp-super"><a href="#实验：类的继承-amp-super" class="headerlink" title="实验：类的继承&amp;super"></a>实验：类的继承&amp;super</h2><ol><li><p>写一个名为Account的类模拟账户。该类的属性和方法如下图所示。该类包括的属性： 账号id，余额 balance，年利率annualInterestRate；包含的方法：访问器方法（getter和setter方法），返回月利率的方法getMonthlyInterest()，取款方法withdraw()，存款方法deposit()。</p><table><thead><tr><th>Account</th></tr></thead><tbody><tr><td>private int id<br>private double balance<br>private double annualInterestRate</td></tr><tr><td><u>public Account(int id,double balance,double annualInterestRate)</u><br>public int getId()<br>public double getBalance()<br>public double getAnnualInterestRate()<br>public void setId( int id)<br>public void setBalance(double balance)<br>public void setAnnualInterestRate(double annualInterestRate)<br>public double getMonthlyInterest()<br>public void withdraw (double amount)<br>public void deposit (double amount)</td></tr></tbody></table></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experimentsuperinheritance;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 继承性&amp;super实验一--Account类</span></span><br><span class="line"><span class="comment"> *     写一个名为 Account 的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：</span></span><br><span class="line"><span class="comment"> *    账号 id，余额 balance，年利率 annualInterestRate；包含的方法：访问器方法（getter 和</span></span><br><span class="line"><span class="comment"> *    setter 方法），返回月利率的方法 getMonthlyInterest()，取款方法 withdraw()，存款方法</span></span><br><span class="line"><span class="comment"> *    deposit()。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-15    23:29:57</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;<span class="comment">//余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> annualInterestRate;<span class="comment">//年利率</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">double</span> balance,<span class="keyword">double</span> annualInterestRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        <span class="keyword">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAnnualInterestRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnnualInterestRate</span><span class="params">(<span class="keyword">double</span> annualInterestRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回月利率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMonthlyInterest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate / <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取款</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足！\n您的账户余额为：&quot;</span> + balance);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(amount &gt; <span class="number">0</span> &amp;&amp; amount &lt; balance) &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款成功！\n您的账户余额为：&quot;</span> + balance);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款金额不能为负！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存款</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功存入金额：&quot;</span> + amount + <span class="string">&quot;\n您的账户余额为：&quot;</span> + balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个用户程序测试 Account 类。在用户程序中，创建一个账号为 1122、余额为 20000、 年利率 4.5%的 Account 对象。使用 withdraw 方法提款 30000 元，并打印余额。 再使用 withdraw 方法提款 2500 元，使用 deposit 方法存款 3000 元，然后打印余额和月利 率。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experimentsuperinheritance;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 继承性&amp;super实验一--测试类1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-15    23:48:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">1122</span>,<span class="number">20000</span>,<span class="number">4.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;账号：&quot;</span> + account.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;余额：&quot;</span> + account.getBalance());</span><br><span class="line">        System.out.println(<span class="string">&quot;年利率：&quot;</span> + account.getAnnualInterestRate() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        account.withdraw(<span class="number">30000</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        account.withdraw(<span class="number">2500</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        account.deposit(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;月利率为：&quot;</span> + account.getMonthlyInterest() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200816161830.png" align="left"><ol start="2"><li><p>如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experimentsuperinheritance;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 继承性&amp;super实验一--CheckAccount类</span></span><br><span class="line"><span class="comment"> *     创建 Account 类的一个子类 CheckAccount 代表可透支的账户，该账户中定义一个</span></span><br><span class="line"><span class="comment"> *     属性overdraft 代表可透支限额。在 CheckAccount 类中重写 withdraw 方法，其算法如下：</span></span><br><span class="line"><span class="comment"> *         如果（取款金额&lt;账户余额），</span></span><br><span class="line"><span class="comment"> *         可直接取款</span></span><br><span class="line"><span class="comment"> *        如果（取款金额&gt;账户余额），</span></span><br><span class="line"><span class="comment"> *        计算需要透支的额度</span></span><br><span class="line"><span class="comment"> *        判断可透支额 overdraft 是否足够支付本次透支需要，如果可以</span></span><br><span class="line"><span class="comment"> *        将账户余额修改为 0，冲减可透支金额</span></span><br><span class="line"><span class="comment"> *        如果不可以</span></span><br><span class="line"><span class="comment"> *        提示用户超过可透支额的限额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-16    15:22:42</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckAccount</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> overdraft;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheckAccount</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">double</span> balance,<span class="keyword">double</span> annualInterestRate,<span class="keyword">double</span> overdraft)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id,balance,annualInterestRate);</span><br><span class="line">        <span class="keyword">this</span>.overdraft = overdraft;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getBalance() &gt;= amount &amp;&amp; amount &gt; <span class="number">0</span>) &#123;<span class="comment">//余额足够消费</span></span><br><span class="line">            setBalance(getBalance() - amount);<span class="comment">//或</span></span><br><span class="line"><span class="comment">//            super.withdraw(amount);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;取款成功！\n您的账户余额为：&quot;</span> + getBalance() + <span class="string">&quot;\n您的账户可透支额度为：&quot;</span> + overdraft);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(overdraft &gt;= amount - getBalance()) &#123;<span class="comment">//透支额度+余额足够消费</span></span><br><span class="line">            overdraft -= (amount - getBalance());</span><br><span class="line">            setBalance(<span class="number">0</span>);<span class="comment">//或</span></span><br><span class="line"><span class="comment">//            super.withdraw(getBalance());</span></span><br><span class="line">            System.out.println(<span class="string">&quot;透支取款成功！\n您的账户余额为：&quot;</span> + getBalance() + <span class="string">&quot;\n您的账户可透支额度为：&quot;</span> + overdraft);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;超过可透支额度！\n您的账户余额为：&quot;</span> + getBalance() + <span class="string">&quot;\n您的账户可透支额度为：&quot;</span> + overdraft);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experimentsuperinheritance;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 继承性&amp;super实验一--测试类2</span></span><br><span class="line"><span class="comment"> *     写一个用户程序测试 CheckAccount 类。在用户程序中，创建一个账号为 1122、余</span></span><br><span class="line"><span class="comment">    额为 20000、年利率 4.5%，可透支限额为 5000 元的 CheckAccount 对象。</span></span><br><span class="line"><span class="comment">    使用 withdraw 方法提款 5000 元，并打印账户余额和可透支额。</span></span><br><span class="line"><span class="comment">    再使用 withdraw 方法提款 18000 元，并打印账户余额和可透支额。</span></span><br><span class="line"><span class="comment">    再使用 withdraw 方法提款 3000 元，并打印账户余额和可透支额。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-16    15:43:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckAccountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CheckAccount account = <span class="keyword">new</span> CheckAccount(<span class="number">1122</span>,<span class="number">20000</span>,<span class="number">4.5</span>,<span class="number">5000</span>);</span><br><span class="line">        </span><br><span class="line">        account.withdraw(<span class="number">5000</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        account.withdraw(<span class="number">18000</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        account.withdraw(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200816162028.png" align="left"></li></ol><h1 id="OOP特征三：多态性"><a href="#OOP特征三：多态性" class="headerlink" title="OOP特征三：多态性"></a>OOP特征三：多态性</h1><h2 id="基本概念和规则"><a href="#基本概念和规则" class="headerlink" title="基本概念和规则"></a>基本概念和规则</h2><ol><li><p>理解多态性：可以理解为事物的多种形态。</p></li><li><p>何为多态：</p><ul><li>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类引用）</li></ul></li><li><p>多态的使用：虚拟方法调用</p><p>有了对象的多态性以后，我们在编译器期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><p>总结(Person p2 = new Man();)：编译，看左边(Person)；运行，看右边(Man())。</p></li><li><p>多态性使用前提：①要有类的继承关系；②要有方法的重写。</p></li><li><p>对象的多态性，只适用于方法，不适用于属性。（编译和运行都看左边）</p></li></ol><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><h3 id="举例一：基本概念的使用"><a href="#举例一：基本概念的使用" class="headerlink" title="举例一：基本概念的使用"></a>举例一：基本概念的使用</h3><ol><li><p>Person类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1001</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Man类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isSmoking;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1002</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人负责赚钱养家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;多吃肉，长肌肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;霸气地走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Woman类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isBeauty;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goShopping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;减肥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;优雅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PersonTest类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     面向对象特征之三：多态性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *    1.理解多态性：可以理解为事物的多种形态</span></span><br><span class="line"><span class="comment"> *    2.何为多态：</span></span><br><span class="line"><span class="comment"> *        对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类引用）</span></span><br><span class="line"><span class="comment"> *    3.多态的使用：虚拟方法调用</span></span><br><span class="line"><span class="comment"> *        有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</span></span><br><span class="line"><span class="comment"> *        总结(Person p2 = new Man();)：编译，看左边(Person)；运行，看右边(Man())。</span></span><br><span class="line"><span class="comment"> *    4.多态性使用前提：①要有类的继承关系；②要有方法的重写。</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *    5.对象的多态性，只适用于方法，不适用于属性。（编译和运行都看左边）</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.eat();</span><br><span class="line">        </span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">        man.eat();</span><br><span class="line">        man.age = <span class="number">18</span>;</span><br><span class="line">        man.earnMoney();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n*****************************&quot;</span>);</span><br><span class="line">        <span class="comment">//对象的多态性：父类的引用指向子类的对象</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Man();</span><br><span class="line"><span class="comment">//        Person p3 = new Woman();</span></span><br><span class="line"><span class="comment">//        多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法---虚拟方法调用</span></span><br><span class="line">        p2.eat();</span><br><span class="line">        p2.walk();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        p2.earnMoney();</span></span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(p2.id);<span class="comment">//1001  对象的多态性，只适用于方法，不适用于属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200816175953.png" align="left"></li></ol><h3 id="应用举例二：虚拟方法调用"><a href="#应用举例二：虚拟方法调用" class="headerlink" title="应用举例二：虚拟方法调用"></a>应用举例二：虚拟方法调用</h3><ol><li><p>AnimalTest类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"><span class="comment">//多态性的使用举例一：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnimalTest test = <span class="keyword">new</span> AnimalTest();</span><br><span class="line">        </span><br><span class="line">        test.func(<span class="keyword">new</span> Dog());</span><br><span class="line">        </span><br><span class="line">        test.func(<span class="keyword">new</span> Cat());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(Animal animal)</span> </span>&#123;<span class="comment">//Animal animal = new Dog();</span></span><br><span class="line">        animal.eat();</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物：进食&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物：叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪！汪！汪！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵！喵！喵！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="从编译和运行的角度看重载与重写"><a href="#从编译和运行的角度看重载与重写" class="headerlink" title="从编译和运行的角度看重载与重写"></a>从编译和运行的角度看重载与重写</h3><ul><li><p>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数列表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。<font color="red">它们的调用地址在编译期就绑定了。</font>Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p><p>所以，对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为<font color="red">“早绑定”或“静态绑定”</font>。</p></li><li><p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为<font color="red">“晚绑定”或“动态绑定”</font>。</p></li></ul><blockquote><p>引用一句Bruce Eckel的话：<font color="red">“不要犯傻，如果它不是晚绑定，它就不是多态。”</font></p></blockquote><h2 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h2><ul><li>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特有的属性和方法？</li></ul><ol><li><p>向下转型：使用强制类型转换符    例 <code>Man m1 = (Man)p2;</code></p></li><li><p>使用强转时，可能出现ClassCastException异常。引入instanceof关键字：</p></li><li><p>instanceof关键字的使用：</p><ul><li>a instanceof A:判断对象a是否是类A的实例。如果是，返回true，如果不是返回false。</li><li>使用场景：为了避免在向下转型时出现ClassCastException异常，我们在向下转型前，先进行instanceof判断，一旦返回true，就进行向下转型；如果返回false，不进行向下转型。</li><li>如果a instanceof A返回true，则a instanceof B也返回true，那么B是A的父类。</li></ul></li><li><p>应用举例：将上面应用举例一中的PersonTest类修改如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     面向对象特征之三：多态性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *    1.理解多态性：可以理解为事物的多种形态</span></span><br><span class="line"><span class="comment"> *    2.何为多态：</span></span><br><span class="line"><span class="comment"> *        对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类引用）</span></span><br><span class="line"><span class="comment"> *    3.多态的使用：虚拟方法调用</span></span><br><span class="line"><span class="comment"> *        有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</span></span><br><span class="line"><span class="comment"> *        总结(Person p2 = new Man();)：编译，看左边(Person)；运行，看右边(Man())。</span></span><br><span class="line"><span class="comment"> *    4.多态性使用前提：①要有类的继承关系；②要有方法的重写。</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *    5.对象的多态性，只适用于方法，不适用于属性。（编译和运行都看左边）</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.eat();</span><br><span class="line">        </span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">        man.eat();</span><br><span class="line">        man.age = <span class="number">18</span>;</span><br><span class="line">        man.earnMoney();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n*****************************&quot;</span>);</span><br><span class="line">        <span class="comment">//对象的多态性：父类的引用指向子类的对象</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Man();</span><br><span class="line"><span class="comment">//        Person p3 = new Woman();</span></span><br><span class="line"><span class="comment">//        多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法---虚拟方法调用</span></span><br><span class="line">        p2.eat();</span><br><span class="line">        p2.walk();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        p2.earnMoney();//无法调用子类所特有的方法，编译时认为p2是一个Person类，Person中无earnMoney方法。</span></span><br><span class="line"><span class="comment">//        p2.isSmoking = true;</span></span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(p2.id);<span class="comment">//1001--对象的多态性，只适用于方法，不适用于属性。</span></span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;***************instanceof关键字的使用*****************&quot;</span>);</span><br><span class="line"><span class="comment">//        有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类</span></span><br><span class="line"><span class="comment">//        类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        如何才能调用子类特有的属性和方法？</span></span><br><span class="line">        Man m1 = (Man)p2;<span class="comment">//向下转型：使用强制类型转换符。</span></span><br><span class="line">        m1.earnMoney();</span><br><span class="line">        m1.isSmoking = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        使用强转时，可能出现ClassCastException异常。</span></span><br><span class="line"><span class="comment">//        Woman w1 = (Woman)p1;</span></span><br><span class="line"><span class="comment">//        w1.goShopping();</span></span><br><span class="line">        <span class="comment">/*    instanceof关键字的使用：</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         *    a instanceof A:判断对象a是否是类A的实例。如果是，返回true，如果不是返回false。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *     使用情景：为了避免在向下转型时出现ClassCastException异常，我们在向下转型前，先进</span></span><br><span class="line"><span class="comment">         *     行instanceof判断，一旦返回true，就进行向下转型；如果返回false，不进行向下转型。</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         *     如果a instanceof A返回true，则a instanceof B也返回true，那么B是A的父类。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Woman) &#123;</span><br><span class="line">            Woman w1 = (Woman)p2;</span><br><span class="line">            w1.goShopping();</span><br><span class="line">            System.out.println(<span class="string">&quot;强转成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p2不是类Woman的实例，强转失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Man) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p2是类Man的实例，可以强转！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p2不是类Man的实例，强转失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p2是类Person的实例！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Object) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p2也是类Object的实例！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        练习：</span></span><br><span class="line">        <span class="comment">//问题一：编译时通过，运行时不通过</span></span><br><span class="line"><span class="comment">//        Person p3 = new Woman();</span></span><br><span class="line"><span class="comment">//        Man m3 = (Man)p3;</span></span><br><span class="line">        <span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//        Person p3 = new Woman();</span></span><br><span class="line"><span class="comment">//        Man m3 = (Man)p3;</span></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line"><span class="comment">//        Person p4 = new Person();</span></span><br><span class="line"><span class="comment">//        Man m4 = (Man)p4;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题二：编译通过，运行也通过</span></span><br><span class="line"><span class="comment">//        Object obj = new Woman();</span></span><br><span class="line"><span class="comment">//        Person p = (Person)obj;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题三：编译不通过</span></span><br><span class="line"><span class="comment">//        Man m5 = new Woman();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817094716.png" align="left"></li></ol><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><ol><li><p>继承成员变量和继承方法的区别</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphism;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可</span></span><br><span class="line"><span class="comment"> *     能把父类里的方法转移到子类中。编译看左边，运行看右边</span></span><br><span class="line"><span class="comment"> * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例</span></span><br><span class="line"><span class="comment"> *     变量依然不可能覆盖父类中定义的实例变量。编译运行都看左边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1FieldMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(s.count);<span class="comment">//20</span></span><br><span class="line">        s.display();<span class="comment">//20</span></span><br><span class="line">        Base b = s;<span class="comment">//赋地址</span></span><br><span class="line">        System.out.println(b == s);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b.count);<span class="comment">//10</span></span><br><span class="line">        b.display();<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817105005.png" align="left"></li><li><pre><code class="java">class Person&#123;    protected String name = &quot;person&quot;;    protected int age = 50;    public String getInfo() &#123;        return &quot;Name:&quot; + name + &quot;\nage:&quot; + age;    &#125;&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Student extends Person&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected String school &amp;#x3D; &amp;quot;pku&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String getInfo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;Name:&amp;quot; + name + &amp;quot;\nage:&amp;quot; + age + &amp;quot;\nschool:&amp;quot; + school;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Graduate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String major = &lt;span class=&quot;string&quot;&gt;&amp;quot;IT&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Name:&amp;quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&amp;quot;\nage:&amp;quot;&lt;/span&gt; + age + &lt;span class=&quot;string&quot;&gt;&amp;quot;\nschool:&amp;quot;&lt;/span&gt; + school + &lt;span class=&quot;string&quot;&gt;&amp;quot;\nmajor:&amp;quot;&lt;/span&gt; + major;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;建立InstanceTest类，在类中定义方法method(Person e)；在method中：①根据**e**的类型调用相应类的**getInfo()**方法。②根据**e**的类型执行：* 如果**e**为**Person**类的对象，输出：  “a person”* 如果e为Student类的对象，输出：  “a student”  “a person”* 如果e为Graduate类的对象，输出：  “a graduated student”  “a student”  “a person”&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; top.triabin.polymorphism;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 建立InstanceTest类，在类中定义方法method(Person e)；在method中：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    ①根据e的类型调用相应类的getInfo()方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    ②根据e的类型执行：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        如果e为Person类的对象，输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a person”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        如果e为Student类的对象，输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a student”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a person”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        如果e为Graduate类的对象，输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a graduated student”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a student”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      “a person”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Exercise2InstanceTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Exercise2InstanceTest test = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Exercise2InstanceTest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Person p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Person p2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Person p3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Graduate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test.method(p1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test.method(p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test.method(p3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(e.getInfo());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(e &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Graduate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a graduated student&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a student&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(e &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Student) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a student&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;a person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;* 运行&lt;img src=&quot;https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817162902.png&quot; align=&quot;left&quot;/&gt;</code></pre></li><li><p>定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆，MyRecangle代表矩形。定义一个测试类GeometricTest，编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</p><ul><li>父类GeometricObject</li></ul><table><thead><tr><th>GeometricObject</th></tr></thead><tbody><tr><td>#color:String<br>#weight:double</td></tr><tr><td>#GeometricObject(color:String,weight:double)</td></tr><tr><td>属性的getter和setter方法<br>+findArea():double</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphismexercise3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 父类GeometricObject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeometricObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> weight;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeometricObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">GeometricObject</span><span class="params">(String color,<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GeometricObject的子类Circle</li></ul><table><thead><tr><th>Circle</th></tr></thead><tbody><tr><td>-radius:double</td></tr><tr><td>+Circle(radius:double,color:String,weight:double)</td></tr><tr><td>radius属性的setter和getter方法<br>+findArea():double    //计算圆的面积</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphismexercise3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">GeometricObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius,String color,<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color,weight);</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GeometricObject的子类MyRectangle</li></ul><table><thead><tr><th>MyRectangle</th></tr></thead><tbody><tr><td>-width:double<br>-height:double</td></tr><tr><td>+MyRectangle(width:double,height:double,color:String,weight:double)</td></tr><tr><td>属性的getter和setter方法<br>+findArea():double    //计算面积</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphismexercise3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRectangle</span> <span class="keyword">extends</span> <span class="title">GeometricObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRectangle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRectangle</span><span class="params">(<span class="keyword">double</span> width,<span class="keyword">double</span> height,String color,<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color,weight);</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类GeometricTest</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.polymorphismexercise3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeometricTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GeometricTest test = <span class="keyword">new</span> GeometricTest();</span><br><span class="line">        </span><br><span class="line">        GeometricObject g1 = <span class="keyword">new</span> Circle(<span class="number">5</span>,<span class="string">&quot;red&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;g1&quot;</span>);</span><br><span class="line">        test.displayGeometricObject(g1);</span><br><span class="line">        </span><br><span class="line">        GeometricObject g2 = <span class="keyword">new</span> MyRectangle(Math.PI,<span class="number">25</span>,<span class="string">&quot;green&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;g2&quot;</span>);</span><br><span class="line">        test.displayGeometricObject(g2);</span><br><span class="line">        </span><br><span class="line">        GeometricObject g3 = <span class="keyword">new</span> MyRectangle(<span class="number">5</span>,<span class="number">10</span>,<span class="string">&quot;draw&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;g3&quot;</span>);</span><br><span class="line">        test.displayGeometricObject(g3);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(test.equalsArea(g1,g2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;g1和g2面积相等&quot;</span>) ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;g1和g2面积不相等&quot;</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;g2和g3面积相等 =&gt; &quot;</span> + test.equalsArea(g2, g3));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsArea</span><span class="params">(GeometricObject g1,GeometricObject g2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> g1.findArea() == g2.findArea();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayGeometricObject</span><span class="params">(GeometricObject g)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;的面积为：&quot;</span> + g.findArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817175646.png" align="left"></li><li><p>**<font color="red">面试题：</font>**多态是编译时行为还是运行时行为？如何证明？</p><p>证明见InterviewTest.java</p></li><li><p>拓展问题：InterviewTest1.java</p></li></ol><h1 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h1><h2 id="java-lang-Object类"><a href="#java-lang-Object类" class="headerlink" title="java.lang.Object类"></a>java.lang.Object类</h2><ol><li><p>Object类是所有Java类的根父类。</p></li><li><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类。</p></li><li><p>Object类中的功能（属性、方法）具有通用性。</p><p>属性：无</p><p>方法：equals() / toString() / getClass() / hashCode() / clone() / finalize() / wait()、notify()、notifyAll()</p></li><li><p>Object类只声明了一个空参的构造器。</p></li></ol><ul><li>面试题：final、finally、finalize的区别？</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classobject;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * java.lang.Object类</span></span><br><span class="line"><span class="comment"> * 1. Object类是所有Java类的根父类。</span></span><br><span class="line"><span class="comment"> * 2. 如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类。</span></span><br><span class="line"><span class="comment"> * 3. Object类中的功能（属性、方法）具有通用性。</span></span><br><span class="line"><span class="comment"> *         属性：无</span></span><br><span class="line"><span class="comment"> *         方法：equals() / toString() / getClass() / hashCode() / clone() / finalize() / wait()、notify()、notifyAll()</span></span><br><span class="line"><span class="comment"> *         </span></span><br><span class="line"><span class="comment"> * 4. Object类只声明了一个空参的构造器。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：final、finally、finalize的区别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        System.out.println(order.getClass().getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817215804.png" align="left"><h2 id="Object类中的主要结构"><a href="#Object类中的主要结构" class="headerlink" title="Object类中的主要结构"></a>Object类中的主要结构</h2><table><thead><tr><th align="center">NO.</th><th>方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td>public Object()</td><td align="center">构造</td><td align="center">构造器</td></tr><tr><td align="center">2</td><td><font color="red">public boolean equals(Object obj)</font></td><td align="center">普通</td><td align="center">对象比较</td></tr><tr><td align="center">3</td><td>public int hashCode()</td><td align="center">普通</td><td align="center">取得Hash码</td></tr><tr><td align="center">4</td><td><font color="red">public String toString()</font></td><td align="center">普通</td><td align="center">对象打印时调用</td></tr></tbody></table><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><p><font color="red"><strong>面试题：</strong></font>==和equals()的区别？</p><ol><li><p>回顾==的使用：</p><p>==：运算符</p><p>①可以使用在基本数据类型变量和引用数据类型变量中；</p><p>② 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）    如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个引用是否指向同一    个对象实体。</p></li><li><p>equals()方法的使用：</p><p>①是一个方法，而非运算符；</p><p>②只能适用于引用数据类型；</p><p>③Object类中equals()的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：Object类中equals()和==的作用是相同的：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体。</p><p>④像String、Date、File、包装类等都重写了Object类中的equals()方法，重写之后，比较的不再是两个对象的“实体内容”是否相同；</p><p>⑤通常情况下，我们自定义的类如果使用equals()方法的话，也通常是比较两个对象的“实体内容”是否相同。那么我们就需要对Object类中的equals()方法进行重写。</p><p>重写原则：比较两个对象的实体内容（即：name和age）是否相同。</p></li><li><p>代码实例</p><ul><li>Customer类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classobject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    重写原则：比较两个对象的实体内容（即：name和age）是否相同</span></span><br><span class="line"><span class="comment">//    手动实现equals()的重写：</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">//        if(this == obj) &#123;</span></span><br><span class="line"><span class="comment">//            return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(obj instanceof Customer) &#123;</span></span><br><span class="line"><span class="comment">//            Customer cust = (Customer)obj;</span></span><br><span class="line"><span class="comment">//            //比较两个对象的每个属性是否都相同</span></span><br><span class="line"><span class="comment">//            return this.age == cust.age &amp;&amp; this.name.equals(cust.name);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    自动生成equals()的重写：=&gt; Alt+Shift+S / Source =&gt; Generate hashCode() and equals()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Customer other = (Customer) obj;</span><br><span class="line">        <span class="keyword">if</span> (age != other.age)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EqualsTest类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classobject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 面试题：==和equals()的区别？</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 一、回顾 == 的使用：</span></span><br><span class="line"><span class="comment"> *         ==：运算符</span></span><br><span class="line"><span class="comment"> *         1. 可以使用在基本数据类型变量和引用数据类型变量中；</span></span><br><span class="line"><span class="comment"> *         2. 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</span></span><br><span class="line"><span class="comment"> *             如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个引用是否指向同一</span></span><br><span class="line"><span class="comment"> *             个对象实体。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二、equals()方法的使用：</span></span><br><span class="line"><span class="comment"> *         1. 是一个方法，而非运算符；</span></span><br><span class="line"><span class="comment"> *         2. 只能适用于引用数据类型；</span></span><br><span class="line"><span class="comment"> *         3. Object类中equals()的定义：</span></span><br><span class="line"><span class="comment"> *             public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">                return (this == obj);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"> *         说明：Object类中equals()和==的作用是相同的：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体</span></span><br><span class="line"><span class="comment"> *         </span></span><br><span class="line"><span class="comment"> *         4. 像String、Date、File、包装类等都重写了Object类中的equals()方法，重写之后，比较的不再是两个对象的“实体内容”</span></span><br><span class="line"><span class="comment"> *             是否相同。</span></span><br><span class="line"><span class="comment"> *         5. 通常情况下，我们自定义的类如果使用equals()方法的话，也通常是比较两个对象的“实体内容”是否相同。那么我们就</span></span><br><span class="line"><span class="comment"> *             需要对Object类中的equals()方法进行重写。</span></span><br><span class="line"><span class="comment"> *             重写原则：比较两个对象的实体内容（即：name和age）是否相同。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        基本数据类型</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">10.0</span>;</span><br><span class="line">        System.out.println(i == j);<span class="comment">//true</span></span><br><span class="line">        System.out.println(i == d);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        boolean b = true;</span></span><br><span class="line"><span class="comment">//        System.out.println(i == b);//报错</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> c = <span class="number">10</span>;</span><br><span class="line">        System.out.println(i == c);<span class="comment">//true</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="number">65</span>;</span><br><span class="line">        System.out.println(c1 == c2);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        引用数据类型</span></span><br><span class="line">        Customer cust1 = <span class="keyword">new</span> Customer(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Customer cust2 = <span class="keyword">new</span> Customer(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(cust1 == cust2);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;Triabin&quot;</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">&quot;Triabin&quot;</span>);</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;**********equals()方法的使用**********&quot;</span>);</span><br><span class="line">        System.out.println(cust1.equals(cust2));<span class="comment">//false =&gt; Object类中的equals()方法，比较的是地址，修改相应的equals()方法后变为true，详情见Customer类</span></span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//true =&gt; String类中的equals()方法，比较的是“实体内容”，而非地址</span></span><br><span class="line">        </span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">32432525324L</span>);</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">32432525324L</span>);</span><br><span class="line">        System.out.println(date1.equals(date2));<span class="comment">//true =&gt; Date类中的equals()方法，比较的是“实体内容”，而非地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817220202.png" align="left"></li><li><p>重写equals()方法的原则：</p><ul><li><p>对称性：如果x.equals(y)返回的是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p>自反性：x.equals(x)必须返回是“true”。</p></li><li><p>传递性：如果x.equals(y)返回是“true”，而且x.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p>一致性：如果x.equals(y)返回是”true“，只要x和y内容一直不变，不管重复x.equals(y)多少次，返回都是“true”。</p></li><li><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>x.equals(和x不同类型的对象)永远返回是“false”。</p></li></ul></li></ol><h4 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h4><ol><li><p>编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objectequalsexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> equals()方法课后练习一：</span></span><br><span class="line"><span class="comment"> *     编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的</span></span><br><span class="line"><span class="comment"> *     构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对</span></span><br><span class="line"><span class="comment"> *     象是否相等。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-17    22:17:20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(<span class="keyword">int</span> orderId, String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(<span class="keyword">int</span> orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Order) &#123;</span><br><span class="line">            Order order = (Order)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.orderId == order.getOrderId() &amp;&amp; <span class="keyword">this</span>.orderName.equals(order.getOrderName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objectequalsexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> equals()方法课后练习一：测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-17    22:34:45</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order1 = <span class="keyword">new</span> Order(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        Order order2 = <span class="keyword">new</span> Order(<span class="number">1001</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        Order order3 = <span class="keyword">new</span> Order(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(order1.equals(order2));</span><br><span class="line">        System.out.println(order1.equals(order3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817224044.png" align="left"></li><li><p>请根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个MyDate型对象的年月日都相同时，结果为true，否则为false。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objectequalsexercise2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> equals()方法课后练习二：</span></span><br><span class="line"><span class="comment"> *         请根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个</span></span><br><span class="line"><span class="comment"> *         MyDate型对象的年月日都相同时，结果为true，否则为false。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-17    22:42:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDate m1 = <span class="keyword">new</span> MyDate(<span class="number">14</span>,<span class="number">3</span>,<span class="number">1976</span>);</span><br><span class="line">        MyDate m2 = <span class="keyword">new</span> MyDate(<span class="number">14</span>,<span class="number">3</span>,<span class="number">1976</span>);</span><br><span class="line">        <span class="keyword">if</span>(m1 == m2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1==m2&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1!=m2&quot;</span>);<span class="comment">//m1 != m2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m1.equals(m2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1 is equal to m2&quot;</span>);<span class="comment">// m1 is equal to m2</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1 is not equal to m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">( <span class="keyword">int</span> month, <span class="keyword">int</span> day,<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> MyDate) &#123;</span><br><span class="line">            MyDate date = (MyDate)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.month == date.getMonth() &amp;&amp; <span class="keyword">this</span>.day == date.getDay() &amp;&amp; <span class="keyword">this</span>.year == date.getYear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200817225459.png" align="left"></li></ol><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><ol><li><p>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()；</p></li><li><p>Object类中toString()的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>像String、Date、File、包装类等都重写了Object类中的toString()方法，使得在调用对象的toString()方法时，返回“实体内容”信息；</p></li><li><p>自定义类也可以重写toString()方法，当调用此方法时，返回对象的“实体内容”。</p></li><li><p>代码实例：在equals()代码实例的包下创建类ToStringTest类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classobject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Object类中toString()的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 当我们输出一个对象的引用时，实际上就是调用当前对象的toString()；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. Object类中toString()的定义：</span></span><br><span class="line"><span class="comment"> *          public String toString() &#123;</span></span><br><span class="line"><span class="comment">            return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3. 像String、Date、File、包装类等都重写了Object类中的toString()方法，使得在调用对象的toString()方法</span></span><br><span class="line"><span class="comment"> *         时，返回“实体内容”信息；</span></span><br><span class="line"><span class="comment"> * 4. 自定义类也可以重写toString()方法，当调用此方法时，返回对象的“实体内容”。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer cust1 = <span class="keyword">new</span> Customer(<span class="string">&quot;Triabin&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(cust1.toString());<span class="comment">//top.triabin.classobject.Customer@15db9742  重写toString()方法后：Customer[name = Triabin,age = 22]</span></span><br><span class="line">        System.out.println(cust1);<span class="comment">//top.triabin.classobject.Customer@15db9742  重写toString()方法后：Customer[name = Triabin,age = 22]</span></span><br><span class="line">        </span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">&quot;MM&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//MM</span></span><br><span class="line">        </span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">4534534534543L</span>);</span><br><span class="line">        System.out.println(date.toString());<span class="comment">//2113-09-11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Customer类中重写toString()方法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    手动实现toString()方法的重写：</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Customer[name = &quot; + name + &quot;,age = &quot; + age + &quot;]&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    自动实现：</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818151621.png" align="left"></li></ol><h4 id="课后练习-1"><a href="#课后练习-1" class="headerlink" title="课后练习"></a>课后练习</h4><ol><li><p>定义两个类，父类GeometricObject代表几何形状，子类Circle代表圆形。</p><table><thead><tr><th>GeometricObject</th></tr></thead><tbody><tr><td>protected String color<br>protected double weight</td></tr><tr><td>protected GeometricObject()<br>protected GeometricObject(String color,double weight)</td></tr><tr><td>属性的getter和setter方法</td></tr></tbody></table><p>空参构造器protected GeometricObject()初始化对象的color属性为“white”，weight属性为1.0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objecttostringexercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeometricObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> weight;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">GeometricObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">        weight = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">GeometricObject</span><span class="params">(String color,<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Circle</th></tr></thead><tbody><tr><td>private double radius</td></tr><tr><td><u>public Circle()</u><br><u>public Circle(double radius)</u><br><u>public Circle(double radius,String color,double weight)</u><br>radius属性的getter和setter方法<br>public double findArea():计算圆的面积<br>public boolean equals(Object obj)<br>public String toString()</td></tr></tbody></table></li></ol><p>①public Circle()：初始化对象的color属性为“white”，weight属性为1.0，radius属性为1.0；</p><p>②public Circle(double radius)：初始化对象的color属性为“white”，weight属性为1.0，radius属性根据参数构造器确定；</p><p>③public boolean equals(Object obj)：重写equals()方法，比较两个圆的半径是否相等，如相等，返回true；</p><p>④public String toString()：重写toString()方法，输出圆的半径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objecttostringexercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">GeometricObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        radius = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius,String color,<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color,weight);</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">            Circle c = (Circle)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.radius == c.radius;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Circle[radius = &quot;</span> + <span class="keyword">this</span>.radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个测试类，创建两个Circle对象，判断其颜色是否相等；利用equals()方法判断其半径是否相等；利用toString()方法输出其半径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.objecttostringexercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle c1 = <span class="keyword">new</span> Circle(<span class="number">10</span>,<span class="string">&quot;red&quot;</span>,<span class="number">1.0</span>);</span><br><span class="line">        System.out.println(c1.toString());</span><br><span class="line">        Circle c2 = <span class="keyword">new</span> Circle(<span class="number">10</span>,<span class="string">&quot;bule&quot;</span>,<span class="number">1.0</span>);</span><br><span class="line">        System.out.println(c2.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;c1和c2颜色相等 =&gt; &quot;</span> + c1.getColor().equals(c2.getColor()));</span><br><span class="line">        System.out.println(<span class="string">&quot;c1和c2半径相等 =&gt; &quot;</span> + c1.equals(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818161008.png" align="left"><h2 id="Tips：单元测试（JUnit）"><a href="#Tips：单元测试（JUnit）" class="headerlink" title="Tips：单元测试（JUnit）"></a>Tips：单元测试（JUnit）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Java中的JUnit单元测试</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 选中当前工程 -&gt; 右键 -&gt; build path -&gt; add libraries -&gt; JUnit 4 -&gt; 下一步</span></span><br><span class="line"><span class="comment"> * 2. 创建一个Java类进行单元测试</span></span><br><span class="line"><span class="comment"> *         此时的Java类要求：① 此类是public的； ② 此类提供公共的无参的构造器</span></span><br><span class="line"><span class="comment"> * 3. 此类中声明单元测试方法</span></span><br><span class="line"><span class="comment"> *         此时的单元测试方法：方法的权限是public，没有返回值，没有形参</span></span><br><span class="line"><span class="comment"> * 4. 此单元测试方法上需要声明注释：@Test，并在单元测试类中导入：import org.junit.Test；</span></span><br><span class="line"><span class="comment"> * 5. 声明好单元测试方法以后，就可以在方法体内测试相关代码；</span></span><br><span class="line"><span class="comment"> * 6. 写完代码以后，左键双击单元测试方法名，右键：run as -&gt; JUnit Test</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1. 如果执行结果没有异常：绿条</span></span><br><span class="line"><span class="comment"> * 2. 如果执行结果出现异常：红条</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUnitTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEquals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;MM&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;MM&quot;</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//ClassCastException的异常</span></span><br><span class="line"><span class="comment">//        Object obj = new String(&quot;GG&quot;);</span></span><br><span class="line"><span class="comment">//        Date date = (Date)obj;</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(num);</span><br><span class="line">        show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;show()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s2 = <span class="string">&quot;MM&quot;</span>;</span><br><span class="line">        System.out.println(s2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testEquals()：</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818164159.png" align="left"><blockquote><p>Tips：开发过程中可直接在代码文本编辑器中写@Test，然后利用软件自带的修正功能直接完成add libraries和导入等操作。</p></blockquote><h1 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h1><ol><li><p>Java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征。</p></li><li><p>掌握：基本数据类型、包装类、String类型之间的相互转换。</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200819120650.png" align="left"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classwrapper;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 包装类的使用</span></span><br><span class="line"><span class="comment"> * 1. Java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征</span></span><br><span class="line"><span class="comment"> * 2. 掌握：基本数据类型、包装类、String三者之间的相互转换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基本数据类型 --&gt; 包装类 =&gt; 调用包装类的构造器</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        System.out.println(num1.toString());</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(num1);</span><br><span class="line">        System.out.println(in1.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//报异常：java.lang.NumberFormatException: For input string: &quot;123abc&quot;</span></span><br><span class="line"><span class="comment">//        Integer in2 = new Integer(&quot;123abc&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(in2.toString());</span></span><br><span class="line">        </span><br><span class="line">        Float f1 = <span class="keyword">new</span> Float(<span class="number">12.3</span>);</span><br><span class="line">        Float f2 = <span class="keyword">new</span> Float(<span class="string">&quot;12.3&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        Boolean b1 = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line">        Boolean b2 = <span class="keyword">new</span> Boolean(<span class="string">&quot;TrUe&quot;</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//true</span></span><br><span class="line">        Boolean b3 = <span class="keyword">new</span> Boolean(<span class="string">&quot;true123&quot;</span>);</span><br><span class="line">        System.out.println(b3);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        System.out.println(order.isMale);<span class="comment">//false</span></span><br><span class="line">        System.out.println(order.isFemale);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//包装类 --&gt; 基本数据类型 =&gt; 调用包装类的xxxValue()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">int</span> i1 = in1.intValue();</span><br><span class="line">        System.out.println(i1 + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        Float f1 = <span class="keyword">new</span> Float(<span class="number">12.3</span>);</span><br><span class="line">        <span class="keyword">float</span> f2 = f1.floatValue();</span><br><span class="line">        System.out.println(f2 + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * JDK 5.0新特性：自动装箱与自动拆箱</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int num1 = 10;</span></span><br><span class="line"><span class="comment">//        //基本数据类型 --&gt; 包装类对象</span></span><br><span class="line"><span class="comment">//        method(num1);//10    Object obj = num1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动装箱：</span></span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">        Integer in1 = num2;<span class="comment">//自动拆箱，其他数据类型类似</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        System.out.println(in1.toString());</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        <span class="keyword">int</span> num3 = in1;<span class="comment">//自动拆箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基本数据类型、包装类 --&gt; String类型 =&gt;调用String重载的valueOf(Xxx xxx)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式一：连接运算</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        String str1 = num1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：调用String重载的valueOf(Xxx xxx)</span></span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">12.3f</span>;</span><br><span class="line">        String str2 = String.valueOf(f1);<span class="comment">//&quot;12.3&quot;    </span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        Double d1 = <span class="keyword">new</span> Double(<span class="number">12.4</span>);</span><br><span class="line">        String str3 = String.valueOf(d1);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//String类型 --&gt; 基本数据类型、包装类 =&gt; 调用包装类的parseXxx(String s)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="comment">//错误情况：</span></span><br><span class="line"><span class="comment">//        int num1 = (int)str1;</span></span><br><span class="line"><span class="comment">//        Integer in1 = (Integer)str1;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num2 = Integer.parseInt(str1);</span><br><span class="line">        System.out.println(num2 + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        String str2 = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = Boolean.parseBoolean(str2);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"><span class="comment">//        String str2 = &quot;true123&quot;;</span></span><br><span class="line"><span class="comment">//        boolean b1 = Boolean.parseBoolean(str2);</span></span><br><span class="line"><span class="comment">//        System.out.println(b1);//false</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    Boolean isFemale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test1:</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818200913.png" align="left"><ul><li>test2</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818201011.png" align="left"><ul><li><p>test3</p><p>10</p></li><li><p>test4</p></li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818201202.png" align="left"><ul><li>test5</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200818201257.png" align="left"></li></ol><h2 id="课后练习-2"><a href="#课后练习-2" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li><p><font color="red"><strong>面试题：</strong></font>如下两个代码输出的结果相同吗？各是什么？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o1);<span class="comment">//1.0</span></span><br><span class="line"><span class="comment">//题解：三元运算符在编译时需要保证前后数据类型一致，所以前面的int型的1倍自动类型提升为double型的1.0</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">Object o2;</span><br><span class="line">if (true)</span><br><span class="line">o2 &#x3D; new Integer(1);</span><br><span class="line">else</span><br><span class="line">o2 &#x3D; new Double(2.0);</span><br><span class="line">System.out.println(o2);&#x2F;&#x2F;1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    System.out.println(i == j);<span class="comment">//false    两个对象，比地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Integer内部定义了一个IntegerCache结构，IntegerCache中定义了Integer[]，保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在-128~127内时，可以之际使用数组中的元素，不用再去new了。目的：提高效率</span></span><br><span class="line">    Integer m = <span class="number">1</span>;</span><br><span class="line">    Integer n = <span class="number">1</span>;</span><br><span class="line">    System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line">    Integer x = <span class="number">128</span>;<span class="comment">//范围超出-128~127，相当于new了一个对象，下面比较的是地址值</span></span><br><span class="line">    Integer y = <span class="number">128</span>;</span><br><span class="line">    System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。</p><ul><li>提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态绳伸缩；</li><li>创建Vector对象：Vector v = new Vector();</li><li>给向量添加元素：v.addElement(Object obj);//obj必须是对象</li><li>取出向量中的元素：Object obj = v.elementAt(0);<ul><li>注意第一个元素的下标是0，返回值是Object类型的。</li></ul></li><li>计算向量长度：v.size();</li><li>若与最高分相差10分内：A等；20分内：B等；30分内：C等；其他：D等。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.classwrapper;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 课后练习2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Vector&lt;Integer&gt; v = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> maxScore = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入学生成绩（以负数代表输入结束）：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> score = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(score &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                scan.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入数据非法，请重新输入！&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//jdk 5.0之前：</span></span><br><span class="line">    <span class="comment">//        Integer inScore = new Integer(score);</span></span><br><span class="line">    <span class="comment">//        v.addElement(inScore);</span></span><br><span class="line">            <span class="comment">//jdk 5.0之后：</span></span><br><span class="line">            v.addElement(score);<span class="comment">//自动装箱</span></span><br><span class="line">            <span class="keyword">if</span>(maxScore &lt; score) &#123;</span><br><span class="line">                maxScore = score;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> level;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; v.size();i ++) &#123;</span><br><span class="line">            Object obj = v.elementAt(i);</span><br><span class="line">            <span class="comment">//jdk 5.0之前：</span></span><br><span class="line"><span class="comment">//            Integer inScore = (Integer)obj;</span></span><br><span class="line"><span class="comment">//            int score = inScore.intValue();</span></span><br><span class="line">            <span class="comment">//jdk 5.0之后：</span></span><br><span class="line">            <span class="keyword">int</span> score = (<span class="keyword">int</span>)obj;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(maxScore - score &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxScore - score &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxScore - score &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                level = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;student-&quot;</span> + i + <span class="string">&quot; score is &quot;</span> + score + <span class="string">&quot;, leval is &quot;</span> + level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200819114305.png" align="left"></li></ol><h1 id="章节练习题及面试题"><a href="#章节练习题及面试题" class="headerlink" title="章节练习题及面试题"></a>章节练习题及面试题</h1><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><ol><li><p>java类是否可以多继承，怎么实现多继承？</p><p>答：java没有多继承，但可以通过接口的形式来达到多继承的目地。</p></li><li><p>继承练习</p><p>定义类A和类B如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class A: a=&quot;</span> + a + <span class="string">&quot;\td=&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">3.0f</span>;</span><br><span class="line">    String d = <span class="string">&quot;Java program.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;Class B: a=&quot;</span> + a + <span class="string">&quot;\td=&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>若在应用程序的main方法中有以下语句：</p><p><code>A a = new A();</code></p><p><code>a.show();</code></p><p>则输出的结果如何？</p><p>答：Class A：a=1 d=2.0</p></li><li><p>若在应用程序的main方法中定义类B的对象b：</p><p><code>A b = new B();</code></p><p><code>b.show();</code></p><p>则输出结果如何？</p><p>答：Class A：a=1 d=2.0</p><p>​        Class B：a=3.0 d=Java program</p></li></ul></li><li><p>重载（overload）和重写（override，有的书也叫做“覆盖”）的区别？</p><p>答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</p></li><li><p>Overload的方法是否可以改变返回值类型？</p><p>答：Overload的方法可以改变返回值类型。</p></li><li><p>写出错误答案错误的原因。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面哪些函数可以存在于Demo的子类中？</p><p>A.<code>public int show(int a,int b)&#123;return 0;&#125;//可以，覆盖</code></p><p>B.<code>private int show(int a,int b)&#123;return 0;&#125;//不可以，权限不够</code></p><p>C.<code>private int show(int a,long b)&#123;return 0;&#125;//可以，和父类不是一个函数。没有覆盖，相当于重载</code></p><p>D.<code>public short show(int a,int b)&#123;return 0;&#125;//不可以，因为该函数不可以和给定函数出现在同一类中，或者子父类中</code></p><p>E.<code>static int show(int a,int b)&#123;return 0;&#125;//不可以，静态只能覆盖静态。</code></p></li><li><p>写出程序的结果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo15</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Super s = <span class="keyword">new</span> Demo15();</span><br><span class="line">        System.out.println(s.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：编译失败；原因：因为子类父类中的get方法没有覆盖。但是子类调用的时候不能明确返回值是什么类型，所以这样的函数不可以存在字符类中。</p></li><li><p>按要求实现下列问题：实现一个名为Person的类和它的子类Employee，Employee有两个子类Faculty和Staff。具体要求如下：</p><p>① Person类中的属性有：姓名name（String类型），地址address（String类型），电话号码telephone（String类型）；</p><p>② Employee类中的属性有：办公室office（String类型），工资wage（double类型),受雇日期hiredate（String类型）；</p><p>③ Faculty类中的属性有：学位degree（String类型），级别level（String类型）；</p><p>④ Staff类中的属性有：职务称号duty（STring类型）；</p><p>⑤现有对象Person p1 = new Faculty()和Person p2 = new Staff()，请分别为p1的属性赋值“本科”和Staff类的duty属性赋值“职员”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h2 id="Object类的使用说明"><a href="#Object类的使用说明" class="headerlink" title="Object类的使用说明"></a>Object类的使用说明</h2><h2 id="包装类的使用-1"><a href="#包装类的使用-1" class="headerlink" title="包装类的使用"></a>包装类的使用</h2><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目二：客户信息管理软件</title>
      <link href="/2020/08/10/%E9%A1%B9%E7%9B%AE%E4%BA%8C/"/>
      <url>/2020/08/10/%E9%A1%B9%E7%9B%AE%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ol><li>模拟实现一个基于文本界面的《客户信息管理软件》。</li><li>进一步掌握编程技巧和调试技巧，熟悉面向对象编程。</li><li>主要涉及以下知识点：<ul><li>类结构的使用：属性、方法、构造器</li><li>对象的创建于使用</li><li>类的封装性</li><li>声明和使用数组</li><li>数组的插入、删除和替换</li><li>关键字的使用：this</li></ul></li></ol><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><ol><li><p>模拟实现基于文本界面的《客户信息管理软件》。</p><p>该软件能够实现对客户对象的插入、修改和删除（用数组实现），并能够打印客户明细表。</p><p>项目采用分级菜单方式。主菜单如下：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200810143418.png" align="left"><ul><li><p>每个客户的信息被保存在Customer对象中。</p></li><li><p>以一个Customer类型的数组来记录当前所有的客户。</p></li><li><p>每次“添加客户”（菜单1）后，客户（Customer）对象被添加到数组中。</p></li><li><p>每次“修改客户”（菜单2）后，修改后的客户（Customer）对象替换数组中原对象。</p></li><li><p>每次“删除客户”（菜单3）后，客户（Customer）对象被从数组中清除。</p></li><li><p>执行“客户列表 ”（菜单4）时，将列出数组中所有客户的信息。</p></li></ul></li><li><p>“添加客户”的界面及操作过程如下所示：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144134.png" align="left"></li><li><p>“修改客户”的界面及操作过程如下所示：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144302.png" align="left"></li><li><p>“删除客户”的界面及操作过程如下所示：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144402.png" align="left"></li><li><p>“客户列表”的界面及操作过程如下所示：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144447.png" align="left"></li></ol><h1 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h1><ol><li><p>该软件由以下三个模块组成：</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144712.png" align="left"><ul><li><p>CustomerView为主模块，负责菜单的显示和处理用户操作</p></li><li><p>CustomerList为Customer对象的管理模块，内部用数组管理一组Customer对象，并提供相应的添加、修改、删除和遍历方法，供CustomerView调用</p></li><li><p>Customer为实体对象，用来封装客户信息</p></li></ul></li><li><p>项目简图</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810144900.png" align="left"></li><li><p>enterMainMenu()方法的活动图</p><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810145015.png" align="left"></li></ol><h1 id="键盘的访问实现"><a href="#键盘的访问实现" class="headerlink" title="键盘的访问实现"></a>键盘的访问实现</h1><ol><li><p>l项目中提供了CMUtility.java类，可用来方便地实现键盘访问。</p><p>public static char readMenuSelection()</p><ul><li>用途：该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。</li></ul><p>public static char readChar()和public static char readChar(char defaultValue)</p><ul><li>用途：这两个方法功能相同，均从键盘读取一个字符，并将其作为方法的返回值。</li><li>参数：defaultValue—如果用户不输入字符而直接回车，方法将以defaultValue作为返回值。（提示：此方法可在修改客户时调用）</li></ul><p>public static int readInt()和public static int readInt(int defaultValue)</p><ul><li>用途：这两个方法功能相同，均从键盘读取一个长度不超过2位的  整数，并将其作为方法的返回值。</li><li>参数：defaultValue — 如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</li></ul><p>public static String readString(int limit)和public static String readString(int limit,String defaultValue)</p><ul><li><p>用途：这两个方法功能相同，均从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</p></li><li><p>参数：limit — 指定字符串的最大长度；</p><p>defaultValue — 如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</p></li></ul><p>public static char readConfirmSelection()</p><p>用途：从键盘读取‘Y’或’N’，并将其作为方法的返回值。</p></li></ol><h1 id="类的设计与实现"><a href="#类的设计与实现" class="headerlink" title="类的设计与实现"></a>类的设计与实现</h1><h2 id="Customer类"><a href="#Customer类" class="headerlink" title="Customer类"></a>Customer类</h2><ol><li><p>Customer类的设计</p><p>①Customer为实体类，用来封装客户信息。</p><p>②该类封装客户一以下信息：</p><ul><li>String name：客户姓名</li><li>char gender：性别</li><li>int age：年龄</li><li>String phone：电话号码</li><li>String email：电子邮箱</li></ul><p>③提供各种属性的get/set方法。</p><p>④提供所需的构造器（可自行确定）。</p></li><li><p>实现Customer类</p><p>①按照设计要求编写Customer类，并编译。</p><p>②在Customer类中临时添加一个main方法中，作为单元测试方法。</p><ul><li>在方法中创建Customer对象，并调用对象的各个方法，以测试该类是否编写正确。</li></ul></li></ol><h2 id="CustomerList类"><a href="#CustomerList类" class="headerlink" title="CustomerList类"></a>CustomerList类</h2><ol><li><p>CustomerList类的设计</p><p>①CustomerList为Customer对象的管理模块，内部使用数组管理一组Customer对象。</p><p>②本类封装以下信息：</p><ul><li>Customer[] customers：用来保存客户对象的数组</li><li>int intotal：记录已保存客户对象的数量</li></ul><p>③该类至少提供以下构造器和方法：</p><ul><li><p>public CustomerList(int totalCustomer) </p><p>用途：构造器，用来初始化customers数组</p><p>参数：totalCustomer：指定customers数组的最大空间</p></li><li><p>public boolean addCustomer(Customer customer) </p><p>用途：将参数customer添加到数组中最后一个客户对象记录之后</p><p>参数：customer指定要添加的客户对象</p><p>返回：添加成功返回true；false表示数组已满，无法添加</p></li><li><p>public boolean replaceCustomer(int index, Customer cust)</p><p>用途：用参数customer替换数组中由index指定的对象</p><p>参数：customer指定替换的新客户对象</p><p>​       index指定所替换对象在数组中的位置，从0开始</p><p>返回：替换成功返回true；false表示索引无效，无法替换</p></li><li><p>public boolean deleteCustomer(int index)</p><p>用途：从数组中删除参数index指定索引位置的客户对象记录</p><p>参数： index指定所删除对象在数组中的索引位置，从0开始</p><p>返回：删除成功返回true；false表示索引无效，无法删除</p></li><li><p>public Customer[] getAllCustomers() </p><p>用途：返回数组中记录的所有客户对象</p><p>返回： Customer[] 数组中包含了当前所有客户对象，该数组长度与对象个数相同。</p></li><li><p>public Customer getCustomer(int index) </p><p>用途：返回参数index指定索引位置的客户对象记录</p><p>参数： index指定所要获取的客户在数组中的索引位置，从0开始</p><p>返回：封装了客户信息的Customer对象</p></li><li><p>public int getTotal()</p></li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200810171411.png" align="let"></li><li><p>实现CustomerList类</p><p>①按照设计要求编写CustomerList类，并编译</p><p>②在CustomerList类中临时添加一个main方法中，作为单元测试方法。</p><p>③在方法中创建CustomerList对象（最多存放5个客户对象），然后分别用模拟数据调用以下各个方法，以测试各方法是否编写正确：</p><ul><li>addCustomer()</li><li>replaceCustomer()</li><li>deleteCustomer()</li><li>getAllCustomers()</li><li>getCustomer()</li><li>getTotal()</li></ul><p>④进一步测试以下情况，以验证该类是否编写正确：</p><ul><li>调用addCustomer方法，添加至少5个以上客户对象时</li><li>当数组中客户对象数量为0时，仍然调用replaceCustomer方法替换对象</li><li>当数组中客户对象数量为0时，仍然调用deleteCustomer方法删除对象</li><li>对于replaceCustomer、 deleteCustomer和getCustomer的调用，当参数index的值无效时（例如-1或6）</li><li>getAllCustomers方法返回的数组长度是否与实际的客户对象数量一致</li></ul></li></ol><h2 id="CustomerView类"><a href="#CustomerView类" class="headerlink" title="CustomerView类"></a>CustomerView类</h2><ol><li><p>CustomerView类的设计</p><p>①Customer类为主模块，负责菜单的显示和处理用户操作</p><p>②本类封装以下信息：</p><ul><li><p>CustomerList customerList = new CustomerList(10);</p><p>创建最大包含10个客户对象的CustomerList 对象，供以下各成员方法使用。</p></li></ul><p>③该类至少提供以下方法：</p><ul><li><p>public void enterMainMenu() </p><p>用途：显示主菜单，响应用户输入，根据用户操作分别调用其他相应的成员方法（如addNewCustomer），以完成客户信息处理。</p></li><li><p>private void addNewCustomer() </p><p>private void modifyCustomer()</p><p>private void deleteCustomer()</p><p>private void listAllCustomers()</p><p>用途：这四个方法分别完成“添加客户”、“修改客户”、“删除客户”和“客户列表”等各菜单功能。</p><p> 这四个方法仅供enterMainMenu()方法调用。</p></li><li><p>public static void main(String[] args)</p><p>用途：创建CustomerView实例，并调用 enterMainMenu()方法以执行程序。</p></li></ul></li><li><p>实现CustomerView类</p><p>①按照设计要求编写CustomerView类，逐一实现各个方法，并编译</p><p>②执行main方法中，测试以下功能：</p><ul><li>主菜单显示及操作是否正确</li><li>“添加客户”操作是否正确，给用户的提示是否明确合理；测试当添加的客户总数超过10时，运行是否正确</li><li>“修改客户”操作是否正确，给用户的提示是否明确合理；</li><li>“删除客户”操作是否正确，给用户的提示是否明确合理；</li><li>“客户列表”操作是否正确，表格是否规整；</li></ul><p>③当软件退出时，所有客户信息便丢失了！运用什么手段可以将这些信息长久保存，以便在下一次运行软件时继续使用？</p></li></ol><h1 id="代码及运行结果"><a href="#代码及运行结果" class="headerlink" title="代码及运行结果"></a>代码及运行结果</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>CMUtility</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.project2;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">CMUtility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CMUtility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; </span><br><span class="line">                c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">(<span class="keyword">char</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit, String defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(limit, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Customer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.project2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Customer为实体类，用来封装客户信息。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-10    18:16:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> gender;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">//电子邮箱</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">char</span> gender, <span class="keyword">int</span> age, String phone, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">char</span> gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CustomerList</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.project2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> CustomerList为Customer对象的管理模块，内部使用数组管理一组Customer对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-10    18:21:20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer[] customers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerList</span><span class="params">(<span class="keyword">int</span> totalCustomer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = <span class="keyword">new</span> Customer[totalCustomer];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(total &gt;= customers.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            customers[total++] = customer;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replaceCustomer</span><span class="params">(<span class="keyword">int</span> index,Customer cust)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; total)    &#123;</span><br><span class="line">            customers[index] = cust;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; total)    &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = index;i &lt; total - <span class="number">1</span>;i++) &#123;</span><br><span class="line">                customers[i] = customers[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            customers[--total] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Customer[] getAllCustomers() &#123;</span><br><span class="line">        Customer[] cust = <span class="keyword">new</span> Customer[total];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; total;i++) &#123;</span><br><span class="line">            cust[i] = customers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cust;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;=<span class="number">0</span> &amp;&amp; index &lt; total) &#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CustomerView</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.project2;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> CustomerView为主模块，负责菜单的显示和处理用户操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-10    20:14:50</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerView</span> </span>&#123;    </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    CustomerList customerList = <span class="keyword">new</span> CustomerList(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isContinue = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------客户信息管理软件------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t1 添加客户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t2 修改客户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t3 删除客户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t4 客户列表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t5 退        出&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;\t请选择(1-5):&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> choice = CMUtility.readMenuSelection();</span><br><span class="line">            <span class="keyword">switch</span>(choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                addNewCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                modifyCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                deleteCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                listAllCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;确认退出？（y/n，不区分大小写）&quot;</span>);</span><br><span class="line">                <span class="keyword">char</span> isQuit = CMUtility.readConfirmSelection();</span><br><span class="line">                <span class="keyword">if</span>(isQuit == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">                    isContinue = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(isContinue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNewCustomer</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">&quot;------添加客户------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        String name = CMUtility.readString(<span class="number">10</span>);<span class="comment">//姓名</span></span><br><span class="line">        System.out.print(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> gender = CMUtility.readChar();<span class="comment">//性别</span></span><br><span class="line">        System.out.print(<span class="string">&quot;年龄：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = CMUtility.readInt();<span class="comment">//年龄</span></span><br><span class="line">        System.out.print(<span class="string">&quot;电话号码：&quot;</span>);</span><br><span class="line">        String phone = CMUtility.readString(<span class="number">16</span>);<span class="comment">//电话号码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;电子邮箱：&quot;</span>);</span><br><span class="line">        String email = CMUtility.readString(<span class="number">30</span>);<span class="comment">//电子邮箱</span></span><br><span class="line">        <span class="keyword">boolean</span> isAdd = customerList.addCustomer(<span class="keyword">new</span> Customer(name,gender,age,phone,email));</span><br><span class="line">        <span class="keyword">if</span>(isAdd) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------添加完成------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;记录已满，无法添加！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modifyCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------修改客户------&quot;</span>);</span><br><span class="line">        Customer cust = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待修改客户编号(-1退出)：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> index = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &gt; <span class="number">0</span> &amp;&amp; index &lt;= customerList.getTotal()) &#123;</span><br><span class="line">                cust = customerList.getCustomer(index - <span class="number">1</span>);</span><br><span class="line">                System.out.print(<span class="string">&quot;姓名(&quot;</span> + cust.getName() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">                String name = CMUtility.readString(<span class="number">10</span>, cust.getName());</span><br><span class="line">                cust.setName(name);</span><br><span class="line">                System.out.print(<span class="string">&quot;性别(&quot;</span> + cust.getGender() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">                <span class="keyword">char</span> gender = CMUtility.readChar(cust.getGender());</span><br><span class="line">                cust.setGender(gender);</span><br><span class="line">                System.out.print(<span class="string">&quot;年龄(&quot;</span> + cust.getAge() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> age = CMUtility.readInt(cust.getAge());</span><br><span class="line">                cust.setAge(age);</span><br><span class="line">                System.out.print(<span class="string">&quot;电话号码(&quot;</span> + cust.getPhone() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">                String phone = CMUtility.readString(<span class="number">16</span>, cust.getPhone());</span><br><span class="line">                cust.setPhone(phone);</span><br><span class="line">                System.out.print(<span class="string">&quot;电子邮箱(&quot;</span> + cust.getEmail() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">                String email = CMUtility.readString(<span class="number">30</span>, cust.getEmail());</span><br><span class="line">                cust.setEmail(email);</span><br><span class="line">                <span class="keyword">boolean</span> isModify = customerList.replaceCustomer(index - <span class="number">1</span>, cust);</span><br><span class="line">                <span class="keyword">if</span>(isModify) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;------修改完成------&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;写入失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法找到指定客户,修改失败!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------删除客户------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待删除客户编号(-1退出)：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> index = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;确认是否删除(y/s，不区分大小写)：&quot;</span>);</span><br><span class="line">                <span class="keyword">char</span> isDelete = CMUtility.readConfirmSelection();</span><br><span class="line">                <span class="keyword">if</span>(isDelete == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isDel = customerList.deleteCustomer(index - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(isDel) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;------删除完成------&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;无法找到指定用户，删除失败！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------客户列表------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;编号\t姓名\t性别\t年龄\t电话\t\t邮箱&quot;</span>);</span><br><span class="line">        Customer[] cust = customerList.getAllCustomers();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cust.length;i++) &#123;</span><br><span class="line">            String info = (i + <span class="number">1</span>) + <span class="string">&quot;\t&quot;</span> + cust[i].getName() + <span class="string">&quot;\t&quot;</span> + cust[i].getGender() + <span class="string">&quot;\t&quot;</span> + cust[i].getAge() + <span class="string">&quot;\t&quot;</span> + cust[i].getPhone() + <span class="string">&quot;\t&quot;</span> + cust[i].getEmail();</span><br><span class="line">            System.out.println(info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CustomerView view = <span class="keyword">new</span> CustomerView();</span><br><span class="line">        view.enterMainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200811095558.png" align="left">]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章面向对象编程（上）</title>
      <link href="/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：Java面对对象学习的三条主线"><a href="#前言：Java面对对象学习的三条主线" class="headerlink" title="前言：Java面对对象学习的三条主线"></a>前言：Java面对对象学习的三条主线</h1><ol><li>Java类及类的成员：属性、方法、构造器；代码块、内部类；</li><li>面向对象的三大特征：封装性、继承性、多态性（、抽样性）；</li><li>其他关键字：this、super、final、abstract、interface、package、import等。</li></ol><blockquote><p>三条主线并行推进</p></blockquote><h1 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h1><h2 id="面向过程与面向对象区别"><a href="#面向过程与面向对象区别" class="headerlink" title="面向过程与面向对象区别"></a>面向过程与面向对象区别</h2><ol><li><p>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</p></li><li><p>面向对象：将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p></li></ol><h2 id="面对对象的三大特征"><a href="#面对对象的三大特征" class="headerlink" title="面对对象的三大特征"></a>面对对象的三大特征</h2><ol><li><p>封装（Encapsulation）</p></li><li><p>继承（Inheritance）</p></li><li><p>多态（Polymorphism）</p></li></ol><h2 id="面对对象的思想概述"><a href="#面对对象的思想概述" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h2><ol><li><p>程序员从面向过程的执行者转化成了面向对象的指挥者。</p></li><li><p>面对对象分析问题的思路和步骤：</p><ul><li>根据问题需要，选择问题所针对的现实世界中的实体。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象，对象是计算机世界中解决问题的最终工具。</li></ul></li></ol><h1 id="Java基本元素：类和对象"><a href="#Java基本元素：类和对象" class="headerlink" title="Java基本元素：类和对象"></a>Java基本元素：类和对象</h1><h2 id="面对对象的思想概述-1"><a href="#面对对象的思想概述-1" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h2><ol><li><p>类（Class）和对象（Object）是面向对象的核心概念。</p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例（instance）</li></ul></li><li><p>万物皆对象</p><ul><li>面对对象程序设计的重点是类的设计</li><li>类的设计，其实就是类的成员的设计</li></ul></li></ol><h2 id="Java类及类的成员"><a href="#Java类及类的成员" class="headerlink" title="Java类及类的成员"></a>Java类及类的成员</h2><ol><li><p>现实世界的生物体，大到鲸鱼，小到蚂蚁，都是由最基本的细胞构成的。同理，Java代码世界是由诸多不同功能的类构成的。</p></li><li><p>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质……那么，Java中用类来描述事物也是如此。常见类的成员有：</p><ul><li>属性：对应类中的成员变量</li><li>行为：对应类中的成员方法</li></ul></li></ol><blockquote><p>Field = 属性 = 成员变量 = 域、字段，Method = （成员）方法 = 函数</p><p>创建类的对象 = 类的实例化 = 实例化类</p></blockquote><h2 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h2><h3 id="面对对象思想落地的实现"><a href="#面对对象思想落地的实现" class="headerlink" title="面对对象思想落地的实现"></a>面对对象思想落地的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.dawn333.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>    一、类和对象的使用（面对对象思想落地的实现）：</span></span><br><span class="line"><span class="comment"> * 1、创建类，设计类的成员</span></span><br><span class="line"><span class="comment"> * 2、创建类的对象</span></span><br><span class="line"><span class="comment"> * 3、通过“对象.属性”或“对象.方法”调用对象的结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     二、如果创建了多个对象，则每个对象都独立的拥有一套属性。（非static）</span></span><br><span class="line"><span class="comment"> *     意味着，如果改一个对象的属性a，不影响另一个对象属性a的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-30    16:32:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person类的对象、</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用对象的结构：属性、方法</span></span><br><span class="line">        <span class="comment">//调用属性：对象.属性</span></span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法：对象.方法</span></span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep();</span><br><span class="line">        p1.talk(<span class="string">&quot;Chinese&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p3 = p1;</span><br><span class="line">        <span class="comment">//将p1变量保存的地址赋给p3，导致p1和p3指向了堆空间中的同一个对象实体。</span></span><br><span class="line">        System.out.println(p3.name);<span class="comment">//Tom</span></span><br><span class="line">        p3.age = <span class="number">10</span>;</span><br><span class="line">        System.out.println(p1.age);<span class="comment">//10        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以说话，使用的语言是：&quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230211.png"></p><h2 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230330.png"></p><ol><li><p>堆（heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p></li><li><p>通常所说的栈（stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（bolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</p></li><li><p>方法区（method area），用于存储已被虚拟机加载类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></li><li><p>对象内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200803230516.png" alt="03对象的内存解析"></p></li></ol><h3 id="内存解析的说明"><a href="#内存解析的说明" class="headerlink" title="内存解析的说明"></a>内存解析的说明</h3><ol><li><p>引用类型的变量，只可能存储两类值：null或地址值（含变量的类型）</p></li><li><p>对象数组的内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806155821.png"></p></li></ol><h3 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h3><ol><li>关注书籍：《JVM规范》</li><li>虚拟机栈即为平时提到的栈结构，<font color="red">我们将局部变量存储在栈结构中</font>。</li><li>堆，我们将new出来的结构（比如数组、对象）加载在堆空间中。补充：对象的属性（非static）加载在堆空间中。</li></ol><h2 id="理解“万事万物皆对象”"><a href="#理解“万事万物皆对象”" class="headerlink" title="理解“万事万物皆对象”"></a>理解“万事万物皆对象”</h2><ol><li>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。<ul><li>Scanner，String等</li><li>文件：File</li><li>网络资源：URL</li></ul></li><li>涉及到Java语言与前端HTML、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</li></ol><h2 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h2><ol><li><p>理解：我们创建的对象没有显示的赋给一个变量名，    即为匿名对象。</p></li><li><p>特征：匿名对象只能代用一次。</p></li><li><p>使用：如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 匿名对象的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    16:04:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;正常调用：&quot;</span>);</span><br><span class="line">        p.sendEmail();</span><br><span class="line">        p.playGame();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//匿名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Phone().sendEmail();</span><br><span class="line">        <span class="keyword">new</span> Phone().playGame();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象只能代用一次：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Phone().price = <span class="number">1999</span>;</span><br><span class="line">        <span class="keyword">new</span> Phone().showPrice();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n匿名对象的使用：&quot;</span>);</span><br><span class="line">        PhoneMall mall = <span class="keyword">new</span> PhoneMall();</span><br><span class="line"><span class="comment">//        mall.show(p);</span></span><br><span class="line">        mall.show(<span class="keyword">new</span> Phone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneMall</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">        phone.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price;<span class="comment">//价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机的价格为：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89%5Cimage-20200806162820788.png" alt="image-20200806162820788"></p></li></ol><h1 id="类的成员之一：属性"><a href="#类的成员之一：属性" class="headerlink" title="类的成员之一：属性"></a>类的成员之一：属性</h1><h2 id="类中属性的使用"><a href="#类中属性的使用" class="headerlink" title="类中属性的使用"></a>类中属性的使用</h2><h3 id="属性（成员变量）与局部变量区别"><a href="#属性（成员变量）与局部变量区别" class="headerlink" title="属性（成员变量）与局部变量区别"></a>属性（成员变量）与局部变量区别</h3><ol><li><p>相同点</p><ul><li>定义变量的格式：数据类型 变量名 = 变量值</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul></li><li><p>不同点</p><ul><li><p>在类中声明的位置不同：</p><ul><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、构造器形参、构造器内部的变量</li></ul></li><li><p>关于权限修饰符</p><ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符，常用的权限修饰符有：private、public、缺省、protected —》讲封装性时再说，目前缺省即可。</li><li>局部变量：不可以使用权限修饰符。</li></ul></li><li><p>默认初始化值的情况</p><ul><li>属性：类的属性，根据其类型，都有默认初始化值。<ul><li>整形（byte、short、int、long）：0</li><li>浮点型（float、double）：0.0</li><li>字符型（char）：0（或’\u0000’）</li><li>布尔型（boolean）：false</li><li>引用数据类型（类、数组、接口）：null</li></ul></li><li>局部变量：没有默认初始化值，意味着在调用局部变量之前一定要显示赋值。<ul><li>特别地：形参在调用时，我们赋值即可，例如下列代码实例的User方法中的String language。</li></ul></li></ul></li><li><p>在内存中加载的位置</p><ul><li>属性：加载到堆空间中（非static）</li><li>局部变量：加载到栈空间</li></ul></li></ul></li><li><p>变量的分类二：按照在类中声明的位置</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806153535.png"></p></li></ol><h3 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类中属性的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    14:49:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(u1.name);</span><br><span class="line">        System.out.println(u1.age);</span><br><span class="line">        System.out.println(u1.isMale);</span><br><span class="line">        u1.talk(<span class="string">&quot;日语&quot;</span>);<span class="comment">//特别的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性（或成员变量）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;<span class="comment">//形参，也是局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我们使用&quot;</span> + language +<span class="string">&quot;进行交流。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String food = <span class="string">&quot;烙饼&quot;</span>;<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;北方人喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类的成员之二：方法"><a href="#类的成员之二：方法" class="headerlink" title="类的成员之二：方法"></a>类的成员之二：方法</h1><ul><li>方法：描述类具有的功能。比如：Math类：sqrt()\random()\……<ul><li>Scanner类：nextXxx()……</li><li>Arrarys类：sort()\binarySearch()\toString()\equals()\……</li></ul></li></ul><h2 id="类中方法的声明和使用"><a href="#类中方法的声明和使用" class="headerlink" title="类中方法的声明和使用"></a>类中方法的声明和使用</h2><ol><li><p>举例（后面的代码实例中）：</p><ul><li>public void eat(){}（void：没有返回值）</li><li>public void sleep(int hour){}</li><li>public String getNmae() {}（String：返回一个String类型的数据）</li><li>public String getNation(String nation){}</li></ul></li><li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){</p><p>​    方法体</p><p>​    }</p><ul><li>注意：static、final、abstract来修饰的方法以后再讲。</li></ul></li><li><p>说明：</p><ul><li><p>关于权限修饰符：目前默认方法的权限修饰符先都使用public。</p></li><li><p>Java规定的4种权限修饰符：private、public、缺省、protected —&gt; 封装性再细说.</p></li><li><p>返回值类型：有返回值or无返回值</p><ul><li><p>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中必须使用return关键字来返回指定类型的变量或常量。例如下列代码实例方法中的getName()方法。</p></li><li><p>如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不使用return。但是，如果使用的话，只能“return;”，表示结束此方法。</p></li><li><p>我们定义方法该不该有返回值？</p><p>①题目要求</p><p>②凭经验：具体问题具体分析</p></li></ul></li><li><p>方法名：属于标识符，遵循表示符的规则和命名规范，“见名知意”。</p></li><li><p>形参列表：方法可以声明0个，1个或多个形参。</p><ul><li><p>格式：数据类型1 形参1,数据类型2 形参2,…</p></li><li><p>我们定义方法时要不要形参？</p><p>① 题目要求</p><p>② 凭经验，具体问题具体分析</p></li></ul></li><li><p>方法体：方法功能的体现。</p></li></ul></li><li><p>return关键字的使用：</p><ul><li>使用范围：使用在方法体中。</li><li>作用：①结束方法；②针对于有返回值的方法，使用“return 数据;”方法返回所要的数据。</li><li>注意：return关键字后面不可以声明执行语句。</li></ul></li><li><p>方法的使用中可以调用当前类的属性或方法</p><ul><li>特别地：方法A中调用方法A：递归方法。</li><li>方法中不能再定义方法。</li></ul></li></ol><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    15:28:19</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomarTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customar</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性:</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;休息了&quot;</span> + hour + <span class="string">&quot;小时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNmae</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//没有else则报错，必须要有一个返回值。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">&quot;我的国籍是：&quot;</span> + nation;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的分类（按照是否有形参及返回值）"><a href="#方法的分类（按照是否有形参及返回值）" class="headerlink" title="方法的分类（按照是否有形参及返回值）"></a>方法的分类（按照是否有形参及返回值）</h2><table><thead><tr><th align="center"></th><th align="center">无返回值</th><th align="center">有返回值</th></tr></thead><tbody><tr><td align="center">无形参</td><td align="center">void方法名(){}</td><td align="center">返回值类型 方法名 (){}</td></tr><tr><td align="center">有形参</td><td align="center">void方法名(形参列表){}</td><td align="center">返回值类型 方法名 (形参列表){}</td></tr></tbody></table><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="练习一：创建一个Person类，其定义如下："><a href="#练习一：创建一个Person类，其定义如下：" class="headerlink" title="练习一：创建一个Person类，其定义如下："></a>练习一：创建一个Person类，其定义如下：</h3><table><thead><tr><th align="left">Person</th></tr></thead><tbody><tr><td align="left">name:String<br>age:int<br>sex:int</td></tr><tr><td align="left">+study():void<br>+showAge():void<br>+addAge(int i):int</td></tr></tbody></table><p>要求：</p><ul><li>创建Person类的对象，设置该对象的name、age和sex属性，调用study()方法，输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对象的age属性增加2岁。</li><li>创建第2个对象，执行上述操作，体会同一个类的不同对象之间的关系。</li></ul><p>Person类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类方法练习题 ：创建类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    19:17:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sex:1表明是男性</span></span><br><span class="line"><span class="comment">     * sex:0表明是女性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;studying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        age += i;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类方法练习题：测试（调用）创建的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    19:24:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     （1）创建Person类的对象，设置该对象的name、age和sex属性，调用study()方法，</span></span><br><span class="line"><span class="comment">         *     输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对</span></span><br><span class="line"><span class="comment">         *     象的age属性增加2岁。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用属性</span></span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">18</span>;</span><br><span class="line">        p1.sex = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        p1.study();</span><br><span class="line">        p1.showAge();</span><br><span class="line">        <span class="keyword">int</span> newAge = p1.addAge(<span class="number">2</span>);</span><br><span class="line">        System.out.println(p1.name + <span class="string">&quot;新年龄为：&quot;</span> + newAge);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     （2）创建第2个对象，执行上述操作，体会同一个类的不同对象之间的关系。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.study();</span><br><span class="line">        p2.showAge();</span><br><span class="line">        p2.addAge(<span class="number">2</span>);</span><br><span class="line">        p2.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805200444.png"></p><p>tips：在同一个包（package）里面，类方法可以分开写然后正常创建类的对象。</p><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 利用面向对象的编程方法，设计类Circle计算圆的面积。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    20:09:00</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle c1 = <span class="keyword">new</span> Circle();</span><br><span class="line">        c1.radius = <span class="number">2.1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对应方式一:</span></span><br><span class="line"><span class="comment">//        double area = c1.findArea();</span></span><br><span class="line"><span class="comment">//        System.out.println(area);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对应方式二:</span></span><br><span class="line">        c1.findArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式一：有返回值</span></span><br><span class="line"><span class="comment">//    public double findArea() &#123;</span></span><br><span class="line"><span class="comment">//        double area = Math.PI * radius * radius;</span></span><br><span class="line"><span class="comment">//        return area;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式二：无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = Math.PI * radius * radius;</span><br><span class="line">        System.out.println(<span class="string">&quot;面积为：&quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805202640.png"></p><h3 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>    3.1 编写程序，声明一个method方法，在方法中打印一个10*8的*型矩形，在main方法中调用改方法。</span></span><br><span class="line"><span class="comment"> *    3.2 修改上一个程序，在method方法中，除打印一个10*8的*型矩形外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"> *    3.3 修改上一个程序，在method方法中提供m和n两个参数，方法中打印一个m*n的*型矩形，并计算该矩形的面积，将其作为方法返回值。在main函数种调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    20:35:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Exercise3 test = <span class="keyword">new</span> Exercise3();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.1 测试：</span></span><br><span class="line">        <span class="comment">//test.method();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.2 测试：</span></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int area = test.method();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;面积为：&quot; + area);</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;面积为：&quot; + test.method());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.3 测试</span></span><br><span class="line">        <span class="keyword">int</span> area = test.method(<span class="number">12</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;面积为：&quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.1:</span></span><br><span class="line"><span class="comment">//    public void method() &#123;</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; 8;i++) &#123;</span></span><br><span class="line"><span class="comment">//            for(int j = 0;j &lt; 10;j++) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;* &quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.2:</span></span><br><span class="line"><span class="comment">//    public int method() &#123;</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; 8;i++) &#123;</span></span><br><span class="line"><span class="comment">//            for(int j = 0;j &lt; 10;j++) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;* &quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return 10 * 8;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    3.3:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.1：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805230403.png"></p><ul><li>3.2</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805213713.png"></p><ul><li>3.3</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805214434.png"></p><h3 id="练习四"><a href="#练习四" class="headerlink" title="练习四"></a>练习四</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 4.对象数组题目：</span></span><br><span class="line"><span class="comment"> *     定义类Student，包含3个属性：学号number（int），年级state（int），成绩score（int）。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</span></span><br><span class="line"><span class="comment"> *     问题一：打印出3年级（state值为3）的学生信息。</span></span><br><span class="line"><span class="comment"> *     问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line"><span class="comment"> *     提示：</span></span><br><span class="line"><span class="comment"> *     1）生成随机数：Math.random()，返回值类型double；</span></span><br><span class="line"><span class="comment"> *     2）四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    21:48:01</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明Student类型的数组</span></span><br><span class="line">        Student[] stu = <span class="keyword">new</span> Student[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="comment">//给数组元素赋值</span></span><br><span class="line">            stu[i] = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//Student对象的属性赋值</span></span><br><span class="line">            stu[i].number = (i + <span class="number">1</span>);</span><br><span class="line">            stu[i].state = (<span class="keyword">int</span>)(Math.random() * (<span class="number">6</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);<span class="comment">//6个年级</span></span><br><span class="line">            stu[i].score = (<span class="keyword">int</span>)(Math.random() * (<span class="number">100</span> - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：打印出3年级（state值为3）的学生信息:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(stu[i].info());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; stu.length -<span class="number">1</span> -i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stu[j].score &gt; stu[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">                    <span class="comment">//如果需要换序交换的是数组元素：Student对象！！！</span></span><br><span class="line">                    Student temp = stu[j];</span><br><span class="line">                    stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">                    stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> state;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;年级：&quot;</span> + state + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;成绩：&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200805223223.png" align="left"><ul><li>优化：将各个重复性操作封装成方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.oopexercise1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 4.对象数组题目：</span></span><br><span class="line"><span class="comment"> *     定义类Student，包含3个属性：学号number（int），年级state（int），成绩score（int）。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</span></span><br><span class="line"><span class="comment"> *     问题一：打印出3年级（state值为3）的学生信息。</span></span><br><span class="line"><span class="comment"> *     问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line"><span class="comment"> *     提示：</span></span><br><span class="line"><span class="comment"> *     1）生成随机数：Math.random()，返回值类型double；</span></span><br><span class="line"><span class="comment"> *     2）四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-5    21:48:01</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明Student类型的数组</span></span><br><span class="line">        Student[] stu = <span class="keyword">new</span> Student[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="comment">//给数组元素赋值</span></span><br><span class="line">            stu[i] = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//Student对象的属性赋值</span></span><br><span class="line">            stu[i].number = (i + <span class="number">1</span>);</span><br><span class="line">            stu[i].state = (<span class="keyword">int</span>)(Math.random() * (<span class="number">6</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);<span class="comment">//6个年级</span></span><br><span class="line">            stu[i].score = (<span class="keyword">int</span>)(Math.random() * (<span class="number">100</span> - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Exercise4 test = <span class="keyword">new</span> Exercise4();</span><br><span class="line">        <span class="comment">//遍历学生数组</span></span><br><span class="line">        test.print(stu);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：打印出3年级（state值为3）的学生信息:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        test.searchState(stu, <span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        test.sort(stu);</span><br><span class="line">        test.print(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历数组的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Student[] stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            System.out.println(stu[i].info());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 查找Student数组中指定年级的学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span>    2.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-522:44:37</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stu    要查找的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state    要找的年级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchState</span><span class="params">(Student[] stu, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].state == state) &#123;</span><br><span class="line">                System.out.println(stu[i].info());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 给Student数组排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-522:47:31</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stu </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Student[] stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stu.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; stu.length -<span class="number">1</span> -i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stu[j].score &gt; stu[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">                    <span class="comment">//如果需要换序交换的是数组元素：Student对象！！！</span></span><br><span class="line">                    Student temp = stu[j];</span><br><span class="line">                    stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">                    stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> state;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;年级：&quot;</span> + state + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;成绩：&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：面试遇到举例说明类和对象的关系时尽量举开发中的例子。</p></blockquote><h1 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h1><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><ol><li><p>定义</p><ul><li>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<ul><li>“两同一不同”：同一个类、相同的方法名；参数列表不同：参数个数不同、参数类型不同。</li></ul></li></ul></li><li><p>特点</p></li></ol><ul><li>与返回值类型无关，只看参数列表，且参数列表必须不同。（参数个数或参数类型）。调用时，根据方法参数列表的不同来区别。</li></ul><ol start="3"><li><p>示例</p><ul><li>Arrays类中重载的sort() / binarySearch()</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法重载举例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    18:51:26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadTest test = <span class="keyword">new</span> OverLoadTest();</span><br><span class="line">        test.getSum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如下4个方法构成了重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> d1, <span class="keyword">double</span> d2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public int getSum(int i,int j) &#123;</span></span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public void getSum(int m,int n) &#123;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：支持自动类型提升，例如，如果形参为double型，但是输入的形参为int型，则自动将int型转换为double型。</p></li><li><p>判断是否是重载</p></li></ol><ul><li>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系，<font color="red">只看形参数目和类型</font>。</li></ul><ol start="5"><li><p>通过对象调用方法时，如何确定某一个指定的方法：</p><ul><li>方法名 —&gt; 参数列表</li></ul></li></ol><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><h3 id="练习题一"><a href="#练习题一" class="headerlink" title="练习题一"></a>练习题一</h3><ul><li>编写程序，定义三个重载方法并调用。方法名为mOL。<ul><li>三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果、相乘并输出结果、输出字符串信息。</li><li>在主类的main方法中分别用参数区别调用三个方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义三个重载方法并调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    19:36:02</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadEx1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadEx1 m = <span class="keyword">new</span> OverLoadEx1();</span><br><span class="line">        m.mOL(<span class="number">2</span>);</span><br><span class="line">        m.mOL(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        m.mOL(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i * i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(i * j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习题二"><a href="#练习题二" class="headerlink" title="练习题二"></a>练习题二</h3><ul><li>定义三个重载方法max()，第一个方法求两个int值中的最大值，第二个方法求两个double值中的最大值，第三个方法求三个double值中的最大值，分别调用三个方法。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 重载方法练习二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    19:50:35</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadEx2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverLoadEx2 test = <span class="keyword">new</span> OverLoadEx2();</span><br><span class="line">        test.max(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        test.max(<span class="number">1.5</span>, <span class="number">3.5</span>);</span><br><span class="line">        test.max(<span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">7.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个方法求得最大值为：&quot;</span> + ((i &gt; j)? i : j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个方法求得最大值为：&quot;</span> + ((i &gt; j)? i : j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j,<span class="keyword">double</span> k)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个方法求得最大值为：&quot;</span> + ((((i &gt; j)? i : j) &gt; k)? ((i &gt; j)? i : j) : k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><ol><li><p>JavaSE 5.0中提供了Varargs(variable number of arguments)机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。</p><ul><li><p>JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</p><p><code>public static void test(int a,String[] books);</code></p></li><li><p>JDK 5.0：采用可变个数形参来定义方法，传入多个同一类型变量</p><p><code>public static void test(int a,String...books);</code></p></li></ul></li><li><p>具体使用：</p><ul><li>可变个数形参的格式：数据类型 … 变量名</li><li>当调用可变个数形参的方法时，传入的参数个数可以是：0个、1个、2个……</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载。</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不够成重载（即二者不能共存）。</li><li>可变个数形参在方法的形参列表中，必须声明在末尾。</li><li>可变个数形参在方法的形参列表中，最多只能声明一个可变形参。</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 可变个数的形参具体使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    20:29:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarAgu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VarAgu test = <span class="keyword">new</span> VarAgu();</span><br><span class="line">        test.show(<span class="number">12</span>);</span><br><span class="line">        test.show(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        test.show(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        test.show();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        test.show(new String[] &#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;);//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量,JDK 5.0向前兼容,所以(String ... strs)同样可以用此方法传入形参</span></span><br><span class="line">        test.show(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(int i)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(String)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String ... strs)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(String ... strs)&quot;</span>);</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    public void show(String[] strs) &#123;//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;show(String[] strs)&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928224258.png" align="left"></li></ol><h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a><font color="red">方法参数的值传递机制</font></h2><h3 id="变量的值传递机制"><a href="#变量的值传递机制" class="headerlink" title="变量的值传递机制"></a>变量的值传递机制</h3><ol><li><p>关于变量的赋值：</p><p>如果是基本数据类型，此时赋值的是变量所保存的数据值；</p><p>如果变量是引用数据类型，此时，赋值的是变量所保存的数据的地址值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 方法参数的值传递机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    21:03:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******基本数据类型的值传递情况******&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = m;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;******引用数据类型的值传递情况******&quot;</span>);</span><br><span class="line">        Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">        o1.orderID = <span class="number">1001</span>;</span><br><span class="line">        Order o2 = o1;<span class="comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderID = &quot;</span> + o1.orderID + <span class="string">&quot;, o2.orderID = &quot;</span> + o2.orderID);</span><br><span class="line">        o2.orderID = <span class="number">1002</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderID = &quot;</span> + o1.orderID + <span class="string">&quot;, o2.orderID = &quot;</span> + o2.orderID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> orderID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806215036.png" align="left"></li></ol><h3 id="方法的形参传递机制：值传递"><a href="#方法的形参传递机制：值传递" class="headerlink" title="方法的形参传递机制：值传递"></a>方法的形参传递机制：值传递</h3><ol><li><p>形参：方法定义时，声明的小括号内的参数。</p><p>实参：调用方法时实际传递给形参的数据。</p></li><li><p><font color="red">值传递机制</font>：</p><p>如果参数是<strong style="background:yellow">基本数据类型</strong>，此时实参赋给形参的是实参真实存储的<strong style="background:yellow">数据值</strong>;</p><p>如果参数是<strong style="background:yellow">引用数据类型</strong>，此时实参赋给形参的是实参存储数据的<strong style="background:yellow">地址值</strong>。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 法的形参传递机制：值传递</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-6    21:52:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        <span class="comment">//交换两个变量值的操作</span></span><br><span class="line"><span class="comment">//        int temp = m;</span></span><br><span class="line"><span class="comment">//        m = n;</span></span><br><span class="line"><span class="comment">//        n = temp;</span></span><br><span class="line">        ValueTransfer01 test = <span class="keyword">new</span> ValueTransfer01();</span><br><span class="line">        test.swap(m, n);<span class="comment">//未能交换，原因看内存解析。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806221508.png" align="left"><ul><li>内存解析（交换失败原因）</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806220731.png" style="zoom:75%;" align="left"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransfer02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        data.m = <span class="number">10</span>;</span><br><span class="line">        data.n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;,n = &quot;</span> + data.n);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//交换m和n的值</span></span><br><span class="line"><span class="comment">//        int temp = data.m;</span></span><br><span class="line"><span class="comment">//        data.m = data.n;</span></span><br><span class="line"><span class="comment">//        data.n = temp;</span></span><br><span class="line">        ValueTransfer02 test = <span class="keyword">new</span> ValueTransfer02();</span><br><span class="line">        test.swap(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;,n = &quot;</span> + data.n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = data.m;</span><br><span class="line">        data.m = data.n;</span><br><span class="line">        data.n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806224618.png" align="left"><ul><li>内存解析</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806223846.png" style="zoom:40%;" align="left"></li></ol><h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><h4 id="例题一：方法的参数传递"><a href="#例题一：方法的参数传递" class="headerlink" title="例题一：方法的参数传递"></a>例题一：方法的参数传递</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    8:27:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ValueTransferEx01 test = <span class="keyword">new</span> ValueTransferEx01();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v,i);</span><br><span class="line">        System.out.println(v.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.println(v.i + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果</p><p>15 0</p><p>20</p></li><li><p>内存解析</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807091641.png" style="zoom:40" align="left"></li></ul><h4 id="练习二-1"><a href="#练习二-1" class="headerlink" title="练习二"></a>练习二</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    8:48:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ValueTransferEx02 test = <span class="keyword">new</span> ValueTransferEx02();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        test.method(a,b);<span class="comment">//需要在method方法被调用之后，仅打印出a = 100,b = 200，请写出method方法的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码编写处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span> * a;</span><br><span class="line">        b = <span class="number">20</span> * b;</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">        System.exit(<span class="number">0</span>);<span class="comment">//直接退出程序，不再执行后续步骤</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二：对输出流做处理，以后再学</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>本题不是考察方法的参数传递，只是一个易混淆思考方向的题目</p><h4 id="练习三：将对象作为参数传递给方法"><a href="#练习三：将对象作为参数传递给方法" class="headerlink" title="练习三：将对象作为参数传递给方法"></a>练习三：将对象作为参数传递给方法</h4><ol><li><p>定义一个Circle类，包含一个double型的radius属性代表圆的半径，一个findArea()返回圆的面积。</p></li><li><p>定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：public void printAreas(Circle c, int time)</p><p>在printAreas方法中打印输出1到time之间的每个整数半径值，以及对应的面积。例如，time为5，输出半径为1，2，3，4，5及其对应的圆面积。</p></li><li><p>在main方法中调用printAreas()，调用完毕后输出当前半径值。程序运行结果如图所示：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807091933.png" align="left" style="zoom:100%"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 值传递机制练习三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    9:30:36</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferEx03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PassObject test = <span class="keyword">new</span> PassObject();</span><br><span class="line">        Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">5</span>;</span><br><span class="line">        test.printAreas(c, time);</span><br><span class="line">        System.out.println(<span class="string">&quot;now radius is:&quot;</span> + c.radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAreas</span><span class="params">(Circle c,<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Radius\t\tArea&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> i = <span class="number">1</span>;i &lt;= time;i++) &#123;</span><br><span class="line">            c.radius = i;</span><br><span class="line">            System.out.println(c.radius + <span class="string">&quot;\t\t&quot;</span> + c.findArea());</span><br><span class="line">        &#125;</span><br><span class="line">        c.radius = time + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807152312.png" align="left"></li></ol><h2 id="递归（recursion）方法"><a href="#递归（recursion）方法" class="headerlink" title="递归（recursion）方法"></a>递归（recursion）方法</h2><ol><li><p>递归方法：一个方法体内调用自身。</p></li><li><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无需循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 递归方法示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:04:41</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算1-100内所有数的和</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++) &#123;</span><br><span class="line">            sum1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一：&quot;</span> + sum1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二（递归）：</span></span><br><span class="line">        RecursionIns test = <span class="keyword">new</span> RecursionIns();</span><br><span class="line">        <span class="keyword">int</span> sum2 = test.getSum(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式二：&quot;</span> + sum2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算阶乘</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> fac = test.getFac(n);</span><br><span class="line">        System.out.println(n + <span class="string">&quot;的阶乘为：&quot;</span> + fac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算1-100内所有数的和的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n + getSum(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算1-n之间的乘积：n!</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * getFac(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807152550.png" align="left"></li></ol><h3 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><ul><li>已知有一个数列：f(0) = 1，f(1) = 4，f(n+2) = 2*f(n+1) + f(n)，其中n是大于0的整数，求f(10)的值。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 已知有一个数列：f(0) = 1，f(1) = 4，f(n+2) = 2*f(n+1) + f(n)，</span></span><br><span class="line"><span class="comment"> *                 其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:33:08</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionEx01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RecursionEx01 test = <span class="keyword">new</span> RecursionEx01();</span><br><span class="line">        System.out.println(<span class="string">&quot;f(10) = &quot;</span> + test.f(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>*f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807154838.png" align="left"><h4 id="练习二：斐波那契数列（Fibonacci）"><a href="#练习二：斐波那契数列（Fibonacci）" class="headerlink" title="练习二：斐波那契数列（Fibonacci）"></a>练习二：斐波那契数列（Fibonacci）</h4><ul><li><p>输入一个数据n，计算斐波那契数列(Fibonacci)的第n个值1 1 2 3 5 8 13 21 34 55。</p><p>规律：一个数等于前两个数之和。</p><p>要求：计算斐波那契数列的第n个值，并将整个数列打印出来。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.triabin.methodagain;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 计算斐波那契数列第n个值并打印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-7    15:58:39</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RecursionEx02 test = <span class="keyword">new</span> RecursionEx02();</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印斐波那契数列前几位？（输入任意大于0的整数）&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = input.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">            System.out.print(test.f(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807160649.png" align="left"><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><ol><li><p>什么是方法重载？</p><p>“两同一不同”：同一个类、相同的方法名；参数列表不同。</p></li><li><p>说明Java方法中的参数传递机制的具体体现。</p><p>基本数据类型：数据值</p><p>引用数据类型：地址值（含变量的数据类型）例：</p><p><code>Person p1 =  new Person();</code></p><p><code>User u1 = p1;//编译错误</code></p></li><li><p>成员变量和局部变量在声明的位置上是否有默认初始化值？</p></li><li><p>谈谈return关键字的使用。</p><p>①结束方法</p><p>②针对于有返回值的方法，return + 返回数据;</p></li><li><p>拓展：宋老师，我今天去百度面试，遇到一个双重递归调用的问题，我琢磨了一下，完全不知道为什么。打断点了，也还是没看懂程序为什么会那样走。您有空可以看一下，求指教。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试递归调用的次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">()</span></span>&#123; recursion(<span class="number">10</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    System.out.println(<span class="string">&quot;count1:&quot;</span> + count + <span class="string">&quot;    k:&quot;</span> + k);</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> recursion(k - <span class="number">1</span>) + recursion(k - <span class="number">2</span>);<span class="comment">//287</span></span><br><span class="line">    <span class="comment">//return recursion(k - 1);//11</span></span><br><span class="line">    <span class="comment">//return recursion(k - 1) + recursion(k - 1);//2047</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>图解</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807225959.png" align="left"></li></ol><h1 id="OOP特征一：封装与隐藏"><a href="#OOP特征一：封装与隐藏" class="headerlink" title="OOP特征一：封装与隐藏"></a>OOP特征一：封装与隐藏</h1><ul><li>OOP，即Object oriented programming，面向对象编程。</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ol><li>为什么需要封装？封装的作用和含义？<ul><li>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部结构吗？有必要碰电动机吗?</li><li>我要开车……</li></ul></li><li>我们程序设计追求“高内聚，低耦合”。<ul><li>高内聚：类的内部操作细节自己完成，不允许外部干涉；</li><li>低耦合：仅对外暴露少量的方法用于使用。</li></ul></li><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，<font color="red">把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</font></li></ol><h2 id="信息的封装和隐藏"><a href="#信息的封装和隐藏" class="headerlink" title="信息的封装和隐藏"></a>信息的封装和隐藏</h2><ul><li><p>当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值的操作要受属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们需要给属性赋值加入额外的条件。这个条件就不能再属性声明时体现，我们只能通过方法进行限制条件的添加。（比如，示例中的setLegs()方法）同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的（private）。</p><p>–&gt; 此时，针对属性就体现了封装性。</p></li></ul><ol><li><p>封装性的体现：我们讲类的属性xxx私有化（private），同时，提供公共的（public）方法来获取（getXxx）和设置（setXxx）此属性的值。</p></li><li><p>拓展：封装性的体现</p><p>①如上    ②不对外暴露的私有的方法    ③单例模式    …</p></li><li><p>示例</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 封装与隐藏示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    9:04:49</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsAnimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        a.name = <span class="string">&quot;大黄&quot;</span>;</span><br><span class="line">        <span class="comment">//a.age = 1;//age属性私有后无法赋值，通过setAge()方法来赋值</span></span><br><span class="line">        a.setAge(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//a.legs = 4;//The field Animal.legs is not visible（不可见）</span></span><br><span class="line">        a.setLegs(<span class="number">4</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        a.setLegs(<span class="number">6</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        a.setLegs(-<span class="number">2</span>);</span><br><span class="line">        a.show();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> legs;<span class="comment">//私有权限修饰符，使得外界不能直接调用legs这个参数，只能通过规定的方式（setLegs()）来设置legs属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//筛选合理赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLegs</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= <span class="number">0</span> &amp;&amp; l % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            legs = l;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            legs = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//抛出一个异常（暂时没有讲）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//legs被私有化以后用它来获取当前legs属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> legs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物进食&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;，age:&quot;</span> + age + <span class="string">&quot;， legs:&quot;</span> + legs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供属性age的get和set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        age = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808104927.png" align="left"><h2 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h2><ul><li>封装性的体现，需要权限修饰符来配合</li></ul><ol><li><p>Java规定的种权限（从小到大排列）：private、缺省、protected、public</p></li><li><p>Java的权限修饰符public、protected、private置于类的成员定义前，用来限定对象对该类成员的访问权限。</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808095828.png" align="left"></li><li><p>4种权限修饰符可以用来修饰类及类的内部结构：属性、方法、构造器、内部类。</p></li><li><p>具体的，4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类；修饰类只能用default（缺省）、public。</p></li><li><p>代码示例</p><p>同一个包不同的类里面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 权限修饰符使用测试（同包不同类）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    10:58:12</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromissionInsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PermissionIns order = <span class="keyword">new</span> PermissionIns();</span><br><span class="line">        </span><br><span class="line">        System.out.print(order.orderDefault + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(order.orderPublic);</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        System.out.println(order.orderPrivate);//报错：The field PermissionIns.orderPrivate is not visible</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法也类似</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        order.methodDefault();</span><br><span class="line">        order.show();</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        order.methodPrivate;</span></span><br><span class="line">        order.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个Project不同的包里面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.prossiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.triabin.encapsulationconcealment.PermissionIns;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 权限修饰符使用测试（不同的包）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    11:43:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromissionClassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PermissionIns order = <span class="keyword">new</span> PermissionIns();</span><br><span class="line">        </span><br><span class="line">        System.out.println(order.orderPublic);</span><br><span class="line">        <span class="comment">//出了PromissionIns类所属的包以后，私有结构、缺省声明的结构都不可以用了</span></span><br><span class="line"><span class="comment">//        System.out.print(order.orderDefault + &quot; &quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(order.orderPrivate);//报错：The field PermissionIns.orderPrivate is not visible</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法也类似</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//出了PromissionIns类所属的包以后，私有结构、缺省声明的结构都不可以用了</span></span><br><span class="line"><span class="comment">//        order.methodDefault();</span></span><br><span class="line">        order.show();</span><br><span class="line">        order.methodPublic();</span><br><span class="line">        <span class="comment">//出了PromissionIns类以后，私有结构就不可以调用了。</span></span><br><span class="line"><span class="comment">//        order.methodPrivate;</span></span><br><span class="line">        order.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构的在被调用时的可见性大小。</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808122452.png" align="left"></li></ol><h2 id="章节练习-1"><a href="#章节练习-1" class="headerlink" title="章节练习"></a>章节练习</h2><p>创建程序，在其中定义两个类：Person和PersonTest类。定义如下：用setAge()设置人的合法年龄（0~130），用getAge()返回人的年龄。在PersonTest类中实例化Person类的对象b，调用setAge()和getAge()方法，体会Java的封装性。</p><table><thead><tr><th align="left">Person</th></tr></thead><tbody><tr><td align="left">-age:int</td></tr><tr><td align="left">+setAge(i:int)<br>+getAge():int</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.encapsulationconcealment;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 体会Java的封装性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    12:05:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person b = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;设置前年龄为：&quot;</span> + b.getAge());</span><br><span class="line">        b.setAge(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;设置后年龄为：&quot;</span> + b.getAge());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;\n范围限定测试：&quot;</span>);</span><br><span class="line">        b.setAge(-<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">130</span>) &#123;</span><br><span class="line">            age = i;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;传入的数据非法！&quot;);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;传入的数据非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808122355.png" align="left"></li></ul><h1 id="类的成员之三：构造器（或构造方法）"><a href="#类的成员之三：构造器（或构造方法）" class="headerlink" title="类的成员之三：构造器（或构造方法）"></a>类的成员之三：构造器（或构造方法）</h1><h2 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a>构造器的作用</h2><ol><li><p>创建对象</p></li><li><p>初始化对象的信息</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类的结构之三：构造器（或构造方法、constructor）的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    14:52:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建类的对象：new + 构造器</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.eat();</span><br><span class="line">        </span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person()....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808151757.png" align="left"></li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器。</li><li>定义构造器的格式：权限修饰符 类名(形参列表){}。</li><li>一个类中定义多个构造器，彼此构成重载。</li><li>一旦我们显式定义了构造器之后，系统就不再提供默认的空参构造器。</li><li>一个类中，至少会有一个构造器。</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>在前面定义的Person类中添加构造器，利用构造器设置所有人的age属性初始值都为18。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改上题中的类和构造器，增加name属性，使得每次创建Person对象的同时初始化对象的age属性值和name属性值。</p><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>-name:String</td></tr><tr><td>+setName(i:String)<br>+getName():String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 练习题第2题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:27:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonEx02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建类的对象：new + 构造器</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + p.getName() + <span class="string">&quot;\n年龄：&quot;</span> + p.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808161434.png" align="left"></li><li><p>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形面积。</p><p>在同一个包下，两个类分开创建。</p><ul><li>TriAngle类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:43:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriAngle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriAngle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开发时习惯上提供一个空参</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriAngle</span><span class="params">(<span class="keyword">double</span> b,<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TriAngleTest类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 另一个类中使用这些公共方法，计算三角形面积。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    15:54:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriAngleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一：调用空参的构造器&quot;</span>);</span><br><span class="line">        TriAngle t1 = <span class="keyword">new</span> TriAngle();</span><br><span class="line">        t1.setBase(<span class="number">2.0</span>);</span><br><span class="line">        t1.setHeight(<span class="number">2.4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长为&quot;</span> + t1.getBase() + <span class="string">&quot;，高为&quot;</span> + t1.getHeight() + <span class="string">&quot;，所以面积为&quot;</span> + (t1.getBase() * t1.getHeight() / <span class="number">2</span>) + <span class="string">&quot;。\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;方式二：调用带参的构造器&quot;</span>);</span><br><span class="line">        TriAngle t2 = <span class="keyword">new</span> TriAngle(<span class="number">2.0</span>,<span class="number">2.4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长为&quot;</span> + t2.getBase() + <span class="string">&quot;，高为&quot;</span> + t2.getHeight() + <span class="string">&quot;，所以面积为&quot;</span> + (t2.getBase() * t2.getHeight() / <span class="number">2</span>) + <span class="string">&quot;。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808161543.png" align="left"></li><li><p>定义Student类，有4个属性：String name、int age、String school、String major。定义Student类的3个构造器：</p><p>①第一个构造器Student(String n,int a)设置类的name和age属性；</p><p>②第二个构造器Student(String n,int a, String s)设置类的name，age和school属性；</p><p>③第三个构造器Student(String n,int a,String s,String m)设置类的name，age，school和major属性。</p><p>在main方法中分别调用不同的构造器创建对象，并输出器属性值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 课后练习三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    18:35:25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentEx03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + s.name + <span class="string">&quot;\tage:&quot;</span> + s.age + <span class="string">&quot;\tschool:&quot;</span> + s.school + <span class="string">&quot;\tmajor:&quot;</span> + s.major);</span><br><span class="line">        </span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;Triabin&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + s1.name + <span class="string">&quot;\tage:&quot;</span> + s1.age + <span class="string">&quot;\tschool:&quot;</span> + s1.school + <span class="string">&quot;\tmajor:&quot;</span> + s1.major);</span><br><span class="line">        </span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;Triabin&quot;</span>,<span class="number">18</span>,<span class="string">&quot;SUES&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + s2.name + <span class="string">&quot;\tage:&quot;</span> + s2.age + <span class="string">&quot;\tschool:&quot;</span> + s2.school + <span class="string">&quot;\tmajor:&quot;</span> + s2.major);</span><br><span class="line">        </span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;Triabin&quot;</span>,<span class="number">18</span>,<span class="string">&quot;SUES&quot;</span>,<span class="string">&quot;BTE&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + s3.name + <span class="string">&quot;\tage:&quot;</span> + s3.age + <span class="string">&quot;\tschool:&quot;</span> + s3.school + <span class="string">&quot;\tmajor:&quot;</span> + s3.major);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String school;</span><br><span class="line">    String major;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n,<span class="keyword">int</span> a,String s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        school = s;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n,<span class="keyword">int</span> a,String s,String m)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        school = s;        </span><br><span class="line">        major = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808185912.png" align="left"></li></ol><h2 id="总结：属性赋值的先后顺序"><a href="#总结：属性赋值的先后顺序" class="headerlink" title="总结：属性赋值的先后顺序"></a>总结：属性赋值的先后顺序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.constructor;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     总结：属性赋值的先后顺序</span></span><br><span class="line"><span class="comment"> *     ①默认初始化</span></span><br><span class="line"><span class="comment"> *     ②显式初始化</span></span><br><span class="line"><span class="comment"> *     ③构造器中初始化</span></span><br><span class="line"><span class="comment"> *     ④通过&quot;对象.方法&quot;的方式赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     以上操作的先后顺序：① -&gt; ② -&gt; ③ -&gt; ④</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(u.age);</span><br><span class="line">        </span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">2</span>);<span class="comment">//构造器赋值</span></span><br><span class="line">        u1.age = <span class="number">18</span>;</span><br><span class="line">        System.out.println(u1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">1</span>;<span class="comment">//显式赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h3 id="扩展知识一：JavaBean"><a href="#扩展知识一：JavaBean" class="headerlink" title="扩展知识一：JavaBean"></a>扩展知识一：JavaBean</h3><ol><li>JavaBean是一种Java语言写成的可重用组件。</li><li>所谓JavaBean，是指符合如下标准的Java类：<ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul></li><li>用户可以使用JavaBean将功能、处理。值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</li></ol><h3 id="扩展知识二：UML类图"><a href="#扩展知识二：UML类图" class="headerlink" title="扩展知识二：UML类图"></a>扩展知识二：UML类图</h3><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808165643.png" align="left"><ol><li><p>+表示public类型，-表示private类型，#表示protected类型。</p></li><li><p>方法的写法：</p><p>方法的类型（+、-） 方法名(参数名:参数类型):返回值类型</p></li></ol><h1 id="关键字：this"><a href="#关键字：this" class="headerlink" title="关键字：this"></a>关键字：this</h1><h2 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h2><ol><li><p>this可以用来修饰：属性、方法、构造器。</p></li><li><p>this修饰属性和方法：this可理解为当前对象（方法中）或当前正在创建的对象（构造器中）</p><ul><li>在类的方法中，我们可以使用“this.属性”或“this.方法”的方式，调用当前正在创建的对象属性或方法。但是通常情况下，我们都选择省略“this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式地使用“this.变量”的方式，表明此变量是属性，而非形参。</li><li>在类的构造器中，我们可以使用“this.属性”或”this.方法“的方式，调用当前属性或方法。但是通常情况下，我们都选择省略”this.“。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式地使用“this.变量”的方式，表明此变量是属性，而非形参。、</li></ul></li><li><p>this调用构造器</p><ul><li>我们在类的构造器中，可以显式的使用“this(形参列表)”的方式，调用本类中指定的其他构造器。</li><li>构造器中不能通过“this(形参列表)”的方式调用自己。</li><li>如果有n个构造器，最多有n-1个个构造器中使用了“this(形参列表)”</li><li>规定：“this(形参列表)”必须声明在当前构造器的首行</li><li>构造器内部，最多只能声明一个“this(形参列表)”，用来调用其他构造器。</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> this关键字的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-8    19:47:08</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();        </span><br><span class="line">        p1.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(p1.getAge());</span><br><span class="line">        </span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Triabin&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(p2.getAge() + <span class="string">&quot;\t&quot;</span> + p2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器中使用:理解为当前正在创建的对象（Person）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this(name);//调用其他构造器</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法中使用:理解为当前对象（Person）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><h3 id="练习一：添加必要的构造器，综合应用构造器的重载、this关键字。"><a href="#练习一：添加必要的构造器，综合应用构造器的重载、this关键字。" class="headerlink" title="练习一：添加必要的构造器，综合应用构造器的重载、this关键字。"></a>练习一：添加必要的构造器，综合应用构造器的重载、this关键字。</h3><table><thead><tr><th>Boy</th><th>Girl</th></tr></thead><tbody><tr><td>-name:String<br>-age:int</td><td>-name:String<br>-age:int</td></tr><tr><td>+setName(i:String)<br>+getName():String<br>+setAge(i:int)<br>+getAge():int<br>+marry(girl:Girl)<br>+shout():void</td><td>+setName(i:String)<br>+getName():String<br>+marry(boy:Boy)<br>+compare(girl:Girl)</td></tr></tbody></table><ul><li>Boy类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(Girl girl)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想娶&quot;</span> + girl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shoult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.age &gt;= <span class="number">22</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你可以去登记结婚了！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先多谈谈恋爱~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Girl类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(Boy boy)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想嫁给&quot;</span> + boy.getName());</span><br><span class="line">        boy.marry(<span class="keyword">this</span>);<span class="comment">//this代表当前对象，即谁调用上面这个marry()方法谁就是这个this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 比较两个对象大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Dawn Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span> 2020-8-821:34:11</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> girl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 正数：当前对象大。    负数：当前对象小。    0：当前对象与形参对象相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">comapre</span><span class="params">(Girl girl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - girl.age;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisEx01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Boy boy = <span class="keyword">new</span> Boy(<span class="string">&quot;罗密欧&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        boy.shoult();</span><br><span class="line">        </span><br><span class="line">        Girl girl = <span class="keyword">new</span> Girl(<span class="string">&quot;朱丽叶&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        girl.marry(boy);</span><br><span class="line">        </span><br><span class="line">        Girl girl1 = <span class="keyword">new</span> Girl(<span class="string">&quot;祝英台&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> compare = girl.comapre(girl1);</span><br><span class="line">        <span class="keyword">if</span>(compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compare == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;和&quot;</span> + girl1.getName() + <span class="string">&quot;一样大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(girl1.getName() + <span class="string">&quot;大&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200808214945.png" align="left"><h3 id="练习二：实验一"><a href="#练习二：实验一" class="headerlink" title="练习二：实验一"></a>练习二：实验一</h3><ol><li><p>写一个名为 Account 的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：<br>账号 id，余 额 balance，年利率 annualInterestRate；包含的方法：访问器方法（getter 和 setter<br>方法），取款方法 withdraw()，存款方法 deposit()。</p><table><thead><tr><th>Account</th></tr></thead><tbody><tr><td>private int id<br>private double balance<br>private double annualInterestRate</td></tr><tr><td>public Account (int id, double balance, double annualInterestRate )</td></tr><tr><td>public int getId()<br>public double getBalance()<br>public double getAnnualInterestRate()<br>public void setId( int id)<br>public void setBalance(double balance)<br>public void setAnnualInterestRate(double annualInterestRate)<br>public void withdraw (double amount)//取钱<br>public void deposit (double amount)//存钱</td></tr></tbody></table><ul><li>提示：在提款方法 withdraw 中，需要判断用户余额是否能够满足提款数额的要求，如果不<br>能，应给出提示。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 实验一类：Account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    9:48:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;<span class="comment">//余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> annualInterestRate;<span class="comment">//年利率</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">double</span> balance,<span class="keyword">double</span> annualInterestRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        <span class="keyword">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAnnualInterestRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnnualInterestRate</span><span class="params">(<span class="keyword">double</span> annualInterestRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withDraw</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;<span class="comment">//取钱</span></span><br><span class="line">        <span class="keyword">if</span>(amount &gt; <span class="keyword">this</span>.balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足，取款失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功取出：&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;<span class="comment">//存钱</span></span><br><span class="line">        <span class="keyword">this</span>.balance += amount;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功存入：&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Customer类。</p><table><thead><tr><th>Customer</th></tr></thead><tbody><tr><td>private String firstName<br>private String lastName<br>private Account account</td></tr><tr><td>public Customer(String f,String  l)</td></tr><tr><td>public String getFirstName()<br>public String getLastName()<br>public Account getAccount()<br>public void setAccount(Account account)</td></tr></tbody></table><ul><li>声明三个私有对象属性：firstName、lastName 和 account。</li><li>声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f和 l）。</li><li>声明两个公有存取器来访问该对象属性，方法getFirstName 和getLastName返回相应的属性。</li><li>声明 setAccount 方法来对 account 属性赋值。</li><li>声明 getAccount 方法以获取 account 属性。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 实验一类：Customer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    9:49:58</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String f,String l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = f;</span><br><span class="line">        <span class="keyword">this</span>.lastName = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个测试程序。</p><p>（1）创建一个Customer，名字叫Jane Smith，他有一个账号为1000，余额为 2000 元，年利率为1.23％的账户。</p><p>（2）对Jane Smith操作。</p><ul><li>存入100元，再取出960元。再取出2000元。</li><li>打印出Jane Smith的基本信息。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.keywordthis;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 课后练习：实验一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    9:45:58</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Experiment1Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer(<span class="string">&quot;Jane&quot;</span>,<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line">        Account a = <span class="keyword">new</span> Account(<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">1.23</span>);</span><br><span class="line">        a.deposit(<span class="number">100</span>);</span><br><span class="line">        a.withDraw(<span class="number">960</span>);</span><br><span class="line">        a.withDraw(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Custmor [&quot;</span> + c.getFirstName() + <span class="string">&quot;·&quot;</span> + c.getLastName() + <span class="string">&quot;] has a account: id is &quot;</span> + a.getId() + <span class="string">&quot;, \nannualInterestRate is &quot;</span> + a.getAnnualInterestRate() + <span class="string">&quot;%, balance is &quot;</span> + a.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200809134704.png" align="left"></li></ol><h3 id="练习三：实验二"><a href="#练习三：实验二" class="headerlink" title="练习三：实验二"></a>练习三：实验二</h3><ol><li><p>按照如下的UML类图，创建相应的类，提供必要的的结构。</p><table><thead><tr><th>Account</th></tr></thead><tbody><tr><td>-balance:double</td></tr><tr><td>+Account(init_balance:double)</td></tr><tr><td>+getBalance():double<br>+deposit(amt:double)<br>+withdraw(amt:double)</td></tr></tbody></table><p>在提款方法withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应该给出提示。deposit()方法表示存款。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experiment2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> this关键字课后练习：实验二类1--Account</span></span><br><span class="line"><span class="comment"> *     初始化账户余额和存取钱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    14:16:23</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">double</span> init_balance)</span> </span>&#123;</span><br><span class="line">        balance = init_balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amt)</span> </span>&#123;<span class="comment">//存钱</span></span><br><span class="line">        <span class="keyword">if</span>(amt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amt;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n成功存入：&quot;</span> + amt + <span class="string">&quot;元。\n当前余额：&quot;</span> + balance + <span class="string">&quot;元。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(amt &gt; balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n余额不足，取款失败！\n当前余额：&quot;</span> + balance + <span class="string">&quot;元。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        balance -= amt;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功取出：&quot;</span> + amt + <span class="string">&quot;元。\n当前余额：&quot;</span> + balance + <span class="string">&quot;元。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照如下的UML类图，创建相应的类，提供必要的结构。</p><table><thead><tr><th>Customer</th></tr></thead><tbody><tr><td>-firstName:String<br>-lastName:String<br>-account:Account</td></tr><tr><td>+Customer(f:String,l:String)</td></tr><tr><td>+getFirstName():String<br>+getLastName():String<br>+getAccount():Account<br>+setAccount(account:Account)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experiment2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> this关键字课后练习：实验二类2--Customer</span></span><br><span class="line"><span class="comment"> *     新建账户的账户名，以及查询账户等操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    14:27:17</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String f,String l)</span> </span>&#123;</span><br><span class="line">        firstName = f;</span><br><span class="line">        lastName = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照如下的UML类图，创建相应的类，提供必要的结构。</p><table><thead><tr><th>Bank</th></tr></thead><tbody><tr><td>-customers:Customer[]<br>-numberOfCustomer:int</td></tr><tr><td>+Bank()</td></tr><tr><td>+addCustomer(f:string,l:String)<br>+getNumOfCustomer():int<br>+getCustomer(index:int):Customer</td></tr></tbody></table><ul><li>addCustomer()方法必须依照参数（姓，名）构造一个新的Customer对象，然后把它放到customer数组中。还必须吧numberOfCustomer属性的值加1.</li><li>getNumOfCustomer()方法返回numberOfCustomer属性值。</li><li>getCustomer()方法返回与给出的index参数相关的客户。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experiment2;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> this关键字课后练习：实验二类3--Bank</span></span><br><span class="line"><span class="comment"> *     新建用户并计数，将账户信息存入数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    14:31:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer[] customers = <span class="keyword">new</span> Customer[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numberOfCustomer;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">(String f,String l)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(f,l);</span><br><span class="line">        customers[numberOfCustomer++] = customer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumOfCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfCustomer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return customers[index];//可能报异常</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; numberOfCustomer) &#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建BankTest类，进行测试。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> experiment2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> this关键字课后练习：实验二类4--测试类</span></span><br><span class="line"><span class="comment"> *     测试各功能的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-8-9    16:07:49</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank = <span class="keyword">new</span> Bank();</span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Dawn&quot;</span>, <span class="string">&quot;Lee&quot;</span>);</span><br><span class="line">        bank.getCustomer(<span class="number">0</span>).setAccount(<span class="keyword">new</span> Account(<span class="number">2000</span>));</span><br><span class="line">        bank.getCustomer(<span class="number">0</span>).getAccount().withdraw(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;账户名：&quot;</span> + bank.getCustomer(<span class="number">0</span>).getFirstName() +bank.getCustomer(<span class="number">0</span>).getLastName());</span><br><span class="line"></span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Triabin&quot;</span>, <span class="string">&quot;Lee&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n当前银行客户数量为：&quot;</span> + bank.getNumOfCustomer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200809164615.png" align="left"></li></ol><h1 id="关键字：package、import"><a href="#关键字：package、import" class="headerlink" title="关键字：package、import"></a>关键字：package、import</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><h3 id="package关键字的使用"><a href="#package关键字的使用" class="headerlink" title="package关键字的使用"></a>package关键字的使用</h3><ol><li>为了更好的实现项目中类的管理，提供包的概念。</li><li>使用package来声明类或接口所属的包，声明在源文件首行。</li><li>包，属于标识符，遵循标识符的命名规则、规范（全小写）、见名知意。</li><li>每“.”一次，就代表一层文件目录。</li></ol><blockquote><p>补充：同一个包下，不能命名同名的接口、类。</p></blockquote><h3 id="JDK中主要的包介绍"><a href="#JDK中主要的包介绍" class="headerlink" title="JDK中主要的包介绍"></a>JDK中主要的包介绍</h3><ol><li>java.lang—-包含一些Java语言的核心类，如String、Math、Integer、 System和<br>Thread，提供常用功能。</li><li>java.net—-包含执行与网络相关的操作的类和接口。</li><li>java.io—-包含能提供多种输入/输出功能的类。</li><li>java.util—-包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li><li>java.text—-包含了Java进行JDBC数据库编程的相关类/接口。</li><li>java.sql—-包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。</li></ol><h3 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h3><ul><li><p>MVC是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，与</p><p>数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式</p><p>使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程</p><p>序的耦合性。</p></li></ul><ol><li>模型层：model，主要处理数据。<ul><li>数据对象封装 model.bean/domain</li><li>数据库操作类 model.dao</li><li>数据库 model.db</li></ul></li><li>控制层：controller，处理业务逻辑。<ul><li>应用界面相关 controller.activity</li><li>存放fragment controller.fragment</li><li>显示列表的适配器 controller.adapter</li><li>服务相关的 controller.service</li><li>抽取的基类 controller.base</li></ul></li><li>视图层：view，显示数据。<ul><li>相关工具类 view.utils</li><li>自定义view view.ui</li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200809171338.png" align="left"><ul><li>包（package）能使整个结构变得清晰</li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><h3 id="import关键字的使用"><a href="#import关键字的使用" class="headerlink" title="import关键字的使用"></a>import关键字的使用</h3><ol><li><p>在源文件显式的使用import结构导入指定包下的类、接口。</p></li><li><p>声明在包的声明和类的声明之间。</p></li><li><p>如果需要导入多个包，则并列写出即可。</p></li><li><p>可以使用“xxx.*”的方式导入xxx包下所有结构。</p></li><li><p>如果使用的类或接口是java.lang包下定义的，则可以省略import结构。</p></li><li><p>如果使用的类或接口是本包下定义的，则可以省略import结构。</p></li><li><p>如果再源文件中使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p></li><li><p>如果使用“xxx.*”的方式表明可以调用xxx包下所有结构。但如果使用的是xxx子包下的结构，仍需要显示导入。</p></li><li><p>import static：导入指定类或接口中的静态结构。</p><p>静态结构：属性或方法</p></li></ol><h1 id="章节练习题及面试题"><a href="#章节练习题及面试题" class="headerlink" title="章节练习题及面试题"></a>章节练习题及面试题</h1><h2 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>编写一个Student类，包含name、gender、age、id、score属性，分别为String、String、int、int、double类型。</p><p>类中声明一个say方法，返回String类型，方法返回信息中包含所有属性值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 编写一个Student类，包含name、gender、age、id、score属性，分别为String、String、</span></span><br><span class="line"><span class="comment"> *     int、int、double类型。</span></span><br><span class="line"><span class="comment"> *     类中声明一个say方法，返回String类型，方法返回信息中包含所有属性值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    8:47:59</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,String gender,<span class="keyword">int</span> age,<span class="keyword">int</span> id,<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;naem: &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\ngender: &quot;</span> + gender + <span class="string">&quot;\nage: &quot;</span> + age + <span class="string">&quot;\nid: &quot;</span> + id + <span class="string">&quot;\nscore: &quot;</span> + score; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在另一个StudentTest类中的main方法中，创建Student对象，并访问say方法和所有属性，并将调用结果打印输出。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 在另一个StudentTest类中的main方法中，创建Student对象，并访问say方法和所有属性，</span></span><br><span class="line"><span class="comment"> *     并将调用结果打印输出。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    9:55:28</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;Triabin&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">18</span>,<span class="number">1001</span>,<span class="number">99.9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用属性：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + stu.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;gender: &quot;</span> + stu.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + stu.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;id: &quot;</span> + stu.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;score: &quot;</span> + stu.getScore());</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;调用say()方法：&quot;</span>);</span><br><span class="line">        System.out.println(stu.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930100702.png" align="left"><h3 id="编程题1"><a href="#编程题1" class="headerlink" title="编程题1"></a>编程题1</h3><p>定义一个丈夫Husband类，有姓名、年龄、妻子属性；</p><p>定义一个妻子Wife类，有姓名、年龄、丈夫属性。</p><p>丈夫类中有一个getInfo()方法，其中能显示自己的姓名、年龄和他妻子的姓名、年龄；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个丈夫Husband类，有姓名、年龄、妻子属性；</span></span><br><span class="line"><span class="comment"> *     丈夫类中有一个getInfo()方法，其中能显示自己的姓名、年龄和他妻子的姓名、年龄；</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:11:23</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Husband</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Husband</span><span class="params">(String name,<span class="keyword">int</span> age,Wife wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(Wife wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;妻子：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;  姓名：&quot;</span> + <span class="keyword">this</span>.wife.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;  年龄：&quot;</span> + <span class="keyword">this</span>.wife.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>妻子类中有一个getInfo()方法，能显示自己的姓名、年龄和她丈夫的姓名、年龄。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个妻子Wife类，有姓名、年龄、丈夫属性。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:13:25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wife</span><span class="params">(String name,<span class="keyword">int</span> age,Husband husband)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> husband;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;丈夫：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;  姓名：&quot;</span> + <span class="keyword">this</span>.husband.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;  年龄：&quot;</span> + <span class="keyword">this</span>.husband.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个测试类，创建妻子和丈夫对象，然后测试。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._02;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个妻子Wife类，有姓名、年龄、丈夫属性。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:13:25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wife</span><span class="params">(String name,<span class="keyword">int</span> age,Husband husband)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> husband;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;丈夫：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;  姓名：&quot;</span> + <span class="keyword">this</span>.husband.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;  年龄：&quot;</span> + <span class="keyword">this</span>.husband.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930104534.png" align="left"><h3 id="编程题2"><a href="#编程题2" class="headerlink" title="编程题2"></a>编程题2</h3><p>定义银行账户类Account，有属性：卡号cid，余额balance，所属用户Customer，银行账户类Account有方法：</p><ul><li>getInfo()，返回String类型，返回卡的详细信息；</li><li>取钱方法withdraw()，参数自行设计，如果取钱成功，返回true，失败返回false；</li><li>存钱方法save()，参数自行设计，如果存钱成功，返回true，失败返回false。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义银行账户类Account，有属性：卡号cid，余额balance，所属用户Customer，银行账户类</span></span><br><span class="line"><span class="comment"> *     Account有方法：</span></span><br><span class="line"><span class="comment"> *        getInfo()，返回String类型，返回卡的详细信息；</span></span><br><span class="line"><span class="comment"> *        取钱方法withdraw()，参数自行设计，如果取钱成功，返回true，失败返回false；</span></span><br><span class="line"><span class="comment"> *        存钱方法save()，参数自行设计，如果存钱成功，返回true，失败返回false。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:50:33</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cid,<span class="keyword">double</span> balance,Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(<span class="keyword">int</span> cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;卡号：&quot;</span> + getCid() + <span class="string">&quot;\n余额：&quot;</span> + getBalance() + <span class="string">&quot;\n&quot;</span> + customer.say();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(money &lt;= <span class="keyword">this</span>.balance &amp;&amp; money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.balance -= money;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误，请输入大于0的数字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.balance += money;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误，请输入大于0的数字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，Customer类有姓名、身份证号、联系电话、家庭住址等属性。Customer类有方法say()，返回String类型，返回他的个人信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 其中，Customer类有姓名、身份证号、联系电话、家庭住址等属性。Customer类有方法say()，</span></span><br><span class="line"><span class="comment"> *     返回String类型，返回他的个人信息。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:53:52</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String tele;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> id, String tele, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.tele = tele;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTele</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTele</span><span class="params">(String tele)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tele = tele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\n身份证号：&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;\n联系电话：&quot;</span> + <span class="keyword">this</span>.tele + <span class="string">&quot;\n家庭住址：&quot;</span> + <span class="keyword">this</span>.address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类Bank中创建银行账户类对象和用户类对象，并设置信息与显示信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._03;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 在测试类Bank中创建银行账户类对象和用户类对象，并设置信息与显示信息。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    10:54:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(<span class="string">&quot;Triabin&quot;</span>,<span class="number">5201314</span>,<span class="string">&quot;18222222222&quot;</span>,<span class="string">&quot;月宫&quot;</span>);</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">1001</span>,<span class="number">5000</span>,customer);</span><br><span class="line">        </span><br><span class="line">        System.out.println(account.getInfo());</span><br><span class="line">        <span class="keyword">if</span>(account.withdraw(<span class="number">200</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款成功，余额：&quot;</span> + account.getBalance());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款失败。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(account.save(<span class="number">250</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存款成功，余额：&quot;</span> + account.getBalance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930115121.png" align="left"><h2 id="方法的使用"><a href="#方法的使用" class="headerlink" title="方法的使用"></a>方法的使用</h2><h3 id="哪个选项和show-方法重载？"><a href="#哪个选项和show-方法重载？" class="headerlink" title="哪个选项和show()方法重载？"></a>哪个选项和show()方法重载？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">float</span> c)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A.void show(int a,float c,int b){}//yes</p><p>B,void show(int a,int b,float c){}//一模一样。不可以出现在同一个类中。 </p><p>C.int show(int a,float c,int b){return a;}//yes。 </p><p>D.int show(int a,float c){return a;}//yes</p><h3 id="方法的声明与调用"><a href="#方法的声明与调用" class="headerlink" title="方法的声明与调用"></a>方法的声明与调用</h3><ol><li><p>声明一个圆柱体类；</p></li><li><p>声明属性：底边的半径，和高；</p></li><li><p>声明方法：</p><ul><li><p>方法的功能：在方法中打印圆柱体的详细信息</p><p>圆柱体的底边的半径是xxx，高是xxx，底面积是xxx，体积是xxx。</p></li><li><p>方法的功能：返回底面积</p></li><li><p>方法的功能：返回体积</p></li><li><p>方法的功能：为圆柱体的底边的半径，和高赋值</p></li><li><p>方法的功能：为圆柱体的底边的半径，和高赋值，并返回赋值的结果，如果底边的半径或高为&lt;=0，赋值失败，返回false，否则返回true</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cylinder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cylinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cylinder</span><span class="params">(<span class="keyword">double</span> radius, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    方法功能：返回底面积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBasalArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius * Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    方法的功能：返回体积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBasalArea() * <span class="keyword">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    方法的功能：为圆柱体的底边的半径，和高赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadiusHeight</span><span class="params">(<span class="keyword">double</span> radius,<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    方法的功能：为圆柱体的底边的半径，和高赋值，并返回赋值的结果，如果底边的半径或高为&lt;=0，</span></span><br><span class="line"><span class="comment">     *    赋值失败，返回false，否则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRH</span><span class="params">(<span class="keyword">double</span> radius,<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(radius &lt;= <span class="number">0</span> || height &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.radius = radius;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">            System.out.println(<span class="string">&quot;radius = &quot;</span> + <span class="keyword">this</span>.radius + <span class="string">&quot;\nheight = &quot;</span> + <span class="keyword">this</span>.height);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    方法的功能：在方法中打印圆柱体的详细信息</span></span><br><span class="line"><span class="comment">     *     圆柱体的底边的半径是xxx，高是xxx，底面积是xxx，体积是xxx。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;圆柱的底边半径是&quot;</span> + <span class="keyword">this</span>.radius + <span class="string">&quot;，高是&quot;</span> + <span class="keyword">this</span>.height + <span class="string">&quot;，底面积是&quot;</span> + getBasalArea() + <span class="string">&quot;，体积是&quot;</span> + getVolume() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cylinder cylinder = <span class="keyword">new</span> Cylinder(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试1：&quot;</span>);</span><br><span class="line">        cylinder.pointInfo();</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;测试2：&quot;</span>);</span><br><span class="line">        cylinder.setRadiusHeight(<span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        cylinder.pointInfo();</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;测试3：&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isDone = cylinder.setRH(<span class="number">50</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(isDone);</span><br><span class="line">        System.out.println(<span class="string">&quot;失败测试：&quot;</span>);</span><br><span class="line">        isDone = cylinder.setRH(-<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(isDone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930123537.png" align="left"><h3 id="方法的重载-1"><a href="#方法的重载-1" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>方法重载(overload)必须满足<strong>____</strong></p><p>A. 在不同class中定义的方法   B.在同一类型中定义的方法</p><p>C. 方法名必须相同       D.返回类型必须相同</p><p>E. 参数一定不同        F.参数可以相同</p><p>答案：BCE</p><h3 id="写出输出结果"><a href="#写出输出结果" class="headerlink" title="写出输出结果"></a>写出输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show(<span class="number">0</span>);</span><br><span class="line">        show(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            i+=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            i+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            i+=<span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            i+=<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>i=15</p><p>i=14</p><h3 id="写出输出结果-1"><a href="#写出输出结果-1" class="headerlink" title="写出输出结果"></a>写出输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(show(<span class="string">&#x27;a&#x27;</span>); show(<span class="string">&#x27;b&#x27;</span>) &amp;&amp; x&lt;<span class="number">3</span>; show(<span class="string">&#x27;c&#x27;</span>))&#123;</span><br><span class="line">            show(<span class="string">&#x27;d&#x27;</span>); </span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        System.out.print(ch);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>abdcbdcb</p><h3 id="以下代码的运行结果是什么？"><a href="#以下代码的运行结果是什么？" class="headerlink" title="以下代码的运行结果是什么？"></a>以下代码的运行结果是什么？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        System.out.print(c);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (foo(<span class="string">&#x27;A&#x27;</span>); foo(<span class="string">&#x27;B&#x27;</span>) &amp;&amp; (i &lt; <span class="number">2</span>); foo(<span class="string">&#x27;C&#x27;</span>)) &#123;</span><br><span class="line">            i++;<span class="comment">// 1 2</span></span><br><span class="line">            foo(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：ABDCBDCB</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象的三大特征说明"><a href="#面向对象的三大特征说明" class="headerlink" title="面向对象的三大特征说明"></a>面向对象的三大特征说明</h3><p>答：面向对象有三大特点：封装、继承、多态。(如果要回答四个，可加上抽象性这一特点)</p><ol><li><p>继承性</p><p>继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p></li><li><p>封装性</p><p>封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。</p></li><li><p>多态性</p><p>多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p></li><li><p>抽象性</p><p>抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。</p></li></ol><h3 id="作用域public、private、protected及默认不写时的区别？"><a href="#作用域public、private、protected及默认不写时的区别？" class="headerlink" title="作用域public、private、protected及默认不写时的区别？"></a>作用域public、private、protected及默认不写时的区别？</h3><ol><li>public：修饰的结构在同一个工程(Project)中的结构都可调用；</li><li>protected：同一个工程中不同包的子类、同一个包以内都可调用；</li><li>不写(缺省)：同一个包中的结构都可调用；</li><li>private：只在其所在类内部可以调用。</li></ol><h3 id="找错"><a href="#找错" class="headerlink" title="找错"></a>找错</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">int</span> l = s.length();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：错。局部变量前不能放置任何访问修饰符 (private，public，和protected)。</p><h3 id="Java的内存管理之垃圾回收（了解）"><a href="#Java的内存管理之垃圾回收（了解）" class="headerlink" title="Java的内存管理之垃圾回收（了解）"></a>Java的内存管理之垃圾回收（了解）</h3><p>分配：由JVM自动为其分配相应的内存空间</p><p>释放：由JVM提供垃圾回收机制自动的释放内存空间</p><p>垃圾回收机制（GC：Garbage Collection）：将垃圾对象所占用的堆内存进行回收。Java的垃圾回收机制是JVM提供的能力，由单独的系统级垃圾回收线程在空闲时间以不定时的方式动态回收。</p><p>**<font color="red">垃圾对象</font>**：不再被任何引用指向的对象。</p><p><strong><font color="red">面试题：</font></strong></p><p>问：在程序中是否可以通知垃圾回收机制过来回收垃圾？</p><p>​    能，通过调用System.gc();或Runtime.getRuntime().gc();</p><p>再问：调用了System.gc();或Runtime.getRuntime().gc();后是立刻执行垃圾回收吗？</p><p>​    不是，该调用并不会立刻启动垃圾回收机制开始回收，但会加快垃圾回收机制的运行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGC</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            MyClass m = <span class="keyword">new</span> MyClass();<span class="comment">//这里本次循环完，本次创建的对象就成为垃圾了</span></span><br><span class="line">            System.out.println(<span class="string">&quot;创建第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;的对象：&quot;</span> + m);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通知垃圾回收机制来收集垃圾</span></span><br><span class="line">        System.gc();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//为了延缓程序结束</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;程序在继续....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="comment">//这个方法是垃圾回收机制在回收它的对象时，自动调用，理解成对象留临终遗言的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;轻轻的我走了.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="构造器Constructor是否可以被Override？"><a href="#构造器Constructor是否可以被Override？" class="headerlink" title="构造器Constructor是否可以被Override？"></a>构造器Constructor是否可以被Override？</h3><p>答：构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。</p><h3 id="编程创建一个Box类，在其中定义三个变量表示立方体的长、宽和高，定义一个方法求立方体的体积。创建一个对象，求给定尺寸的立方体的体积。"><a href="#编程创建一个Box类，在其中定义三个变量表示立方体的长、宽和高，定义一个方法求立方体的体积。创建一个对象，求给定尺寸的立方体的体积。" class="headerlink" title="编程创建一个Box类，在其中定义三个变量表示立方体的长、宽和高，定义一个方法求立方体的体积。创建一个对象，求给定尺寸的立方体的体积。"></a>编程创建一个Box类，在其中定义三个变量表示立方体的长、宽和高，定义一个方法求立方体的体积。创建一个对象，求给定尺寸的立方体的体积。</h3><p>（提供无参的构造器和一个有参的构造器）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._05;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 编程创建一个Box类，在其中定义三个变量表示立方体的长、宽和高，定义一个方法求立方体</span></span><br><span class="line"><span class="comment"> *     的体积。创建一个对象，求给定尺寸的立方体的体积。</span></span><br><span class="line"><span class="comment"> *    （提供无参的构造器和一个有参的构造器）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    13:18:23</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Box box = <span class="keyword">new</span> Box(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;立方体参数：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;长 = &quot;</span> + box.getLegth());</span><br><span class="line">        System.out.println(<span class="string">&quot;宽 = &quot;</span> + box.getWidth());</span><br><span class="line">        System.out.println(<span class="string">&quot;高 = &quot;</span> + box.getHeight());</span><br><span class="line">        System.out.println(<span class="string">&quot;体积 = &quot;</span> + box.getVolume());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> legth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> legth, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.legth = legth;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> legth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLegth</span><span class="params">(<span class="keyword">int</span> legth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.legth = legth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.legth * <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930133606.png" align="left"><h3 id="定义一个圆类型"><a href="#定义一个圆类型" class="headerlink" title="定义一个圆类型"></a>定义一个圆类型</h3><ul><li>提供显示圆周长功能的方法</li><li>提供显示圆面积的方法</li><li>提供无参的构造器和一个有参的构造器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._06;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个圆类型</span></span><br><span class="line"><span class="comment"> *     提供显示圆周长的方法</span></span><br><span class="line"><span class="comment"> *     提供显示圆面积的方法</span></span><br><span class="line"><span class="comment"> *     提供无参和有参构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    13:38:30</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;周长 = &quot;</span> + (<span class="number">2</span> * Math.PI * <span class="keyword">this</span>.radius));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;面积 = &quot;</span> + (Math.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计一个Dog类，有名字、颜色和年龄属性，定义构造器初始化这些属性，定义输出方法show-显示其信息。"><a href="#设计一个Dog类，有名字、颜色和年龄属性，定义构造器初始化这些属性，定义输出方法show-显示其信息。" class="headerlink" title="设计一个Dog类，有名字、颜色和年龄属性，定义构造器初始化这些属性，定义输出方法show()显示其信息。"></a>设计一个Dog类，有名字、颜色和年龄属性，定义构造器初始化这些属性，定义输出方法show()显示其信息。</h3><p>（提供无参的构造器和一个有参的构造器）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._07;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 设计一个Dog类，有名字、颜色和年龄属性，定义构造器初始化这些属性，定义输出方法</span></span><br><span class="line"><span class="comment"> *     show()显示其信息。</span></span><br><span class="line"><span class="comment"> *    （提供无参的构造器和一个有参的构造器）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    13:45:53</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Dog(<span class="string">&quot;MH&quot;</span>,<span class="string">&quot;brown&quot;</span>,<span class="number">12</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, String color, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\ncolor: &quot;</span> + <span class="keyword">this</span>.color + <span class="string">&quot;\nage: &quot;</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930135548.png" align="left"><h3 id="定义一个类，用于描述坐标点"><a href="#定义一个类，用于描述坐标点" class="headerlink" title="定义一个类，用于描述坐标点"></a>定义一个类，用于描述坐标点</h3><p>o——————&gt;X</p><p>|</p><p>|</p><p>|</p><p>Y                P(X,Y)</p><ol><li>具有计算当前点到原点距离的功能</li><li>求到任意一点（m，n）的距离</li><li>求到任意一点（Point p）的距离</li><li>具有坐标点显示功能，显示格式（x，y）</li><li>提供无参的构造器和一个有参的构造器</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Point p1 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line">        Point p2 = <span class="keyword">new</span> Point(<span class="number">8</span>,<span class="number">6</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;当前点到原点的距离 = &quot;</span> + p1.getLenToOrigin());</span><br><span class="line">        System.out.println(<span class="string">&quot;到(12,9)的距离 = &quot;</span> + p1.getLenAny(<span class="number">12</span>, <span class="number">9</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;到(Point p2)的距离 = &quot;</span> + p1.getLenAny(p2));</span><br><span class="line">        System.out.println(<span class="string">&quot;显示坐标：&quot;</span>);</span><br><span class="line">        p1.showPoint();</span><br><span class="line">        p2.showPoint();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    具有计算当前点到原点距离的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLenToOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    求到任意一点（m，n）的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLenAny</span><span class="params">(<span class="keyword">double</span> m,<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(Math.pow((<span class="keyword">this</span>.x - m), <span class="number">2</span>) + Math.pow((<span class="keyword">this</span>.y - n), <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    求到任意一点（Point p）的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLenAny</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(Math.pow((<span class="keyword">this</span>.x - p.getX()), <span class="number">2</span>) + Math.pow((<span class="keyword">this</span>.y - p.getY()), <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    具有坐标点显示功能，显示格式（x，y）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(&quot;</span> + <span class="keyword">this</span>.x + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930142346.png" align="left"><h3 id="写一个人的类"><a href="#写一个人的类" class="headerlink" title="写一个人的类"></a>写一个人的类</h3><p>属性：名字，性别，年龄；提供无参的构造器和一个有参的构造器</p><p>方法：①自我介绍的方法    ②吃饭的方法</p><p>创建一个对象“张三”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._09;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 属性：名字，性别，年龄；提供无参的构造器和一个有参的构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    14:27:07</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person zhangSan = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        zhangSan.selfIntro();</span><br><span class="line">        zhangSan.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String gender, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好，我叫&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200930143445.png" align="left"><h3 id="写一个汽车类"><a href="#写一个汽车类" class="headerlink" title="写一个汽车类"></a>写一个汽车类</h3><p>属性：品牌、车长、颜色、价格；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._10;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 属性：品牌、车长、颜色、价格；</span></span><br><span class="line"><span class="comment"> *     提供无参的构造器和一个有参的构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    14:36:46</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, <span class="keyword">double</span> length, String color, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建五个对象：“捷达”，“宝马”，“劳斯莱斯”，“科鲁兹”，“迈锐宝”</p><p>提供无参的构造器和一个有参的构造器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._10;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建五个对象：“捷达”，“宝马”，“劳斯莱斯”，“科鲁兹”，“迈锐宝”</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-30    14:41:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car c1 = <span class="keyword">new</span> Car(<span class="string">&quot;捷达&quot;</span>,<span class="number">4.415</span>,<span class="string">&quot;棕色&quot;</span>,<span class="number">200000</span>);</span><br><span class="line">        Car c2 = <span class="keyword">new</span> Car(<span class="string">&quot;宝马&quot;</span>,<span class="number">5.055</span>,<span class="string">&quot;白色&quot;</span>,<span class="number">300000</span>);</span><br><span class="line">        Car c3 = <span class="keyword">new</span> Car(<span class="string">&quot;劳斯莱斯&quot;</span>,<span class="number">5.770</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="number">1500000</span>);</span><br><span class="line">        Car c4 = <span class="keyword">new</span> Car(<span class="string">&quot;科鲁兹&quot;</span>,<span class="number">4.643</span>,<span class="string">&quot;灰色&quot;</span>,<span class="number">120000</span>);</span><br><span class="line">        Car c5 = <span class="keyword">new</span> Car(<span class="string">&quot;迈锐宝&quot;</span>,<span class="number">4.855</span>,<span class="string">&quot;银色&quot;</span>,<span class="number">150000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写一个课程类"><a href="#写一个课程类" class="headerlink" title="写一个课程类"></a>写一个课程类</h3><p>属性：课程名；学时；任课老师；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._11;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 写一个课程类</span></span><br><span class="line"><span class="comment"> *     属性：课程名；学时；任课老师；</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-1    13:34:19</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String courseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> time;</span><br><span class="line">    <span class="keyword">private</span> String teacher;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String courseName, <span class="keyword">double</span> time, String teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCourseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseName</span><span class="params">(String courseName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">double</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(String teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建五个对象：“c语言”，“java编程”，“php网络编程”，“c++”，“数据结构”</p><p>提供无参的构造器和一个有参的构造器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin._11;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建五个对象：“c语言”，“java编程”，“php网络编程”，“c++”，“数据结构”</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-10-1    13:37:31</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Course course1 = <span class="keyword">new</span> Course(<span class="string">&quot;c语言&quot;</span>,<span class="number">64</span>,<span class="string">&quot;A老师&quot;</span>);</span><br><span class="line">        Course course2 = <span class="keyword">new</span> Course(<span class="string">&quot;java编程&quot;</span>,<span class="number">48</span>,<span class="string">&quot;B老师&quot;</span>);</span><br><span class="line">        Course course3 = <span class="keyword">new</span> Course(<span class="string">&quot;php网络编程&quot;</span>,<span class="number">32</span>,<span class="string">&quot;C老师&quot;</span>);</span><br><span class="line">        Course course4 = <span class="keyword">new</span> Course(<span class="string">&quot;c++&quot;</span>,<span class="number">64</span>,<span class="string">&quot;D老师&quot;</span>);</span><br><span class="line">        Course course5 = <span class="keyword">new</span> Course(<span class="string">&quot;数据结构&quot;</span>,<span class="number">64</span>,<span class="string">&quot;E老师&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="以下程序的运行结果是："><a href="#以下程序的运行结果是：" class="headerlink" title="以下程序的运行结果是："></a>以下程序的运行结果是：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> A(<span class="keyword">new</span> B());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(B b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;AB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：</p><p>B</p><p>A</p><p>AB</p><h2 id="关于参数传递"><a href="#关于参数传递" class="headerlink" title="关于参数传递"></a>关于参数传递</h2><h3 id="练习一：写出结果"><a href="#练习一：写出结果" class="headerlink" title="练习一：写出结果"></a>练习一：写出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leftShift</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123; </span><br><span class="line">        i+=j; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">4</span>, j = <span class="number">2</span>; </span><br><span class="line">        leftShift(i, j); </span><br><span class="line">        System.out.println(i); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>答案：4。和leftShift()方法没关系。</p><h3 id="练习二：写出结果"><a href="#练习二：写出结果" class="headerlink" title="练习二：写出结果"></a>练习二：写出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>]; </span><br><span class="line">        modify(a); </span><br><span class="line">        System.out.println(a[<span class="number">0</span>]); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123; </span><br><span class="line">        a[<span class="number">0</span>]++;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>答案：1。</p><h3 id="练习三-1"><a href="#练习三-1" class="headerlink" title="练习三"></a>练习三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change1</span><span class="params">(TestA t)</span></span>&#123;</span><br><span class="line">        t.i++;</span><br><span class="line">        System.out.println(t.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestA ta = <span class="keyword">new</span> TestA();</span><br><span class="line">        System.out.println(ta.i); <span class="comment">//0</span></span><br><span class="line">        ta.change(ta.i);<span class="comment">//1</span></span><br><span class="line">        System.out.println(ta.i); <span class="comment">//0</span></span><br><span class="line">        ta.change1(ta);  <span class="comment">//1</span></span><br><span class="line">        System.out.println(ta.i);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习四：写出结果"><a href="#练习四：写出结果" class="headerlink" title="练习四：写出结果"></a>练习四：写出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.first();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v, i);</span><br><span class="line">        System.out.println(v.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.print(v.i + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A.15 0 20</p><p>B.15 0 15</p><p>C.20 0 20</p><p>D.0 15 20</p><p>A is correct.</p><h3 id="练习五"><a href="#练习五" class="headerlink" title="练习五"></a>练习五</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x= <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x+=x;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Given:</span><br><span class="line"><span class="number">34.</span>Test t = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="number">35.</span>t.method(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>What is the output from line 5 of the Test class?</p><p>A.5    B.10    C.12</p><p>D.17    E.14</p><h3 id="练习六"><a href="#练习六" class="headerlink" title="练习六"></a>练习六</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassValueExer2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用sort方法，实现从大到小排序</span></span><br><span class="line">        <span class="comment">//在此处补充代码</span></span><br><span class="line">        ....</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//显示结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的结果是：&quot;</span> + Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要求使用冒泡排序完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(//形参？)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">考点：</span></span><br><span class="line"><span class="comment">1、方法的参数传递机制</span></span><br><span class="line"><span class="comment">2、冒泡排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassValueExer2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        PassValueExer2 exer = <span class="keyword">new</span> PassValueExer2();</span><br><span class="line">        <span class="comment">//调用sort方法，实现排序</span></span><br><span class="line">        exer.sort(array);<span class="comment">//实参给形参的是地址，数组的首地址</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的结果是：&quot;</span> + Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//功能：用冒泡排序，实现为数组排序，而且从大到小</span></span><br><span class="line">    <span class="comment">//形参的类型？我要把什么传过来</span></span><br><span class="line">    <span class="comment">//传递数组</span></span><br><span class="line">    <span class="comment">//接收的类型也肯定是数组，即形参接收实参，即形参的类型是int[]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="comment">//在这里对谁排，对arr进行排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;<span class="comment">//多少轮</span></span><br><span class="line">            <span class="comment">//每一轮，从左往后--》for(int j=0;...)</span></span><br><span class="line">            <span class="comment">//要实现从大到小--&gt;前面的元素比后面的元素小，就交换</span></span><br><span class="line">            <span class="comment">//每一轮几次，</span></span><br><span class="line">            <span class="comment">//假设，数组的长度为5</span></span><br><span class="line">            <span class="comment">//第一轮：4次，i=1, j=0,1,2,3  j&lt;4  j&lt; arr.length-i</span></span><br><span class="line">            <span class="comment">//第二轮：3次，i=2, j=0,1,2</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以下代码的执行结果是什么？"><a href="#以下代码的执行结果是什么？" class="headerlink" title="以下代码的执行结果是什么？"></a>以下代码的执行结果是什么？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    change(i);</span><br><span class="line">    i = i++;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：i=0</p><h3 id="以下程序的运行结果："><a href="#以下程序的运行结果：" class="headerlink" title="以下程序的运行结果："></a>以下程序的运行结果：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    change(str,ch);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(String.valueOf(ch));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span>[] arr)</span></span>&#123;</span><br><span class="line">    str = <span class="string">&quot;change&quot;</span>;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：</p><p>world</p><p>abcde</p><h3 id="以下代码的运行结果是？"><a href="#以下代码的运行结果是？" class="headerlink" title="以下代码的运行结果是？"></a>以下代码的运行结果是？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] c = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        g(b,c);</span><br><span class="line">        System.out.println(a + <span class="string">&quot; &quot;</span> + b + <span class="string">&quot; &quot;</span> + c[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span>[] c)</span></span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        b = <span class="number">1</span>;</span><br><span class="line">        c[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：101</p><h3 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h3><p>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?</p><p>答：是值传递。Java 编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的</p><p>补足compare函数内的代码，不许添加其他函数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        radius = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Circle <span class="title">compare</span><span class="params">(Circle cir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 程序代码</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * if(this.radius&gt;cir.radius) return this; return cir;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return (this.radius&gt;cir.radius)?this: cir;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle cir1 = <span class="keyword">new</span> Circle(<span class="number">1.0</span>);</span><br><span class="line">        Circle cir2 = <span class="keyword">new</span> Circle(<span class="number">2.0</span>);</span><br><span class="line">        Circle cir;</span><br><span class="line">        cir = cir1.compare(cir2);</span><br><span class="line">        <span class="keyword">if</span> (cir1 == cir)</span><br><span class="line">            System.out.println(<span class="string">&quot;圆1的半径比较大&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;圆2的半径比较大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Eclipse快捷键的使用"><a href="#Eclipse快捷键的使用" class="headerlink" title="Eclipse快捷键的使用"></a>Eclipse快捷键的使用</h1><ul><li>Eclipse中快捷键的使用：<ul><li>补全代码的声明：Alt + /</li><li>快速修复：Ctrl + 1</li><li>批量导包：Ctrl + Shift + O</li><li>单行注释：Ctrl + /</li><li>多行注释：Ctrl + Shift + /</li><li>取消多行注释：Ctrl + Shift + \</li><li>复制指定行的代码：Ctrl + Alt + Down/Up</li><li>删除指定行的代码：Ctrl + D</li><li>上下移动代码：Alt + Up/Down </li><li>向下插入空行：Shift + Enter</li><li>向上插入空行：Ctrl + Shift + Enter</li><li>如何查看源代码：Ctrl + 点击指定的结构 或 Ctrl + Shift + T</li><li>退回到前一个编辑的页面：Alt + Left</li><li>进入到下一个编辑的页面(针对于上面那条来说的)：Alt + Right</li><li>光标选中指定的类，查看继承树结构：Ctrl + T</li><li>格式化代码：Ctrl + Shift + F</li><li>选中行数整体后移：Tab</li><li>选中行数整体前移：Shift + Tab</li><li>在当前类中，显示类结构，并支持搜索指定的方法、属性等：Ctrl + O</li><li>批量修改指定的变量名、方法名、类名等：Alt + Shift + R</li><li>选中结构大小写切换–变成大写：Ctrl + Shift + X</li><li>选中结构大小写切换–变成小写：Ctrl + Shift + Y</li><li>调出生成getter/setter/构造器等结构：Alt + Shift + S</li><li>显示当前选择资源(工程or文件)的属性：Alt + Enter</li><li>快速查找–参照选中的word快速定位到下一个：Ctrl + K</li><li>关闭当前窗口：Ctrl + W</li><li>关闭所有窗口：Ctrl + Shift + W</li><li>查看指定结构使用过的地方：Ctrl + Alt + G</li><li>查找与替换：Ctrl + F</li><li>最大化当前的View：Ctrl + M</li><li>直接定位到当前的首位：Home</li><li>直接定到当前的末位：End</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章数组</title>
      <link href="/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/"/>
      <url>/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="包名命名规范"><a href="#包名命名规范" class="headerlink" title="包名命名规范"></a>包名命名规范</h1><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802213450.png" alt="01PackageNameingNotations"></p><ul><li>前面为域名倒着写，最后（contact）则体现不同的功能</li></ul><h1 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h1><ul><li>数组（Array），是多个相同数据类型按一定顺序排列的集合，并使用一个名字命名，通过编号的方式对这些数据进行统一管理。</li></ul><h2 id="数组的常见概念"><a href="#数组的常见概念" class="headerlink" title="数组的常见概念"></a>数组的常见概念</h2><ol><li>数组名</li><li>标（或索引）</li><li>元素</li><li>数组的长度：元素的个数</li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>数组是有序排列的；</li><li>数组属于引用数据类型，但是数组的元素既可以是基本数据类型，也可以是引用数据类型；</li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址；</li><li>数组的长度一旦确定，就不能修改；</li><li>可以通过下标（或索引）的方式调用指定位置的元素，速度很快。</li></ol><h2 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h2><ol><li>按照维数：一维数组、二维数组……</li><li>按照数组元素类型分类：基本数据类型元素的素组、引用数据类型元素的数组。</li></ol><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li><p>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多</p></li><li><p>数据的存储结构：</p><ul><li>线性表：顺序表（比如：数组）、链表、栈、队列</li></ul><ul><li>树形结构：二叉树</li><li>图形结构：</li></ul></li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>排序算法</li><li>搜（检索）索算法</li></ol><h1 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h1><h2 id="一维数组的声明和初始化"><a href="#一维数组的声明和初始化" class="headerlink" title="一维数组的声明和初始化"></a>一维数组的声明和初始化</h2><ol><li><p>声明：<code>int[] ins;</code></p></li><li><p>静态初始化：数组的初始化和数组的赋值操作同时进行。</p><ul><li><code>int ids = new int[]&#123;1001,1002,1003,1004&#125;;</code></li></ul></li><li><p>动态初始化：数组的初始化和数组的赋值操作分开进行</p><ul><li><code>String[] names = new String[5];</code></li></ul></li><li><p>错误写法</p><ul><li><code>int[] arr1 = new int[];</code></li><li><code>int[5] arr2 = new int[5];</code></li><li><code>int [] arr3 = new int[3]&#123;1,2,3&#125;;</code></li></ul></li><li><p>总结：数组一旦初始化完成，其长度就确定了。</p></li></ol><h3 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><ol><li><p>如何调用数组指定函数指定位置的函数</p><ul><li>通过索引（角标）的方式调用，索引（角标）从0开始，直到数组的长度-1结束</li></ul></li><li><p>如何获取数组的长度</p><ul><li>属性：length</li><li>使用：<code>names.length</code></li></ul></li><li><p>遍历数组</p><ul><li><code>for(int i = 0; i &lt; names.length; i++)&#123;&#125;</code></li></ul></li></ol><h3 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h3><ol><li>数组元素是整形：0</li><li>数组元素浮点型：0.0</li><li>数组元素是char型：0（NUT）或’\u0000’（ASCII码为0的值）</li><li>数组元素是boolean型：false</li><li>数组元素是引用数据类型：null</li></ol><h3 id="数组的内存解析"><a href="#数组的内存解析" class="headerlink" title="数组的内存解析"></a>数组的内存解析</h3><ol><li>栈（stack）：存放局部变量</li><li>堆（heap)：存放new出来的结构（对象数组）</li><li>方法区：常量池、静态域</li></ol><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802215212.png" align="left"><ul><li>栈中的所有地址为Java虚拟机计算出来的哈希地址，并非真正的内存地址</li></ul><h1 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h1><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li>理解：对于二维数组的理解，可以看成是一维数组array1的元素而存在。<font color="red">从数组底层的运行机制来看，其实没有多维数组。</font></li><li>二维数组的使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;;<span class="comment">//静态初始化</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> String[<span class="number">3</span>][];<span class="comment">//动态初始化2</span></span><br></pre></td></tr></table></figure><ul><li>错误情况</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] arr4 = <span class="keyword">new</span> String[][<span class="number">4</span>];</span><br><span class="line">String[<span class="number">4</span>][<span class="number">3</span>] arr5 = <span class="keyword">new</span> String[][];</span><br><span class="line"><span class="keyword">int</span>[][] arr6 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li>Tips：中括号（[]）的位置可以放在类名或者变量名后面；或者类名后面放一个，变量名后面放一个（二维数组）。</li><li>类型推断：<code>int[][] arr7 = &#123;&#123;1, 2, 3&#125;, &#123;4, 5&#125;, &#123;6, 7, 8&#125;&#125;;//省略new int[][]</code></li></ul><h3 id="数组的基本操作-1"><a href="#数组的基本操作-1" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><ol><li><p>如何调用数组指定位置的函数</p><ul><li><code>arry[i][j]; //第i行第j列的元素</code></li></ul></li><li><p>如何获取数组长度</p><ul><li><code>arr4.length;</code></li><li><code>arr4[0].length;</code></li></ul></li><li><p>如何遍历数组</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; a &lt;= arr4.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= arr4[i].length)&#123;</span><br><span class="line">        <span class="comment">//执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素的默认初始化值-1"><a href="#数组元素的默认初始化值-1" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h3><ol><li><p>规定：二维数组分为外层数组的元素和内层数组的元素</p><p><code>int[][] arr = new int[4][3];</code></p></li></ol><ul><li><p>外层元素：arr[0]，arr[1]等；</p></li><li><p>内层元素：arr[0][0]，arr[1][2]等；</p></li><li><p>初始化方式一：<code>int[][] arr = new int[4][3];</code></p><ul><li>外层元素的初始化值为：地址值</li><li>内层元素的初始化值：与一维数组初始化情况相同</li></ul></li><li><p>初始化方式二：<code>int[][] arr = new int[4][];</code></p><ul><li>外层元素的初始化值为：null</li><li>内层元素的初始化值为：不能调用，否则报错</li></ul></li></ul><h3 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h3><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802223836.png" align="left"><h1 id="数组中涉及到的常见算法"><a href="#数组中涉及到的常见算法" class="headerlink" title="数组中涉及到的常见算法"></a>数组中涉及到的常见算法</h1><ol><li><p>数组元素的赋值（杨辉三角、回形书等）（<font color="red">面试常考</font>）</p></li><li><p>求数值型数组中元素的最大值、最小值、平均数、总数等</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 求数值型数组中元素的最大值、最小值、平均数、总和等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-27        22:14:07</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> avg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            array[i] = (<span class="keyword">int</span>)(Math.random() * (<span class="number">99</span> - <span class="number">10</span> + <span class="number">1</span>) + <span class="number">10</span>);</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; maxValue) &#123;</span><br><span class="line">                maxValue = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            sum += array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        minValue = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; minValue) &#123;</span><br><span class="line">                minValue = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        avg = sum / array.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n最大值为：&quot;</span> + maxValue);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为：&quot;</span> + minValue);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数为：&quot;</span> + avg);</span><br><span class="line">        System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组的复制、反转、查找（线性查找、<font color="red">二分法查找</font>）（面试会考）</p><ul><li><p>复制：通过遍历元素的方式进行复制操作，赋值只能使得新数组值相同一块内存区域，修改其中一个，原数组就得一起改变，相当于Linux中的硬链接</p></li><li><p>反转：通过中间变量实现反转</p></li><li><p>查找</p><ul><li>线性查找</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String dest = <span class="string">&quot;BB&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFind = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dest.equals(arr[i]))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到了指定元素，位置为：&quot;</span> + i);</span><br><span class="line">        isFind = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFind == <span class="keyword">false</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没找到！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二分法查找</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有要查找的数组必须有序</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dest1 = -<span class="number">34</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr2.length - <span class="number">1</span>;<span class="comment">//初始末索引</span></span><br><span class="line"><span class="keyword">boolean</span> isFind = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (head + end)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(dest1 == arr2[mid])&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到了指定的元素，位置为：&quot;</span> + mid);</span><br><span class="line">        isFind = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr2[mid] &gt; dest1)&#123;</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFind == <span class="keyword">false</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;很遗憾，没有找到！&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组元素的排序算法（<font color="red">面试最常考</font>）</p><ul><li><p>排序：假设含有n个记录的序列为(R1, R2,…, Rn)，其相应的关键字序列为(K1, K2,…, Kn)。将这些记录重新排序为(Ri1, Ri2,…, Rin)，使得相应的关键字满足条件Ki1 &lt;= Ki2 &lt;=…&lt;= Kin，这样的一种操作成为排序。</p><ul><li>通常来说，排序的目的是快速查找。</li></ul></li><li><p>衡量排序算法的优劣</p><ul><li>时间复杂度：分析关键字的比较次数和记录的移动次数。</li><li>空间复杂度：分析排序算法中徐需要多少辅助内存。</li><li>稳定性：若两个记录A和B的关键字值相等，但排序后A、B先后次序保持不变，则称这种排序算法是稳定的。</li></ul></li></ul></li></ol><h2 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h2><ol><li>内部排序：整个排序过程不需要借助外部存储器（如磁盘等），所有排序操作都在内存中完成。</li></ol><ul><li><p>十大内部排序算法（和具体语言无关），前八种较常用。</p><ul><li><p>选择排序：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113546.gif" align="left"><p>①直接选择排序；</p><p>②堆排序。</p></li><li><p>交换排序</p><p>③冒泡排序</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113636.gif" align="left"><ul><li>介绍：冒泡排序的原理很简单，它重复地走访要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</li><li>排序思想：比较相邻的元素，如果第一个比第二个大（升序），就交换它们两个；对每一对相邻元素做同样的工作，从开始的第一对到结尾的最后一对，这步做完后，最后元素回事最大的数；针对所有的元素重复上述步骤，除了最后一个；持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组冒泡排序的实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-28        14:24:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">43</span>,<span class="number">32</span>,<span class="number">76</span>,-<span class="number">98</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">33</span>,-<span class="number">21</span>,<span class="number">32</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④快速排序</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113719.gif" align="left"><ul><li>介绍：快速排序通常明显比同为O（nlogn）的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中经常看到快排的影子。快速排序（Quick Sort）由图灵奖获得者Tony Hoare发明，被列为20世纪十大算法之一，是迄今为止所有内排序算中速度最快的一种。快速排序的时间复杂度为O（nlog(n)）。</li><li>排序思想：从数列种挑出一个元素，称为“基准”（pivot）；重新排序数列，所有元素比基准值小的放在基准值前面，比基准值大的放在基准值后面（相同的数可以到任一边）。在这个分区结束后，该基准就处于数列的中间位置。这个称为分区（partition）操作；递归地（recursive）把小于基准值的子数列和大于基准值的子数列排序；递归的最底部情形是数列的大小是0或1，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为每次迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802230020.png" align="left"></li><li><p>插入排序</p><p>⑤直接插入排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113843.gif"></p><p>⑥折半插入排序</p><p>⑦Shell排序</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806113918.gif"></p></li><li><p>⑧归并排序</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114013.gif"></p><ul><li>⑨桶式排序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114039.png"></p><ul><li>⑩基数排序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200806114107.gif"></p></li></ul><ol start="2"><li>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助外部存储器（如磁盘等）。外部排序最常见的是多路归并排序。可以认为外部排序是由多个内部排序组成。</li></ol><h2 id="各种排序算法的比较"><a href="#各种排序算法的比较" class="headerlink" title="各种排序算法的比较"></a>各种排序算法的比较</h2><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802230754.png" alt="04SortComparsion"></p><ol><li>从平均时间而言：快速排序最佳，但在最坏的情况下，时间性能不如堆排序和归并排序。</li><li>从算法简单性看：由于直接选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。</li><li>从稳定性看：直接插入排序、冒泡排序和归并排序是稳定的；而直接选择排序、快速排序、Shell排序和堆排序是不稳定排序。</li><li>从待排序的记录数n的大小看：n较小时，宜采用简单排序；而n较大时，宜采用改进排序。</li></ol><h2 id="排序算法的选择"><a href="#排序算法的选择" class="headerlink" title="排序算法的选择"></a>排序算法的选择</h2><ol><li><p>若n较小（如n≤50），可采用直接插入或直接选择排序。</p></li><li><ul><li>当记录规模较小时，直接插入排序较好，否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。</li></ul></li><li><p>若文件初始状态基本有序（正序），则应选用直接插入、冒泡或随机的快速排序为宜。</p></li><li><p>若n较大，则应采用时间复杂度为O（nlgn）的排序方法：快速排序、堆排序或归并排序。</p></li></ol><h2 id="算法五大特征"><a href="#算法五大特征" class="headerlink" title="算法五大特征"></a>算法五大特征</h2><table><thead><tr><th align="center">输入(Input)</th><th align="left">有0个或多个输入数据，这些输入必须有清楚的描述和定义</th></tr></thead><tbody><tr><td align="center">输出(Output)</td><td align="left">至少有1个或多个输出结果，不可以没有输出结果</td></tr><tr><td align="center">有穷性(有限性，Finiteness)</td><td align="left">算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成</td></tr><tr><td align="center">确定性(明确性，Definiteness)</td><td align="left">算法中的每一步都有明确的含义，不会出现二义性</td></tr><tr><td align="center">可行性(有效性，Effectiveness)</td><td align="left">算法每一步都是清楚且可行的，能让用户用纸和笔计算出答案</td></tr></tbody></table><ul><li>说明：满足确定性的算法也成为了确定性算法。现在人们也关注更广泛的概念，例如考虑各种非确定性的算法，如并行算法、概率算法等。另外，人们也关注并不要求终止的计算描述，这种描述有时被称为过程（procedure）。</li></ul><h1 id="Arrays工具类的使用"><a href="#Arrays工具类的使用" class="headerlink" title="Arrays工具类的使用"></a>Arrays工具类的使用</h1><ol><li>java.util.Arrays类即为操作数组的工具类，它包含了用来操作数组（比如排序和搜索）的各种方法。</li></ol><table><thead><tr><th align="center">1</th><th>boolean equals(int[] a,int[] b)</th><th>判断两个数组是否相等</th></tr></thead><tbody><tr><td align="center">2</td><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td align="center">3</td><td>void fill(int[] a,int val)</td><td>将指定值填充到数组之中</td></tr><tr><td align="center">4</td><td>void sort(int[] a)</td><td>对数组进行排序</td></tr><tr><td align="center">5</td><td>int binarySearch(int[] a,int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> java.util.Arrays：操作数组的共工具类，里面定义了很多操作数组的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-28        16:56:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.boolean equals(int[] a,int[] b):判断两个数组是否相等</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 =  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 =  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">        System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.String toString(int[] a):输出数组信息</span></span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.void fill(int[] a,int val):将指定的值填充到数组中</span></span><br><span class="line">        Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.void sort(int[] a):对数组进行排序</span></span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.int binarySearch(int[] a,int key):对排序后的数组进行二分法检索指定的值</span></span><br><span class="line">        <span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(arr3, <span class="number">333</span>);</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232505.png" alt="05RunResult01"></p><h1 id="数组中常见的一异常"><a href="#数组中常见的一异常" class="headerlink" title="数组中常见的一异常"></a>数组中常见的一异常</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dawnlee.arrayex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 说明数组中的常见异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-28        17:27:15</span></span><br><span class="line"><span class="comment"> *1.数组角标越界的异常:ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *2.空指针异常:NullPointerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组角标越界的异常</span></span><br><span class="line"><span class="comment">//                int[] arr = new int[] &#123;1,2,3,4,5&#125;;</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt;= arr.length;i++) &#123;</span></span><br><span class="line"><span class="comment">//                        System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr[-2]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//空指针异常</span></span><br><span class="line">        <span class="comment">//情况一:</span></span><br><span class="line"><span class="comment">//                int[] arr1 = new int[] &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">//                arr1 = null;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr1[0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况二:</span></span><br><span class="line"><span class="comment">//                int[][] arr2 = new int[4][];</span></span><br><span class="line"><span class="comment">//                System.out.println(arr2[0][0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况三:</span></span><br><span class="line"><span class="comment">//                String[] arr3 = new String[] &#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;;</span></span><br><span class="line"><span class="comment">//                arr3[0] = null;</span></span><br><span class="line"><span class="comment">//                System.out.println(arr3[0].toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>数组角标越界异常：ArrayIndexOutOfBoundsException</p><ul><li>情况一</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= arr.length;i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232903.png" alt="06IndexRunResult1"></p><ul><li>情况二</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr[-<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802232959.png" alt="06IndexRunResult2"></p><ol start="2"><li>空指针异常</li></ol><ul><li>情况一</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1 = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233131.png" alt="07NullRunResult1"></p><ul><li>情况二</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233215.png" alt="07NullRunResult2"></p><ul><li>情况三</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr3 = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802233304.png" alt="07NullRunResult3"></p><h1 id="章节练习题"><a href="#章节练习题" class="headerlink" title="章节练习题"></a>章节练习题</h1><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><ol><li><p>Java能动态分配数组吗？</p><p>答：可以。<code>int i = 12; int[] myInt = new int[i];</code></p></li><li><p>我怎么知道数组的长度？</p><p>答：<code>.length</code>属性获取。</p></li><li><p>数组有没有length()这个方法? String有没有length()这个方法？</p><p>答：数组没有length()这个方法，只有length的属性；String有length()这个方法。</p></li><li><p>Java中的任何数据类型都可以使用System.out.pritln方法显示。</p><ul><li>对于基本数据类型而言，输出的往往是变量的值；</li><li>对于像数组这一类复杂的数据类型，输出的是其堆空间中存储位置的hashCode值。</li></ul></li><li><p>操作二维数组的注意点。</p><ul><li>操作二位数组不应使用常数来控制维数，具体方法是array.length表示行数，array[row].length老表示row行的列数。这样当数组行数和列数不相等时，代码可以自动调整为正确的值。</li></ul></li></ol><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><ol><li><p>显示输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] stringArray = <span class="keyword">new</span> String[<span class="number">3</span>]; <span class="comment">// 各元素的值默认为null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringArray.length; i++) &#123; <span class="comment">// 对各元素进行初始化，但没有赋值。</span></span><br><span class="line">    stringArray[i] = <span class="keyword">new</span> String();</span><br><span class="line">    System.out.println(stringArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：空（有别于null）。</p></li><li><p>面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.chapter02;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-8    17:10:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> ele = (<span class="keyword">int</span>)(Math.random() * (<span class="number">30</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isEqual = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] == ele) &#123;</span><br><span class="line">                    isEqual = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isEqual) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                array[count++] = ele;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回形数格式方阵的实现：从键盘输入1个整数（1~20），以该数字为矩阵的大小，把1，2，3，…… n*n的数字按照顺时针螺旋的形式填入其中。例如输入数字2，则程序2输出：</p><p>1  2</p><p>4  3</p><p>输入数字3，则程序输出：</p><p>1   2   3</p><p>8   9   4</p><p>7   6   5</p><p>输入数字4， 则程序输出： </p><p>1  2  3  4 </p><p>12 13 14 5 </p><p>11 16 15 6 </p><p>10  9   8  7</p><ul><li>方法一：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 回形数格式方阵的实现：从键盘输入1个整数（1~20），以该数字为矩阵的大小，</span></span><br><span class="line"><span class="comment"> *     把1，2，3，…… n*n的数字按照顺时针螺旋的形式填入其中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-8    21:26:59</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CliNumber03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;矩阵大小(1~20)：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        <span class="keyword">int</span> s = len * len;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//k = 1:向右，k = 2:向下，k = 3:向左，k = 4:向上</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">1</span>;m &lt;= s;m++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; len &amp;&amp; mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mat[i][j++] = m;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    k = <span class="number">2</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                    j--;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; len &amp;&amp; mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mat[i++][j] = m;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    k = <span class="number">3</span>;</span><br><span class="line">                    i--;</span><br><span class="line">                    j--;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mat[i][j--] = m;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    k = <span class="number">4</span>;</span><br><span class="line">                    i--;</span><br><span class="line">                    j++;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mat[i--][j] = m;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    k = <span class="number">1</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                    j++;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//显示</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>;m &lt; mat.length;m++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>;n &lt; mat[m].length;n++) &#123;</span><br><span class="line">                System.out.print(mat[m][n] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 第3题方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-13    12:53:16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CliNumber0302</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;矩阵大小(1~20)：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        scan.close();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//元素个数</span></span><br><span class="line">        <span class="keyword">int</span> maxX = len - <span class="number">1</span>;<span class="comment">//x轴最大下标</span></span><br><span class="line">        <span class="keyword">int</span> maxY = len - <span class="number">1</span>;<span class="comment">//y轴最大下标</span></span><br><span class="line">        <span class="keyword">int</span> minX = <span class="number">0</span>;<span class="comment">//x轴最小下标</span></span><br><span class="line">        <span class="keyword">int</span> minY = <span class="number">0</span>;<span class="comment">//y轴最小下标</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(minX &lt;= maxX) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = minX;x &lt;= maxX;x++) &#123;</span><br><span class="line">                mat[minY][x] = ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            minY++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = minY;y &lt;= maxY;y++) &#123;</span><br><span class="line">                mat[y][maxX] = ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            maxX--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = maxX;x &gt;= minX;x--) &#123;</span><br><span class="line">                mat[maxY][x] = ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            maxY--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = maxY;y &gt;= minY;y--) &#123;</span><br><span class="line">                mat[y][minX] = ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            minX++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; mat.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mat[i].length;j++) &#123;</span><br><span class="line">                System.out.print(mat[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下面数组定义正确的有：</p><p>A.String strs[] = { ‘a’ ‘b’ ‘c’}; </p><p>B.String[] strs = {“a”, “b”, “c”};</p><p>C.String[] strs = new String{“a” ”b” ”c”};</p><p>D.String strs[] = new String[]{“a”, “b”, “c”};</p><p>E.String[] strs = new String[3]{“a”, “b”, “c”};</p><p>答案：B、D。</p></li><li><p>写出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String foo=<span class="string">&quot;blue&quot;</span>; </span><br><span class="line">        <span class="keyword">boolean</span>[] bar=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>]; </span><br><span class="line">        <span class="keyword">if</span>(bar[<span class="number">0</span>])&#123;</span><br><span class="line">                    foo=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(foo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：输出：blue</p></li><li><p>下面哪个数组定义是错误的？对错误的答案加上单行注释，写出错误原因。</p><p>A、float[]=new float[3]; //错误，没有变量名</p><p>B、 float f2[]=new float[];//未指定数组长度</p><p>C、 float[] f1=new float[3];//</p><p>D、boolean[] b={“true”,”false”,”true”};//布尔型数组元素不能是字符串</p><p>E、 double f4[]={1,3,5}; //错误</p><p>F、int f5[]=new int[3]{2,3,4}; //动态赋值与静态赋值混用</p><p>G、float f4[]={1.2F,3.0,5.4};//float型数组中放入了double型元素</p></li><li><p>Arrays工具类的使用。</p><p>练习：</p><p>①从键盘输入本组学员的成绩，放到数组中；</p><p>②用for循环显示所有学员的成绩；</p><p>③排序：从低到高；</p><p>④查找是否有正好60分的，如果有，返回位置；</p><p>⑤复制成绩最低三名构成新数组；</p><p>⑥用工具类打印成绩最低三名成绩。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Arrays工具类的使用。</span></span><br><span class="line"><span class="comment">        练习：</span></span><br><span class="line"><span class="comment">        ① 从键盘输入本组学员的成绩，放到数组中；</span></span><br><span class="line"><span class="comment">        ② 用for循环显示所有学员的成绩；</span></span><br><span class="line"><span class="comment">        ③ 排序：从低到高；</span></span><br><span class="line"><span class="comment">        ④ 查找是否有正好60分的，如果有，返回位置；</span></span><br><span class="line"><span class="comment">        ⑤ 复制成绩最低三名构成新数组；</span></span><br><span class="line"><span class="comment">        ⑥ 用工具类打印成绩最低三名成绩。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-13    20:37:21</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTools07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] scores = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入成绩：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; scores.length;i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;学生&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">            scores[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;for循环显示：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; scores.length;i++) &#123;</span><br><span class="line">            System.out.print(scores[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(scores);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：\n&quot;</span> + Arrays.toString(scores));</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(scores, <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到了，位置为：&quot;</span> + index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有成绩为正好60分的。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] low = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        low[<span class="number">0</span>] = scores[<span class="number">0</span>];</span><br><span class="line">        low[<span class="number">1</span>] = scores[<span class="number">1</span>];</span><br><span class="line">        low[<span class="number">2</span>] = scores[<span class="number">2</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;最低3名成绩：&quot;</span> + Arrays.toString(low));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组赋值练习2</p><p>创建一个char类型的36个元素的数组，前26个元素放置’A’-‘Z’，后10个元素放置’1’-‘9’。使用for循环访问所有元素并打印出来。</p><ul><li>提示：char类型数据运算，’A’+1 –&gt; ‘B’，’0’+1 –&gt; ‘1’</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建一个char类型的36个元素的数组，前26个元素放置&#x27;A&#x27;-&#x27;Z&#x27;，后10个元素放置&#x27;1&#x27;-&#x27;9&#x27;。</span></span><br><span class="line"><span class="comment"> *     使用for循环访问所有元素并打印出来。</span></span><br><span class="line"><span class="comment"> *     提示：char类型数据运算，&#x27;A&#x27;+1 --&gt; &#x27;B&#x27;，&#x27;0&#x27;+1 --&gt; &#x27;1&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-13    21:11:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">36</span>];</span><br><span class="line">        charArr[<span class="number">0</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        charArr[<span class="number">26</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">26</span>;i++) &#123;</span><br><span class="line">            charArr[i] = (<span class="keyword">char</span>) (<span class="string">&#x27;A&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">27</span>;i &lt; <span class="number">36</span>;i++) &#123;</span><br><span class="line">            charArr[i] = (<span class="keyword">char</span>)(<span class="string">&#x27;0&#x27;</span> + (i - <span class="number">26</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; charArr.length;i++) &#123;</span><br><span class="line">            System.out.print(charArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200913214114.png" align="left"></li><li><p>一维数组a[]，用Java代码将数组元素顺序颠倒。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 一维数组a[]，用Java代码将数组元素顺序颠倒。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-13    21:44:03</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseArr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span> + Arrays.toString(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (a.length / <span class="number">2</span>);i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[a.length - i - <span class="number">1</span>];</span><br><span class="line">            a[a.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;颠倒后：&quot;</span> + Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927102405.png" align="left"></li><li><p>任意输入一个人输入年龄就可以判断出他是哪个年龄段的人。</p><table><thead><tr><th align="center">年龄</th><th align="center">0-9</th><th align="center">10-19</th><th align="center">20-29</th><th align="center">30-39</th><th align="center">40-49</th><th>50-59</th><th align="center">60-69</th><th align="center">70-79</th><th align="center">80-89</th><th align="center">90-99</th></tr></thead><tbody><tr><td align="center">年龄段</td><td align="center">儿童</td><td align="center">少年</td><td align="center">青少年</td><td align="center">青年</td><td align="center">壮年</td><td>中年</td><td align="center">中老年</td><td align="center">老年</td><td align="center">老老年</td><td align="center">老老老年</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 任意输入一个人输入年龄就可以判断出他是哪个年龄段的人。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    10:27:16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeGroup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = scan.nextInt();</span><br><span class="line">        scan.close();</span><br><span class="line">        <span class="keyword">int</span> level = (<span class="keyword">int</span>)(age / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">switch</span>(level) &#123;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">0</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：儿童&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">1</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：少年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">2</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：青少年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">3</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：青年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">4</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：壮年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">5</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：中年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">6</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：中老年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">7</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：老年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">8</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：老老年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span>(<span class="number">9</span>):</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄段：老老老年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;错误：年龄超出范围(0~99)！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用数组求出斐波那契数列的前20项值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用数组求出斐波那契数列的前20项值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    10:45:04</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] fibo = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        fibo[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        fibo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; fibo.length;i++) &#123;</span><br><span class="line">            fibo[i] = fibo[i - <span class="number">1</span>] + fibo[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(fibo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927104953.png" align="left"></li><li><p>对10个整数进行从小到大的顺序排序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 对10个整数进行从小到大的顺序排序。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    10:52:27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort();</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="keyword">double</span> start = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;冒泡排序后：&quot;</span> + Arrays.toString(sort.bubbleSort(arr)));</span><br><span class="line">        <span class="keyword">double</span> end = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (end - start));</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//快速排序</span></span><br><span class="line">        start = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;快速排序后：&quot;</span> + Arrays.toString(sort.quickSort(arr)));</span><br><span class="line">        end = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (end - start));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//原序列</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;原序列：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length;i++) &#123;</span><br><span class="line">            a[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; a.length - <span class="number">1</span> - i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length;i++) &#123;</span><br><span class="line">            a[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927120721.png" align="left"></li><li><p>求一个3*3对角线元素之和。</p><p><strong>提示：</strong>利用双重for循环控制输入二维数组，再将a[i][i]累加后输出。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 求一个3*3对角线元素之和。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    11:55:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumDia</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;数组大小：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        System.out.println(<span class="string">&quot;请分别输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        SumDia sumD = <span class="keyword">new</span> SumDia();</span><br><span class="line">        sumD.show(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;对角线元素之和为：&quot;</span> + sumD.sumDia(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; array[i].length;j++) &#123;</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumDia</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; array[i].length;j++) &#123;</span><br><span class="line">                <span class="comment">//正对角</span></span><br><span class="line">                <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">                    sum += array[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//反对角</span></span><br><span class="line">            sum += array[i][array.length - <span class="number">1</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(array.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            sum = sum - array[(<span class="keyword">int</span>)(array.length / <span class="number">2</span>)][(<span class="keyword">int</span>)(array.length / <span class="number">2</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927135713.png" align="left"></li><li><p>利用随机数生成一个整数数组，数组中有10个元素，每个元素的值都在1-30之间，且要求各个数值不能相同。打印该数组。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 利用随机数生成一个整数数组，数组中有10个元素，每个元素的值都在1-30之间，</span></span><br><span class="line"><span class="comment"> *     且要求各个数值不能相同。打印该数组。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    13:59:09</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ranArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ranArr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ele = (<span class="keyword">int</span>)(Math.random() * (<span class="number">30</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">new</span> RandomArrays().isExist(ranArr, ele)) &#123;</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ranArr[i] = ele;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(ranArr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isExisted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == key) &#123;</span><br><span class="line">                isExisted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isExisted;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927143054.png" align="left"></li><li><p>输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-27    14:38:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysExchange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">20</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">8</span>, <span class="number">11</span>&#125;;</span><br><span class="line">        max = min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数列：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最大值与第一个元素交换</span></span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="keyword">new</span> ArraysExchange().search(arr,max);</span><br><span class="line">        <span class="keyword">int</span> maxTemp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[maxIndex];</span><br><span class="line">        arr[maxIndex] = maxTemp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最小值与最后一个元素交换</span></span><br><span class="line">        <span class="keyword">int</span> minIndex = <span class="keyword">new</span> ArraysExchange().search(arr,min);</span><br><span class="line">        <span class="keyword">int</span> minTemp = arr[arr.length - <span class="number">1</span>];</span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = minTemp;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200927150727.png" align="left"></li><li><p>有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    16:52:20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveEle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">19</span>, <span class="number">17</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">29</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;n = &quot;</span> + arr.length);</span><br><span class="line">        System.out.print(<span class="string">&quot;m = &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">        scan.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[arr.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - <span class="number">1</span>;j &gt; <span class="number">0</span>;j--) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;移位后：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928204259.png" align="left"></li><li><p>定义一个4行4列的二维数组，逐个从键盘输入值，然后将第1行和第4行的数据进行交换，将第2行和第3行的数据进行交换。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个4行4列的二维数组，逐个从键盘输入值，然后将第1行和第4行的数据进行交换，</span></span><br><span class="line"><span class="comment"> *     将第2行和第3行的数据进行交换。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    20:49:59</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeRow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;数组大小 n = &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        System.out.println(<span class="string">&quot;分别输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;arr[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;] = &quot;</span>);</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;交换前：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ExchangeRow().showArr(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="keyword">int</span>)(arr.length / <span class="number">2</span>);i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i][j];</span><br><span class="line">                arr[i][j] = arr[arr.length - <span class="number">1</span> - i][j];</span><br><span class="line">                arr[arr.length - <span class="number">1</span> - i][j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ExchangeRow().showArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArr</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arrays.length;i++) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arrays[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928211828.png" align="left"></li><li><p>定义一个3行4列的二维数组，逐个从键盘输入值，编写程序将四周的数据清0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个3行4列的二维数组，逐个从键盘输入值，编写程序将四周的数据清0。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    21:20:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearAround</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;行数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> row = scan.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;列数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> clu = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[row][clu];</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;a[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;] = &quot;</span>);</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearAround().showArr(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || i == (arr.length - <span class="number">1</span>) || j == <span class="number">0</span> || j == (arr[i].length - <span class="number">1</span>)) &#123;</span><br><span class="line">                    arr[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;四周清零后：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearAround().showArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArr</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arrays.length;i++) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arrays[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928215015.png" align="left"></li><li><p>定义一个3行4列的二维数组，逐个从键盘输入值，将左下三角的值清0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个3行4列的二维数组，逐个从键盘输入值，将左下三角的值清0。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    21:54:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearDLTriangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;行数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> row = scan.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;列数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> clu = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[row][clu];</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;a[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;] = &quot;</span>);</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearDLTriangle().showArr(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;左下三角清零后：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearDLTriangle().showArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArr</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arrays.length;i++) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arrays[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928215840.png" align="left"></li><li><p>定义一个4行4列的二维数组，逐个从键盘输入值，将对角线的值清0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个4行4列的二维数组，逐个从键盘输入值，将对角线的值清0。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    22:00:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearDia</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;数组大小 n = &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;a[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;] = &quot;</span>);</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearDia().showArr(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            arr[i][i] = <span class="number">0</span>;</span><br><span class="line">            arr[i][arr[i].length - <span class="number">1</span> - i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;对角线清零后：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearDia().showArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArr</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arrays.length;i++) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arrays[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928221228.png" align="left"></li><li><p>定义一个N*N二维数组，从键盘上输入值，找出每行中最大值组成一个一维数组并输出。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.trabin.chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义一个N*N二维数组，从键盘上输入值，找出每行中最大值组成一个一维数组并输出。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-28    22:13:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;数组大小 n = &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入数组元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;a[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;] = &quot;</span>);</span><br><span class="line">                arr[i][j] = scan.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> ClearDia().showArr(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] max = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxValue = arr[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maxValue &lt; arr[i][j]) &#123;</span><br><span class="line">                    maxValue = arr[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max[i] = maxValue;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;每行最大值数组：&quot;</span> + Arrays.toString(max));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArr</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arrays.length;i++) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arrays[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200928222818.png" align="left"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章基本语法</title>
      <link href="/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h1><h2 id="关键字（keyword）"><a href="#关键字（keyword）" class="headerlink" title="关键字（keyword）"></a>关键字（keyword）</h2><ol><li>定义：被Java语言赋予特殊含义，用作专门用途的字符（单词）。</li><li>特点：关键字中所有字母都为小写。</li><li>官方地址：<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts.html</a></li></ol><h2 id="保留字（reserved-word）"><a href="#保留字（reserved-word）" class="headerlink" title="保留字（reserved word）"></a>保留字（reserved word）</h2><ol><li><p>Java保留字：现有的Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字。</p><ul><li>例：goto、const……</li></ul></li></ol><h1 id="标识符（Identifier）"><a href="#标识符（Identifier）" class="headerlink" title="标识符（Identifier）"></a>标识符（Identifier）</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>Java对各种变量、方法和类等要素命名时使用的字符序列称为标识符。</li><li>比如：类名、变量名、方法名、接口名、包名……</li><li>技巧：凡是自己可以取名字的地方都叫标识符。</li></ol><h2 id="定义合法标识符规则（必须遵守）"><a href="#定义合法标识符规则（必须遵守）" class="headerlink" title="定义合法标识符规则（必须遵守）"></a>定义合法标识符规则（<font color="red">必须遵守</font>）</h2><ol><li>由26个英文字母大小写，0-9，_或$组成；</li><li>数字不可开头；</li><li>不可以使用关键字和保留字，但可以包含关键字和保留字；</li><li>Java中严格区分大小写，长度无限制；</li><li>标识符不能包含空格。</li></ol><h2 id="Java中名称命名规范（建议遵守）"><a href="#Java中名称命名规范（建议遵守）" class="headerlink" title="Java中名称命名规范（建议遵守）"></a>Java中名称命名规范（<font color="blue">建议遵守</font>）</h2><ol><li><p>包名：多单词组成时所有字母都小写：xxxyyyzzz；</p></li><li><p>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz ；</p></li><li><p>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz；</p></li><li><p>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ；</p></li><li><p>注意</p><ul><li><p>注意1：在取名字时，为提高阅读性，要尽量有意义（见名知意）</p></li><li><p>注意2：Java采用unicode字符集，因此标识符也可以使用汉字声明，但不建议使用</p></li></ul></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><ol><li><p>内存中的一个存储区域；</p></li><li><p>该区域的数据可在同一类型范围内不断变化；</p></li><li><p>变量是程序中最基本的存储单元。包含变量类型（强类型：必须先声明）、变量名和存储的值。</p><ul><li>定义变量的格式：数据类型 变量名 = 变量值<ul><li>例：<code>int myAge = 18;</code></li></ul></li></ul></li></ol><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><ol><li>用于在内存中保存数据。</li></ol><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ol><li>Java中每个变量必须先声明，后使用；</li><li>变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了。“一对{}”即为一个作用域；</li><li>同一个作用域内，不能声明两个同名的变量。</li><li>Java定义的数据类型（按数据类型分）：对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。</li></ol><ul><li><p>基本数据类型（primitive type）</p><p>(1)数值型</p><ul><li><p>整数类型</p><ul><li>byte<ul><li>占用存储空间：1字节 =  8bit位</li><li>表数范围：-128~127（2<sup>7</sup>），最高位为符号位（0正1负），故为7次方</li></ul></li></ul><ul><li><p>short</p><ul><li>占用存储空间：2字节</li><li>表数范围：-2<sup>15</sup>~2<sup>15</sup>-1</li></ul></li><li><p>int</p><ul><li>占用存储空间：4字节</li><li>表数范围：-2<sup>31</sup>~2<sup>31</sup>-1（约21亿）</li></ul></li><li><p>long</p><ul><li>占用存储空间：8字节</li><li>表数范围：-2<sup>63</sup>~2<sup>63</sup>-1</li></ul></li><li><p>注意</p><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证Java程序的可移植性</li><li>Java的整型常量默认为int型，声明long型常量须后加‘l’或‘L’</li><li>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long         </li></ul></li></ul></li></ul><ul><li><p>浮点类型</p><ul><li><p>单精度float</p><ul><li>占用存储空间：4字节</li><li>表数范围：-3.403E38~3.403E38</li></ul></li><li><p>双精度double</p><ul><li>占用存储空间：8字节</li><li>表数范围：-1.798E308~1.798E308</li></ul></li><li><p>注意：与整数类型类似，Java浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</p></li><li><p>浮点型常量有两种表示形式</p><ul><li>十进制数形式：如：5.12、512.0f、.512          (必须有小数点）</li><li>科学计数法形式:如：5.12e2、512E2、100E-2</li></ul></li><li><p>float：单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求</p></li><li><p>double：双精度，精度是float的两倍。通常采用此类型</p></li><li><p>Java的浮点型常量默认为double型，声明float型常量，须后加’f’或’F’</p></li><li><p>float表示的数值范围比long还大，是因为它使用科学计数法来计数，但是精度不够</p></li></ul></li></ul><p>(2)字符型</p><ul><li><p>char</p><ul><li>1字符 = 2字节</li><li>声明或定义char型变量，通常使用一对单引号（’’），内部只能写一个字符</li><li>转义字符（例如：换行符\n、制表符\t、unicode编号等）</li></ul></li><li><p>布尔型</p><ul><li>boolean<ul><li>只能取两个值之一：true、false</li><li>常用于判断、循环结构</li><li>boolean类型数据只允许取值true和false，无null</li><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同</li><li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替：true用1表示，false用0表示</li></ul></li></ul></li></ul></li><li><p>引用数据类型（reference type）</p><ul><li>类（class）</li><li>接口（interface）</li><li>数组（[]）</li></ul></li></ul><table>    <tr>        <caption>Java定义的数据类型按数据类型分类</caption>    </tr>    <tr>        <th colspan="4" align="center">数据类型</th>        <th align="center">占用存储空间</th>        <th align="center">表数范围</th>    </tr>    <tr>        <td rowspan="8" align="center">基本数据类型</td>        <td rowspan="6" align="center">数值型</td>        <td rowspan="4" align="center">整数类型</td>        <td align="center">byte</td>        <td align="center">1字节=8比特</td>        <td>-128~127，最高位为符号位(0正1负)，故为2<sup>7</sup></td>    </tr>    <tr>        <td align="center">short</td>        <td align="center">2字节</td>        <td>-2<sup>15</sup>~2<sup>15</sup></td>    </tr>     <tr>        <td align="center">int</td>        <td align="center">4字节</td>        <td>-2<sup>31</sup>~2<sup>31</sup>（约21亿）</td>    </tr>     <tr>        <td align="center">long</td>        <td align="center">8字节</td>        <td>-2<sup>63</sup>~2<sup>63</sup></td>    </tr>    <tr>        <td rowspan="2" align="center">浮点类型</td>        <td align="center">单精度float</td>        <td align="center">4字节</td>        <td>-3.403E38~3.403E38</td>    </tr>    <tr>        <td align="center">双精度double</td>        <td align="center">8字节</td>        <td>-1.798E308~1.798E308</td>    </tr>    <tr>        <td rowspan="2" colspan="2" align="center">字符型</td>        <td align="center">char</td>        <td align="center">1字符=2字节</td>        <td>声明或定义char型变量，通常使用一对单引号（''），内部只能写一个字符</td>    </tr>    <tr>        <td align="center">布尔型(boolean)</td>        <td align="center"></td>        <td>true/false</td>    </tr>    <tr>        <td rowspan="3" align="center">引用数据类型</td>        <td align="center" colspan="2">类</td>        <td align="center">class</td>        <td></td>        <td></td>    </tr>    <tr>        <td colspan="2" align="center">接口</td>        <td align="center">interface</td>        <td></td>        <td></td>    </tr>    <tr>        <td colspan="2" align="center">数组</td>        <td align="center">[]</td>        <td></td>        <td></td>    </tr></table><h1 id="编码方式（了解内容）"><a href="#编码方式（了解内容）" class="headerlink" title="编码方式（了解内容）"></a>编码方式（了解内容）</h1><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><ol><li><p>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有0和1两种状态，因此8个二进制位就可以组合出256种状态，这被称为一个字节（byte）。一个字节一共可以用来表示 256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111</p></li><li><p>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0</p></li><li><p>缺点</p></li></ol><ul><li>不能表示所有字符</li><li>相同的编码表示的字符不一样：比如，130在法语编码中代表了é，在希伯来语编码中却代表(ג)了字母Gimel</li></ul><h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><ol><li><p>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</p></li><li><p>Unicode：一种编码方式，将世界上所有的符号都纳入其中。每一个符号都给予一个独一 无二的编码，使用Unicode没有乱码的问题。</p></li><li><p>Unicode的缺点：</p><ul><li><p>Unicode只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储；</p></li><li><p>无法区别 Unicode 和ASCII：计算机无法区分三个字节表示一个符号还是分别表示三个符号。另外，我们知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有 二到三个字节是0，这对于存储空间来说是极大的浪费。</p></li></ul></li></ol><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><ol><li><p>UTF-8是在互联网上使用最广的一种Unicode的实现方式</p></li><li><p>UTF-8是一种变长的编码方式。它可以使用**<font color="red">1-6个字节</font>**表示一个符号，根据不同的符号而变化字节长度</p></li><li><p>UTF-8的编码规则</p><ul><li><p>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）</p></li><li><p>对于多字节的UTF-8编码，如果编码包含n个字节，那么第一个字节的前n位为1，第一个字节的第n+1位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码</p></li></ul></li><li><p>Tips：解除转义 例：解除换行符：\\n，直接显示“\n”</p></li></ol><h1 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则"></a>基本数据类型之间的运算规则</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>这里只讨论7种基本数据类型变量间的运算，不包含boolean类型的。</li></ul><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><ol><li>容量小的类型自动转换为容量大的数据类型。</li></ol><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210501.png" align="left"><ul><li>byte、char、short三种类型变量做运算时，结果为int类型，即这三个变量之间的运算结果至少要拿一个int型去接收。原因：可能是防止溢出，并且整形常量默认类型为int型，运算时如果直接加减数字的话编译不通过。</li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul><li>自动类型提升的逆运算：</li></ul><ol><li><p>需要使用强转符</p></li><li><p>强制类型转换可能导致精度损失</p></li></ol><h2 id="字符串类型：String"><a href="#字符串类型：String" class="headerlink" title="字符串类型：String"></a>字符串类型：String</h2><ol><li><p>String属于引用数据类型;</p></li><li><p>声明String类型变量时，使用一对双引号（””），长度不限（不超过内存空间即可）；</p></li><li><p>定义String类型变量时，双引号之间可以没有内容，但是char类型不可以；</p></li><li><p>String可以和8中基本数据类型变量作运算，且运算只能是连接运算（+），运算结果仍是String类型；</p></li><li><p>将String类型转为int型：<code>int num1 = Integer.parseInt(str1)</code>，而不能用强制转换，强制转换只能在上述7种数据类型之间。</p></li></ol><h1 id="进制（了解内容）"><a href="#进制（了解内容）" class="headerlink" title="进制（了解内容）"></a>进制（了解内容）</h1><ul><li>所有数字在计算机底层都以二进制形式存在</li></ul><h2 id="整数的四种表示方式"><a href="#整数的四种表示方式" class="headerlink" title="整数的四种表示方式"></a>整数的四种表示方式</h2><ol><li>二进制(binary)：0,1 ，满2进1，以0b或0B开头；</li><li>十进制(decimal)：0-9 ，满10进1；</li><li>八进制(octal)：0-7 ，满8进1，以数字0开头表示；</li><li>十六进制(hex)：0-9及A-F，满16进1，以0x或0X开头表示。此处的A-F不区分大小写。如：0x21AF + 1 = 0X21B0。</li></ol><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><ol><li><p>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</p></li><li><p>二进制的整数有如下三种形式：</p></li></ol><ul><li><p>原码：直接将一个数值换成二进制数。最高位是符号位。</p></li><li><p>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</p></li><li><p>负数的补码：其反码加1。</p></li><li><p>计算机以二进制补码的形式存所有的整数。</p><ul><li>正数的原码、反码、补码都相同</li><li>负数的补码是其反码+1</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210544.png" align="left"><h2 id="四种进制之间的转换"><a href="#四种进制之间的转换" class="headerlink" title="四种进制之间的转换"></a>四种进制之间的转换</h2><ul><li>以二进制位媒介来转换</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200907130439.png" align="left"><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>概念：运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b=4;-b</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5+5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6-4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3*4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5/5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模（取余）</td><td align="center">7%5</td><td align="center">2</td></tr><tr><td align="center">++<br>++</td><td align="center">自增（前）：先运算后取值<br>自增（后）：先取值后运算</td><td align="center">a=2;b=++a;<br>a=2;b=a++</td><td align="center">a=3;b=3<br>a=3;b=2</td></tr><tr><td align="center">–<br>–</td><td align="center">自减（前）：先运算后取值<br>自减（后）：先取值后运算</td><td align="center">a=2;b=–a;<br>a=2;b=a–</td><td align="center">a=1;b=1<br>a=1;b=2</td></tr><tr><td align="center">+</td><td align="center">字符串连接</td><td align="center">“He”+”llo”</td><td align="center">“Hello”</td></tr></tbody></table><ol><li><p>整形数相除后默认结果为整形</p><ul><li>需要精确结果进行运算前需要先进行类型转换（自动转换或者强制类型转换）</li></ul></li><li><p>取模（余）运算（%）</p><ul><li>结果符号与被模（除）数相同</li></ul></li><li><p>自增（减）</p><ul><li>（前）++：先自增1，后运算</li><li>（后）++：先运算，后自增1</li><li>自减（略）</li><li><font color="blue">注意：自增（减）不会改变变量本身数据类型</font></li></ul></li></ol><h2 id="赋值运算符（-）"><a href="#赋值运算符（-）" class="headerlink" title="赋值运算符（=）"></a>赋值运算符（=）</h2><ol><li><p>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</p></li><li><p>支持连续赋值</p><ul><li><code>int i1, j1;</code></li><li><code>i1 = j1 = 10;</code></li></ul></li></ol><h2 id="比较（关系）运算符"><a href="#比较（关系）运算符" class="headerlink" title="比较（关系）运算符"></a>比较（关系）运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td><td align="center">4==3</td><td align="center">false</td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">4!=3</td><td align="center">true</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">4&lt;3</td><td align="center">false</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">4&gt;3</td><td align="center">true</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td><td align="center">4&lt;=3</td><td align="center">false</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td><td align="center">4&gt;=3</td><td align="center">true</td></tr><tr><td align="center">instanceof</td><td align="center">检查是否是类的对象</td><td align="center">“Hello” instanceof String</td><td align="center">true</td></tr></tbody></table><ol><li><p>比较运算符的运算结果都是boolean型，也就是要么是true，要么false</p></li><li><p>区分“=”和“==”</p></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="center">参数</th><th align="center">参数</th><th align="center">逻辑与</th><th align="center">短路与</th><th align="center">逻辑或</th><th align="center">短路或</th><th align="center">逻辑非</th><th align="center">逻辑异或</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">b</td><td align="center">a&amp;b</td><td align="center">a&amp;&amp;b</td><td align="center">a|b</td><td align="center">a||b</td><td align="center">!a</td><td align="center">a^b</td></tr><tr><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">false</td><td align="center">false</td></tr><tr><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">true</td><td align="center">false</td><td align="center">true</td></tr><tr><td align="center">false</td><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td></tr><tr><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">false</td></tr></tbody></table><ol><li><p>区分逻辑与（&amp;）和短路与（&amp;&amp;）</p><ul><li>相同点：运算结果相同；党符号左边为true时，都会执行符号右边的内容</li><li>不同点：当左边为false时，&amp;&amp;不会执行符号右边的运算（短路）</li><li>开发中优先使用短路与（&amp;&amp;）</li></ul></li><li><p>区分逻辑或（|）和短路或（||）</p><ul><li>相同点：运算结果相同；当符号右边为false时，二者都会执行符号右边的内容</li><li>不同点：当符号左边为true时，|| 不会执行符号右边的运算（短路）</li><li>开发中优先使用短路或（||）</li></ul></li><li><p>逻辑非（!）</p></li><li><p>逻辑异或（^）</p><ul><li>相同为true，不同为false</li></ul></li></ol><h2 id="位运算符（用得较少）"><a href="#位运算符（用得较少）" class="headerlink" title="位运算符（用得较少）"></a><font color="gray">位运算符（用得较少）</font></h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="left">范例</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="left">3 &lt;&lt; 2 = 12 –&gt; 3 * 2 <sup>2</sup> = 12</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="left">3 &gt;&gt; 1 = 1 –&gt; 3 / 2 <sup>1</sup>= 1</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号右移</td><td align="left">3 &gt;&gt;&gt; 1 = 1 –&gt; 3 / 2 = 1</td></tr><tr><td align="center">&amp;</td><td align="center">与运算</td><td align="left">6 &amp; 3 = 2</td></tr><tr><td align="center">|</td><td align="center">或运算</td><td align="left">6 | 3 = 7</td></tr><tr><td align="center">^</td><td align="center">异或运算</td><td align="left">6 ^ 3 = 5</td></tr><tr><td align="center">~</td><td align="center">取反运算</td><td align="left">~ 6 = -7</td></tr></tbody></table><p><strong>位运算符细节：</strong></p><table><thead><tr><th align="center">&lt;&lt;</th><th>空位补0，被移除的高位丢弃，空缺位补0。</th></tr></thead><tbody><tr><td align="center">&gt;&gt;</td><td>被移位的二进制最高位是0，右移后，空缺位补0；最高位是1，最高位补1。</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td>被移位二进制最高位无论是0或者是1，空缺位都用0补。</td></tr><tr><td align="center">&amp;</td><td>二进制位进行&amp;运算，只有1&amp;1时结果是1，否则是0。</td></tr><tr><td align="center">|</td><td>二进制位进行|运算，只有0|0时结果时0，否则是1。</td></tr><tr><td align="center">^</td><td>相同的二进制位进行^运算，结果是0；1^1=0，0^0=0；不相同的二进制位^运算结果是1。1^0=1，0^1=1。</td></tr><tr><td align="center">~</td><td>正数取反，各二进制码按补码各位取反；负数取反，各二进制码按补码各位取反。</td></tr></tbody></table><ol><li><p>位运算符是直接对整数的二进制进行的运算</p></li><li><p>位运算符操作的都是整形的数据</p></li><li><p>&lt;&lt;：在一定范围内，每向左移n位，相当于*2<sup>n</sup></p></li><li><p>&gt;&gt;：在一定范围内，每向右移n位，相当于/2<sup>n</sup></p><ul><li><p>面试题：如何最高效的计算2*8？</p><ul><li>2 &lt;&lt; 3 或 8 &lt;&lt; 1</li></ul></li><li><p>注意：无&lt;&lt;&lt;</p></li></ul></li><li><p>&amp;、|、^运算</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210803.png" alt="09AndOrXorOperation"></p><ol start="6"><li><p>~取反运算</p><ul><li>包括符号位在内取反</li></ul><img src="https://gitee.com/Dawn_Lee/blogimg/raw/master/20200908185550.png" align="left"></li><li><p>练习：交换两个变量的值</p></li></ol><ul><li><p>方法一：定义临时变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num1 = num1 + num2;</span><br><span class="line">num2 = num1 - num2;</span><br><span class="line">num1 = num1 - num2;</span><br></pre></td></tr></table></figure><ul><li>优点：不用定义临时变量、</li><li>弊端：①相加操作可能超出存储范围； ②有局限性：只能适用于数值类型。</li></ul></li><li><p>方法三：使用位运算符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ol><li><p>格式：<img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210855.png" alt="11TernaryOperation"></p><ul><li>条件表达式的结果为boolean类型</li><li>表达式1和表达式2为<strong>同种类型</strong></li><li>三元运算符可嵌套使用</li></ul></li><li><p>三元运算符与if-else的联系与区别</p><ul><li>三元运算符可简化if-else语句，因此能用三元运算符的地方尽量用三元运算符</li><li>三元运算符要求必须返回一个结果</li><li>if后的代码块可有多个语句</li><li>凡是可以使用三元运算符的地方都可以改写成if-else，反之则不一定行</li></ul></li><li><p>练习：获取3个数中的最大值</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> max1 = (a &gt; b)? a : b;</span><br><span class="line"><span class="keyword">int</span> max2 = (max1 &gt; c)? max1 : c;</span><br></pre></td></tr></table></figure><h2 id="运算符的优先等级"><a href="#运算符的优先等级" class="headerlink" title="运算符的优先等级"></a>运算符的优先等级</h2><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210916.png" align="left"><ol><li><p>运算符有不同优先级，所谓优先级就是表达式 运算中的运算顺序</p></li><li><p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的</p></li></ol><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ul><li>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块</li></ul><h2 id="如何从键盘-控制台获取不同类型的变量：需要使用Scanner类"><a href="#如何从键盘-控制台获取不同类型的变量：需要使用Scanner类" class="headerlink" title="如何从键盘/控制台获取不同类型的变量：需要使用Scanner类"></a>如何从键盘/控制台获取不同类型的变量：需要使用Scanner类</h2><ol><li><p>导包：<code>import java.util.Scanner;</code></p></li><li><p>Scanner的实例化：<code>Scanner scan = new Scanner(System.in);</code></p></li><li><p>调用Scanner的相关方法，来获取指定类型的变量。</p></li><li><p>对于char类型的获取，Scanner没有提供相关的方法，只能获取一个字符串。</p></li><li><p>如果一定要获取char类型，可用charAt(0)获取字符串索引为0位置上的字符。</p></li></ol><ul><li>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配，则出现异常：InputMisMatchException，导致程序中断。容量小的可自动提升；</li></ul><h2 id="如何获取随机数"><a href="#如何获取随机数" class="headerlink" title="如何获取随机数"></a>如何获取随机数</h2><ol><li><code>double value = Math.random()</code>：返回一个[0.0, 1.0)之间的double型的值。</li></ol><ul><li>例：获取[a,b]之间的int型随机数：<code>(int)(Math.random() * (b - a + 1) + a)</code></li></ul><h2 id="流程控制方式结构化程序设计中规定的三种基本流程结构"><a href="#流程控制方式结构化程序设计中规定的三种基本流程结构" class="headerlink" title="流程控制方式结构化程序设计中规定的三种基本流程结构"></a>流程控制方式结构化程序设计中规定的三种基本流程结构</h2><ol><li><p>顺序结构</p><ul><li>程序从上到下逐行执行，中间没有任何判断和跳转</li></ul></li><li><p>分支结构</p><ul><li>根据条件，选择性地执行某段代码</li><li>有if-else和switch-case两种分支语句</li></ul></li><li><p>循环结构</p><ul><li>根据循环条件，重复性地执行某段代码</li><li>有while、do…while、for三种循环语句</li><li>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素</li></ul></li></ol><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="if-else结构"><a href="#if-else结构" class="headerlink" title="if-else结构"></a>if-else结构</h3><ol><li><p>第一种</p><p>if(条件表达式){</p><p>执行表达式</p><p>}</p></li><li><p>第二种：二选一</p><p>if(条件表达式){</p><p>执行表达式1</p><p>}else{</p><p>执行表达式2</p><p>}</p></li><li><p>第三种：多选一</p><p>if(条件表达式1){</p><p>执行表达式1</p><p>}</p><p>if(条件表达式2){</p><p>执行表达式2</p><p>}</p><p>……</p><p>else{</p><p>执行表达式n</p><p>}</p></li><li><p>使用说明</p><ul><li>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量。</li><li>语句块只有一条执行语句时，一对{}可以省略，<strong>但建议保留</strong></li><li>if-else语句结构，根据需要可以嵌套使用（一般不超过3层，超过3层未解决则停下来想其他办法）。</li><li>当if-else结构是“多选一”时，最后的else是可选的，根据需要可以省略。</li><li>当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓。</li><li>当多个条件是“包含”关系时，“小上大下 /子上父下”。</li><li>if (80 &lt; core &lt;= 99)报错原因：前面的(80 &lt; core)的结果为一个boolean类型，boolean类型不能与int类型做大小关系对比。</li></ul></li><li><p>针对于条件表达式：</p><ul><li><p>如果多个表达式之间是”互斥“关系（或没有交集的关系），判断和执行语句的上下顺序不影响。</p></li><li><p>如果多个表达式之间有交集的关系，则需要根据实际情况来决定哪个声明在上面。</p></li><li><p>如果多个表达式之间有包含关系，通常情况下，需要将范围小的声明在范围大的上面，否则范围小的就没机会执行了。</p></li><li><p>就近原则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">2</span>)</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//上述语句相当于：</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">2</span>)</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//以上误判源于省略了单行执行语句的&#123;&#125;，所以尽量不要省略&#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch-case结构"></a>switch-case结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210937.png" alt="13Switch-Case"></p><ol><li>说明：</li></ol><ul><li><p>根据switch表达式中的值，依次匹配各个case中的常量。一旦配成功，则进入相应的case结构中，调用其执行语句，当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p></li><li><p>break，可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。</p></li><li><p><font color="red">switch结构中的表达式，只能是如下六种数据类型之一：byte、short、char、int、枚举类型（JDK5.0新增）、String类型（JDK7.0新增）。</font></p></li><li><p>case之后只能声明常量，尤其不能是一个范围。</p></li><li><p>break关键字是可选的。</p></li><li><p>default：相当于if-else中的else，也是可选的，且default位置是可选的，一般还是写在末尾。</p></li><li><p>如果switch-case结构中多个case的执行语句相同，则可以考虑进行合并，即写完多行执行语句相同的case以后只写1行执行语句。</p></li><li><p>凡是可以使用switch-case的结构，都可以转换为if-else。反之，不成立。</p></li><li><p>写分支结构时，如果既可以使用if-else，又可以使用switch-case（switch中表达式的取值情况不太多），优先选择使用switch-case。原因：switch-case执行效率稍高。</p></li><li><p>示例：输入日期，返回日期是那一年的第几天。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDays</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> year = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入月份：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> month = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入日期：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> day = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            days += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                days += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                days += <span class="number">28</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            days += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            days += day;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n&quot;</span> + year +<span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;号是&quot;</span> + year + <span class="string">&quot;年的第&quot;</span> + days + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;\n输入有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li><p>在某些条件满足得情况下，反复执行特定代码的功能</p></li><li><p>循环语句的四个组成部分</p><p>①初始化部分（init_statement）</p><p>②循环条件部分（test_exp）–&gt;  boolean类型</p><p>③循环体部分（body_statement）</p><p>④迭代部分（alter_statement）</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802210958.png" alt="14LoopStructure"></p></li><li><p>通常情况下，循环结束都是因为②中循环条件返回了false</p><ul><li><p>循环语句分类</p><ul><li>for循环</li><li>结构</li></ul></li><li><p>for(① ;  ② ;  ④){</p><p>​        ③</p><p>}</p><p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; …… -&gt; 直到②不再返回true，跳出循环</p></li><li><p>例题：遍历100以内的偶数，输出所有偶数的和，输出所有偶数的个数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErgodicEvenNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                count += <span class="number">1</span>;                        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;0-100内偶数有&quot;</span> + count + <span class="string">&quot;个，它们的和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i在for循环内有效，出了for循环就失效了</span></span><br></pre></td></tr></table></figure></li><li><p>例题：输入两个正整数m和n，求其最大公约数和最小公倍数。比如，12和20的最大公约数是4，最小公倍数是60。</p><ul><li>说明break的作用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetGcdLcm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> min = (m &lt;= n)? m : n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span> + m + <span class="string">&quot;和&quot;</span> + n + <span class="string">&quot;的最大公约数为&quot;</span> + i + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = (m &gt;= n)? m : n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = max; i &lt;= m * n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最小公倍数为&quot;</span> + i + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>while循环</p><ul><li>结构</li></ul><p><code>①初始化部分</code></p><p><code>while(②循环条件部分)&#123;</code></p><p>​    <code>③循环体部分;</code></p><p>​    <code>④迭代部分;</code></p><p><code>&#125;</code></p><p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; …… -&gt;②</p><ul><li>说明<ul><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换</li><li>for循环和while循环初始化条件的作用范围不同。</li><li>i 出了while循环后可以继续使用，原因：①初始化部分在循环外。</li></ul></li></ul></li><li><p>do-while</p><ul><li><p>结构</p><p><code>①</code></p><p><code>do&#123;</code></p><p><code>③；</code></p><p><code>④；</code></p><p><code>&#125;while(②)；</code></p><p>执行过程：① -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② ……     -&gt;②</p></li><li><p>特点</p><ul><li>先执行再判断，至少执行一次循环体。</li><li>开发中较少使用do-while，for和while使用较多。</li></ul></li></ul></li><li><p>循环语句综合题：从键盘输入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时，结束程序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirCom</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> posNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> negNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> alter = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (alter &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                posNum += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (alter &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                negNum += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的正数个数为：&quot;</span> + posNum);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的负数个数为：&quot;</span> + negNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>while(true)就相当于for(;;)</li><li>结束循环的几种方式<ul><li>循环条件部分返回false；</li><li>在循环体中执行break。</li></ul></li></ul></li></ul></li><li><p>嵌套循环</p></li></ol><ul><li><p>嵌套循环的使用</p><ul><li>嵌套循环：将一个循环结构A声明在另一个循环结构B的循环体中，就构成了嵌套循环。</li><li>外层循环：循环结构B。</li><li>内层循环：循环结构A。</li></ul></li><li><p>说明</p><ul><li>内层循环结构遍历一遍，只相当于外层循环结构循环一次。</li><li>假设外层循环需要执行m次，内层循环需要执行n次，此时内存层循环的循环体需要执行m*n次。</li></ul></li><li><p>技巧：外层循环控制行数，内层循环控制列数。</p></li><li><p>例题：九九乘法表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiTable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印几行？（1-9）&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> line = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= line; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;x&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>100以内所有质数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印多少以内的质数？&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> limtNum = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;*********结果*********&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limtNum; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)        &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j ==<span class="number">0</span>)&#123;</span><br><span class="line">                    isPriNum = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPriNum)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriNum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;要打印多少以内的质数？&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> limtNum = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;*********结果*********&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();<span class="comment">//获取当前时间距1970-01-01 00:00:00的毫秒数（long型）</span></span><br><span class="line">        <span class="keyword">boolean</span> isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limtNum; i++)&#123;</span><br><span class="line">            <span class="comment">//for (int j = 2; j &lt; i; j++)&#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;<span class="comment">//优化二：一个数如果在2到它本身开方的范围内没有商，则为质数</span></span><br><span class="line">                <span class="keyword">if</span> (i % j ==<span class="number">0</span>)&#123;</span><br><span class="line">                    isPriNum = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//优化一：只对本身非质数的自然数是有效的。加break前后对比：20181ms/2174ms = 9.28</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPriNum)&#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            isPriNum = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;质数的个数：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;所花费的时间：&quot;</span> + (start - end));</span><br><span class="line">        <span class="comment">//优化前：17916ms 优化一：1629ms 优化二：16ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊关键字的使用"><a href="#特殊关键字的使用" class="headerlink" title="特殊关键字的使用"></a>特殊关键字的使用</h3><ul><li><p>break</p><ul><li>使用范围：switch-case、循环结构中</li><li>循环中使用的作用：结束当前循环</li><li>默认跳出包裹此关键字最近的一层循环</li><li>结束指定标识的一层循环结构</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label:<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>continue</p><ul><li><p>使用范围：循环结构中</p></li><li><p>循环中使用的作用：结束当次循环</p></li><li><p>结束指定标识的一层循环结构的当次循环</p><p><code>countinue label;  </code></p></li></ul></li><li><p>相同点：两个关键字后面不能声明执行语句</p></li><li><p>return</p><ul><li>并非专门用于结束循环的，它的的功能是结束一个方法。当一个方法执行到一个return时，这个方法将被结束。</li><li>与break、continue不同的是吗，return直接结束整个方法，不管这个return处于多少层循环之内。</li></ul></li><li><p>补充：衡量一个功能代码的优劣</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率与低存储：时间复杂度、空间复杂度（衡量算法的好坏）</li></ul></li></ul><h1 id="章节练习题及面试题"><a href="#章节练习题及面试题" class="headerlink" title="章节练习题及面试题"></a>章节练习题及面试题</h1><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="Java能动态分配数组吗？"><a href="#Java能动态分配数组吗？" class="headerlink" title="Java能动态分配数组吗？"></a>Java能动态分配数组吗？</h3><p>答：可以。<code>int i = 12; int[] myInt = new int[i];</code></p><h3 id="我怎么知道数组的长度？"><a href="#我怎么知道数组的长度？" class="headerlink" title="我怎么知道数组的长度？"></a>我怎么知道数组的长度？</h3><p>答：.length属性获取。</p><h3 id="数组有没有length-这个方法？String有没有length-这个方法？"><a href="#数组有没有length-这个方法？String有没有length-这个方法？" class="headerlink" title="数组有没有length()这个方法？String有没有length()这个方法？"></a>数组有没有length()这个方法？String有没有length()这个方法？</h3><p>答：数组没有length()这个方法，有length属性。String有length()这个方法。</p><h3 id="Java中的任何数据类型都可以使用System-out-println方法显示："><a href="#Java中的任何数据类型都可以使用System-out-println方法显示：" class="headerlink" title="Java中的任何数据类型都可以使用System.out.println方法显示："></a>Java中的任何数据类型都可以使用System.out.println方法显示：</h3><ol><li>对于基本数据类型而言，输出的往往是变量的值；</li><li>对于像数组这一类复杂的数据类型，输出的是其堆空间中存储位置的hashCode值。</li></ol><h3 id="操作二位数组的注意点："><a href="#操作二位数组的注意点：" class="headerlink" title="操作二位数组的注意点："></a>操作二位数组的注意点：</h3><ul><li>操作二维数组不应使用常数来控制维数。具体方法是array.length表示行数，array[row].length来表示row行的列数。这样当数组行数和列数不相等时，代码可以自动调整为正确的值。</li></ul><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="显示输出"><a href="#显示输出" class="headerlink" title="显示输出"></a>显示输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] stringArray = <span class="keyword">new</span> String[<span class="number">3</span>];<span class="comment">//各元素默认值为null</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; stringArray.length;++)&#123;<span class="comment">//对各元素进行初始化，但没有赋值</span></span><br><span class="line">    stringArray[i] = <span class="keyword">new</span> String();</span><br><span class="line">    System.out.println(stringArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：空（有别于null）。</p><h3 id="面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。"><a href="#面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。" class="headerlink" title="面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。"></a>面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.triabin.chapter02;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 面试题目：创建一个长度为6的int型数组，要求取值为1-30，同时元素值各不相同。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-9-8    17:10:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> ele = (<span class="keyword">int</span>)(Math.random() * (<span class="number">30</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isEqual = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] == ele) &#123;</span><br><span class="line">                    isEqual = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isEqual) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                array[count++] = ele;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章Java语言概述</title>
      <link href="/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><p>//单行注释</p></li><li><p>/*多行注释*/</p></li><li><p>/**文档注释（Java特有）*/</p></li></ol><h2 id="单行和多行注释的作用"><a href="#单行和多行注释的作用" class="headerlink" title="单行和多行注释的作用"></a>单行和多行注释的作用</h2><ol><li><p>对所写程序进行解释说明，增强可读性，方便自己和别人。</p></li><li><p>调试所写代码（注释掉不需要运行部分）。</p></li><li><p>特点：单行和多行注释掉的内容不参与编译，编译以后生成的.class文件中不包含注释掉的信息。</p></li></ol><h2 id="文档注释的使用"><a href="#文档注释的使用" class="headerlink" title="文档注释的使用"></a>文档注释的使用</h2><ol><li><p>注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式</p><ul><li>&gt;javadoc -d [生成文件名] -author -version [解析文件名.java]（-author和-version分别为注释当中@author和@version后面的内容）</li></ul></li></ol><ul><li><strong>注意：多行注释不能嵌套使用</strong></li></ul><h2 id="第1个Java代码"><a href="#第1个Java代码" class="headerlink" title="第1个Java代码"></a>第1个Java代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;<span class="comment">//arguments参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="对第一个Java程序总结"><a href="#对第一个Java程序总结" class="headerlink" title="对第一个Java程序总结"></a>对第一个Java程序总结</h3><ol><li><p>java程序的编写-编译-运行的过程</p><ul><li><p>编写：我们将编写的java代码保存在以“.java”结尾的源文件中</p></li><li><p>编译：使用javac.exe来编译我们的java源文件。格式：javac 源文件名.java</p></li><li><p>运行：使用java.exe解释运行我们的字节码文件（.class)。格式：java 类名</p></li></ul></li><li><p>在一个java源文件中可以声明多个类（class），但是只能有一个类声明为public的，而且要求声明为public的类的类名必须与源文件名必须相同。</p></li><li><p>程序的入口是main()方法，格式是固定的。可以写成：public     static void main(String[] args)或public static void main(String[] a)或public     static void main(String a[])</p></li><li><p>输出语句</p><ul><li><p>System.out.println()：输出后换行，无内容则只换行</p></li><li><p>System.out.print()：输出后不换行</p></li></ul></li><li><p>每一个执行语句都以分号结尾，每个执行语句只要以分号隔开即使不换行也不影响执行</p></li><li><p>编译的过程：编译以后，会生成一个或多个字节码文件，字节码文件与java源文件中的类名相同。</p></li></ol><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><ol><li><p>java语言的特点是什么？</p><ul><li>面向对象性：两个基本概念：类、对象；三大特性：封装、继承、多态</li><li>健壮性：吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li><li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write      once , Run Anywhere”</li></ul></li><li><p>System.out.println()和System.out.print()有什么区别？</p><ul><li>前者输出内容后换行，后者输出后不换行。</li></ul></li><li><p>一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？</p><ul><li>答：可以。但最多只有一个类名声明为public，与文件名相同。</li></ul></li><li><p>设置path的目的是什么？</p><ul><li>目的是为了在控制台的任何文件路径下，都可以调用jdk指定目录下的所有指令。</li></ul></li><li><p>JDK,JRE和JVM的关系是什么？以及JDK、JRE包含的主要结构有哪些？</p><ul><li>关系：JDK包含JRE，JRE包含JVM</li><li>JDK = JRE + Java开发工具（javac.exe、java.exe、javadoc.exe）</li><li>JRD = JVM + Java核心类库</li></ul></li><li><p>创建如下类，使得运行可以输出：<img src="/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/01RunOutput" alt="01RunOutput"></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChairMan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：习大大\n&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别：男&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;住址：北京中南海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>编译和运行上述代码的指令</p><ul><li><p>编译：&gt;javac ChairMan.java</p></li><li><p>运行：&gt;java ChairMan</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客指南Guide</title>
      <link href="/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/"/>
      <url>/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol start="0"><li><a href="https://www.triabin.top/2020/08/02/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97Guide/">博客指南Guide</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC1%E7%AB%A0Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/">第1章Java语言概述</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC2%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/">第2章基本语法</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E7%BB%84/">第3章数组</a></li><li><a href="https://www.triabin.top/2020/08/02/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">第4章面向对象编程（上）</a></li></ol><h1 id="主体内容"><a href="#主体内容" class="headerlink" title="主体内容"></a>主体内容</h1><ul><li><p>由于目前在自学Java，所以这个博客主要用来放我的Java笔记（后续也许会写一些其他教程），各位如果感兴趣或者想借鉴一下的话直接点网站右边标签里面那个Java就只显示Java的笔记了。如图</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802144156.png" alt="image-20200802144156706"></p><p><strong>（手机端的标签在页面下方）</strong></p><p>我目前使用的Java教程是B站的<a href="https://www.bilibili.com/video/BV1zE41197bw?from=search&seid=18257695344041836043">【尚硅谷】 Java全栈工程师就业班 全套（1100小时完结）</a>，有兴趣的老哥（or小姐姐）可以一起学习啊:happy:，做云同学:smirk:。​然后包括教学视频在内的各种课程配套资料可以去尚硅谷的微信公号回复Java获取，由于B站是别人整理拼接的，有部分教学视频缺失，所以建议保存他们的公众号给的度盘资源，然后对应着去看相应缺失的部分，看完再回B站就好了（为啥对B战这么执着:fun_moon_with_face:？当然是因为没有弹幕坚持不下去:cry:加上度盘没会员，画质太渣）</p></li></ul><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><p>这是对应的学习资料</p><p>链接：<a href="https://pan.baidu.com/s/15ocrWsdcODC8kA1VCkMaXQ">https://pan.baidu.com/s/15ocrWsdcODC8kA1VCkMaXQ</a><br>提取码：57vp </p><p><font color="purple"><strong>注意：如果链接失效了就自己去尚硅谷微信公众号回复关键字获取</strong></font></p></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>博客搭建：<a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://github.com/">GitHub</a> + <a href="https://git-scm.com/">Git</a> + <a href="https://nodejs.org/en/download/">Node.js</a></li><li>图床：<a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://github.com/">GitHub</a></li><li>博客主题：<a href="https://demo.jerryc.me/">butterfly</a></li><li>参考文章：<a href="https://spoience.com/hexo-github-build.html#%E5%89%8D%E8%A8%80">https://spoience.com/hexo-github-build.html#%E5%89%8D%E8%A8%80</a></li><li>评论：LeanCloud + Valine</li></ol><h1 id="网页操作指南"><a href="#网页操作指南" class="headerlink" title="网页操作指南"></a>网页操作指南</h1><ol><li><p>点击右下方的小齿轮可打开设置，即可进行切换阅读模式开关、日/夜间模式切换、网页的放大/缩小等操作，下方箭头为回到顶部。手机端会在齿轮与回到顶部之间多一个目录按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802152208.png" alt="image-20200802152207947"></p></li><li><p>加入评论功能后，在齿轮和回到顶部之间多了一个评论按钮，点击可直接跳转到评论区。如下图：</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807200309.png" align="left"></li><li><p>评论功能</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807200459.png" align="left"><p>如图，评论功能使用 邮箱+昵称 的形式来区别用户的，所以这两项必填，分别点击两个地方填入就好了，目前我也不知道怎么改更简单的方法来区分用户，暂时这样了。评论功能用的Valine。</p></li><li><p>公告</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807202235.png" align="left"><p>网页有什么重大更新内容我会在这儿标注！</p></li><li><p>搜索功能</p><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200807202710.png" align="left"><p>加入了本地搜索功能，可以搜索网页上所有文章中的内容。</p></li></ol><blockquote><p>以上按钮、评论、公告、搜索等功能均来自butterfly主题。</p></blockquote><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ul><li>感谢酷安<a href="http://www.coolapk.com/u/2292833">@加加加加油呦</a>、<a href="http://www.coolapk.com/u/2292833">@硝酸银</a>、<a href="http://www.coolapk.com/u/796912">@lhspang</a>三位老哥的推荐让我入坑了个人博客，过程确实没少折腾（纯小白，完全从0开始:sob:)，图床搭建，仓库创建，网站主题配置每一步都遇到过不少问题，其中图床搭建和主题配置（修改那个yml文件）最磨人，但是搭建好了以后是真的香，从此以后我也是一个由自己的网站的人了:sunglasses:。</li></ul><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><blockquote><p>N：如果发现课后练习/章节练习空着，要么是没意思懒得做，要么是我暂时没时间做或者忘了QVQ。</p></blockquote><ul><li>最后附上两张酷安老哥身份标识图：</li></ul><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802145953.png" align="left"><img src="https://cdn.jsdelivr.net/gh/Triabin/MyImgBed@master/20200802150009.png" align="left"><hr><p><strong><font color="red">后续网页各方面有变动都会在这个网页里面更新，网页我会置顶。</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Preface </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
